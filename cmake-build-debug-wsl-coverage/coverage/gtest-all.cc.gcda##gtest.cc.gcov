        -:    0:Source:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/_deps/googletest-src/googletest/src/gtest.cc
        -:    0:Graph:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <initializer_list>
        -:   48:#include <iomanip>
        -:   49:#include <iterator>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <unordered_set>
        -:   56:#include <vector>
        -:   57:
        -:   58:#include "gtest/gtest-assertion-result.h"
        -:   59:#include "gtest/gtest-spi.h"
        -:   60:#include "gtest/internal/custom/gtest.h"
        -:   61:
        -:   62:#if GTEST_OS_LINUX
        -:   63:
        -:   64:#include <fcntl.h>   // NOLINT
        -:   65:#include <limits.h>  // NOLINT
        -:   66:#include <sched.h>   // NOLINT
        -:   67:// Declares vsnprintf().  This header is not available on Windows.
        -:   68:#include <strings.h>   // NOLINT
        -:   69:#include <sys/mman.h>  // NOLINT
        -:   70:#include <sys/time.h>  // NOLINT
        -:   71:#include <unistd.h>    // NOLINT
        -:   72:
        -:   73:#include <string>
        -:   74:
        -:   75:#elif GTEST_OS_ZOS
        -:   76:#include <sys/time.h>  // NOLINT
        -:   77:
        -:   78:// On z/OS we additionally need strings.h for strcasecmp.
        -:   79:#include <strings.h>   // NOLINT
        -:   80:
        -:   81:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   82:
        -:   83:#include <windows.h>  // NOLINT
        -:   84:#undef min
        -:   85:
        -:   86:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   87:
        -:   88:#include <windows.h>  // NOLINT
        -:   89:#undef min
        -:   90:
        -:   91:#ifdef _MSC_VER
        -:   92:#include <crtdbg.h>  // NOLINT
        -:   93:#endif
        -:   94:
        -:   95:#include <io.h>         // NOLINT
        -:   96:#include <sys/stat.h>   // NOLINT
        -:   97:#include <sys/timeb.h>  // NOLINT
        -:   98:#include <sys/types.h>  // NOLINT
        -:   99:
        -:  100:#if GTEST_OS_WINDOWS_MINGW
        -:  101:#include <sys/time.h>  // NOLINT
        -:  102:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  103:
        -:  104:#else
        -:  105:
        -:  106:// cpplint thinks that the header is already included, so we want to
        -:  107:// silence it.
        -:  108:#include <sys/time.h>  // NOLINT
        -:  109:#include <unistd.h>    // NOLINT
        -:  110:
        -:  111:#endif  // GTEST_OS_LINUX
        -:  112:
        -:  113:#if GTEST_HAS_EXCEPTIONS
        -:  114:#include <stdexcept>
        -:  115:#endif
        -:  116:
        -:  117:#if GTEST_CAN_STREAM_RESULTS_
        -:  118:#include <arpa/inet.h>   // NOLINT
        -:  119:#include <netdb.h>       // NOLINT
        -:  120:#include <sys/socket.h>  // NOLINT
        -:  121:#include <sys/types.h>   // NOLINT
        -:  122:#endif
        -:  123:
        -:  124:#include "src/gtest-internal-inl.h"
        -:  125:
        -:  126:#if GTEST_OS_WINDOWS
        -:  127:#define vsnprintf _vsnprintf
        -:  128:#endif  // GTEST_OS_WINDOWS
        -:  129:
        -:  130:#if GTEST_OS_MAC
        -:  131:#ifndef GTEST_OS_IOS
        -:  132:#include <crt_externs.h>
        -:  133:#endif
        -:  134:#endif
        -:  135:
        -:  136:#if GTEST_HAS_ABSL
        -:  137:#include "absl/debugging/failure_signal_handler.h"
        -:  138:#include "absl/debugging/stacktrace.h"
        -:  139:#include "absl/debugging/symbolize.h"
        -:  140:#include "absl/flags/parse.h"
        -:  141:#include "absl/flags/usage.h"
        -:  142:#include "absl/strings/str_cat.h"
        -:  143:#include "absl/strings/str_replace.h"
        -:  144:#endif  // GTEST_HAS_ABSL
        -:  145:
        -:  146:namespace testing {
        -:  147:
        -:  148:using internal::CountIf;
        -:  149:using internal::ForEach;
        -:  150:using internal::GetElementOr;
        -:  151:using internal::Shuffle;
        -:  152:
        -:  153:// Constants.
        -:  154:
        -:  155:// A test whose test suite name or test name matches this filter is
        -:  156:// disabled and not run.
        -:  157:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  158:
        -:  159:// A test suite whose name matches this filter is considered a death
        -:  160:// test suite and will be run before test suites whose name doesn't
        -:  161:// match this filter.
        -:  162:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  163:
        -:  164:// A test filter that matches everything.
        -:  165:static const char kUniversalFilter[] = "*";
        -:  166:
        -:  167:// The default output format.
        -:  168:static const char kDefaultOutputFormat[] = "xml";
        -:  169:// The default output file.
        -:  170:static const char kDefaultOutputFile[] = "test_detail";
        -:  171:
        -:  172:// The environment variable name for the test shard index.
        -:  173:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  174:// The environment variable name for the total number of test shards.
        -:  175:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  176:// The environment variable name for the test shard status file.
        -:  177:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  178:
        -:  179:namespace internal {
        -:  180:
        -:  181:// The text used in failure messages to indicate the start of the
        -:  182:// stack trace.
        -:  183:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  184:
        -:  185:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  186:// is specified on the command line.
        -:  187:bool g_help_flag = false;
        -:  188:
        -:  189:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  190:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  191:  FILE* fileout = nullptr;
    #####:  192:  FilePath output_file_path(output_file);
    %%%%%:  192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  192-block  1
call    4 never executed
    #####:  193:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  193-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  193-block  1
call    3 never executed
        -:  194:
    #####:  195:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  195-block  1
branch  3 never executed
branch  4 never executed
    #####:  196:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  196-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  196-block  1
        -:  197:  }
    #####:  198:  if (fileout == nullptr) {
    %%%%%:  198-block  0
branch  0 never executed
branch  1 never executed
    #####:  199:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  199-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  199-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  199-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  199-block  4
call   13 never executed
    $$$$$:  199-block  5
call   14 never executed
    $$$$$:  199-block  6
        -:  200:  }
    #####:  201:  return fileout;
    %%%%%:  201-block  0
call    0 never executed
    %%%%%:  201-block  1
        -:  202:}
        -:  203:
        -:  204:}  // namespace internal
        -:  205:
        -:  206:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  207:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  208:static const char* GetDefaultFilter() {
        -:  209:  const char* const testbridge_test_only =
        1:  210:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  210-block  0
call    0 returned 1
        1:  211:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  212:    return testbridge_test_only;
    %%%%%:  212-block  0
        -:  213:  }
        1:  214:  return kUniversalFilter;
        1:  214-block  0
        -:  215:}
        -:  216:
        -:  217:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  218:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  219:static bool GetDefaultFailFast() {
        -:  220:  const char* const testbridge_test_runner_fail_fast =
        1:  221:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  221-block  0
call    0 returned 1
        1:  222:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  223:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  223-block  0
        -:  224:  }
        1:  225:  return false;
        1:  225-block  0
        -:  226:}
        -:  227:
        -:  228:}  // namespace testing
        -:  229:
        -:  230:GTEST_DEFINE_bool_(
        -:  231:    fail_fast,
        -:  232:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  233:                                        testing::GetDefaultFailFast()),
        -:  234:    "True if and only if a test failure should stop further test execution.");
        -:  235:
        -:  236:GTEST_DEFINE_bool_(
        -:  237:    also_run_disabled_tests,
        -:  238:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  239:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  240:
        -:  241:GTEST_DEFINE_bool_(
        -:  242:    break_on_failure,
        -:  243:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  244:    "True if and only if a failed assertion should be a debugger "
        -:  245:    "break-point.");
        -:  246:
        -:  247:GTEST_DEFINE_bool_(catch_exceptions,
        -:  248:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  249:                                                       true),
        -:  250:                   "True if and only if " GTEST_NAME_
        -:  251:                   " should catch exceptions and treat them as test failures.");
        -:  252:
        -:  253:GTEST_DEFINE_string_(
        -:  254:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  255:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  256:    "and auto.  'auto' means to use colors if the output is "
        -:  257:    "being sent to a terminal and the TERM environment variable "
        -:  258:    "is set to a terminal type that supports colors.");
        -:  259:
        -:  260:GTEST_DEFINE_string_(
        -:  261:    filter,
        -:  262:    testing::internal::StringFromGTestEnv("filter",
        -:  263:                                          testing::GetDefaultFilter()),
        -:  264:    "A colon-separated list of glob (not regex) patterns "
        -:  265:    "for filtering the tests to run, optionally followed by a "
        -:  266:    "'-' and a : separated list of negative patterns (tests to "
        -:  267:    "exclude).  A test is run if it matches one of the positive "
        -:  268:    "patterns and does not match any of the negative patterns.");
        -:  269:
        -:  270:GTEST_DEFINE_bool_(
        -:  271:    install_failure_signal_handler,
        -:  272:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  273:                                        false),
        -:  274:    "If true and supported on the current platform, " GTEST_NAME_
        -:  275:    " should "
        -:  276:    "install a signal handler that dumps debugging information when fatal "
        -:  277:    "signals are raised.");
        -:  278:
        -:  279:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  280:
        -:  281:// The net priority order after flag processing is thus:
        -:  282://   --gtest_output command line flag
        -:  283://   GTEST_OUTPUT environment variable
        -:  284://   XML_OUTPUT_FILE environment variable
        -:  285://   ''
        -:  286:GTEST_DEFINE_string_(
        -:  287:    output,
        -:  288:    testing::internal::StringFromGTestEnv(
        -:  289:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  290:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  291:    "optionally followed by a colon and an output file name or directory. "
        -:  292:    "A directory is indicated by a trailing pathname separator. "
        -:  293:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  294:    "If a directory is specified, output files will be created "
        -:  295:    "within that directory, with file-names based on the test "
        -:  296:    "executable's name and, if necessary, made unique by adding "
        -:  297:    "digits.");
        -:  298:
        -:  299:GTEST_DEFINE_bool_(
        -:  300:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  301:    "True if only test failures should be displayed in text output.");
        -:  302:
        -:  303:GTEST_DEFINE_bool_(print_time,
        -:  304:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  305:                   "True if and only if " GTEST_NAME_
        -:  306:                   " should display elapsed time in text output.");
        -:  307:
        -:  308:GTEST_DEFINE_bool_(print_utf8,
        -:  309:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  310:                   "True if and only if " GTEST_NAME_
        -:  311:                   " prints UTF8 characters as text.");
        -:  312:
        -:  313:GTEST_DEFINE_int32_(
        -:  314:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  315:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  316:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  317:
        -:  318:GTEST_DEFINE_int32_(
        -:  319:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  320:    "How many times to repeat each test.  Specify a negative number "
        -:  321:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  322:
        -:  323:GTEST_DEFINE_bool_(
        -:  324:    recreate_environments_when_repeating,
        -:  325:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  326:                                        false),
        -:  327:    "Controls whether global test environments are recreated for each repeat "
        -:  328:    "of the tests. If set to false the global test environments are only set "
        -:  329:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  330:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  331:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  332:    "there is no last run, the environments will always be recreated to avoid "
        -:  333:    "leaks.");
        -:  334:
        -:  335:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  336:                   "True if and only if " GTEST_NAME_
        -:  337:                   " should include internal stack frames when "
        -:  338:                   "printing test failure stack traces.");
        -:  339:
        -:  340:GTEST_DEFINE_bool_(shuffle,
        -:  341:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  342:                   "True if and only if " GTEST_NAME_
        -:  343:                   " should randomize tests' order on every run.");
        -:  344:
        -:  345:GTEST_DEFINE_int32_(
        -:  346:    stack_trace_depth,
        -:  347:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  348:                                         testing::kMaxStackTraceDepth),
        -:  349:    "The maximum number of stack frames to print when an "
        -:  350:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  351:
        -:  352:GTEST_DEFINE_string_(
        -:  353:    stream_result_to,
        -:  354:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  355:    "This flag specifies the host name and the port number on which to stream "
        -:  356:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  357:    "Linux.");
        -:  358:
        -:  359:GTEST_DEFINE_bool_(
        -:  360:    throw_on_failure,
        -:  361:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  362:    "When this flag is specified, a failed assertion will throw an exception "
        -:  363:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  364:    "otherwise. For use with an external test framework.");
        -:  365:
        -:  366:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  367:GTEST_DEFINE_string_(
        -:  368:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  369:    "This flag specifies the flagfile to read command-line flags from.");
        -:  370:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  371:
        -:  372:namespace testing {
        -:  373:namespace internal {
        -:  374:
        -:  375:// Generates a random number from [0, range), using a Linear
        -:  376:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  377:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  378:uint32_t Random::Generate(uint32_t range) {
        -:  379:  // These constants are the same as are used in glibc's rand(3).
        -:  380:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  381:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  382:
    #####:  383:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  383-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  383-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  383-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  383-block  3
call   11 never executed
    $$$$$:  383-block  4
call   12 never executed
    $$$$$:  383-block  5
call   13 never executed
    #####:  384:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  384-block  1
call    3 never executed
call    4 never executed
    %%%%%:  384-block  2
call    5 never executed
    $$$$$:  384-block  3
call    6 never executed
    #####:  385:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  385-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  385-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  386:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  386-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  386-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  386-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  386-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  387:
        -:  388:  // Converting via modulus introduces a bit of downward bias, but
        -:  389:  // it's simple, and a linear congruential generator isn't too good
        -:  390:  // to begin with.
    #####:  391:  return state_ % range;
    %%%%%:  391-block  0
    %%%%%:  391-block  1
        -:  392:}
        -:  393:
        -:  394:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  395:// Google Test.  Useful for catching the user mistake of not initializing
        -:  396:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  397:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  397-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  398:
        -:  399:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  400:// results of calling a given int-returning method on each.
        -:  401:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  402:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  403:                                int (TestSuite::*method)() const) {
        5:  404:  int sum = 0;
       10:  405:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  405-block  0
       10:  405-block  1
call    0 returned 10
branch  1 taken 5 (fallthrough)
branch  2 taken 5
       5*:  406:    sum += (case_list[i]->*method)();
        5:  406-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%:  406-block  1
        5:  406-block  2
        5:  406-block  3
call    3 returned 5
        -:  407:  }
        5:  408:  return sum;
        5:  408-block  0
        -:  409:}
        -:  410:
        -:  411:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  412:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  413:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  413-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  413-block  2
    %%%%%:  413-block  3
    %%%%%:  413-block  4
        -:  414:}
        -:  415:
        -:  416:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2:  417:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  418:  return test_suite->should_run() && test_suite->Failed();
        2:  418-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  418-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  418-block  2
        2:  418-block  3
        2:  418-block  4
        -:  419:}
        -:  420:
        -:  421:// Returns true if and only if test_suite contains at least one test that
        -:  422:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  423:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  424:  return test_suite->should_run();
        2:  424-block  0
call    0 returned 2
        -:  425:}
        -:  426:
        -:  427:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  428:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  429:                           int line, const char* message)
    #####:  430:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  430-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  430-block  1
    $$$$$:  430-block  2
call    4 never executed
        -:  431:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  432:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  432-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  432-block  1
call    2 never executed
call    3 never executed
        -:  433:
        -:  434:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  435:void AssertHelper::operator=(const Message& message) const {
    #####:  436:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  436-block  0
call    0 never executed
    #####:  437:      data_->type, data_->file, data_->line,
    %%%%%:  437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  438:      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  438-block  0
call    3 never executed
    $$$$$:  438-block  1
call    4 never executed
    $$$$$:  438-block  2
    #####:  439:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  439-block  0
call    4 never executed
        -:  440:      // Skips the stack frame for this function itself.
        -:  441:  );  // NOLINT
    #####:  442:}
        -:  443:
        -:  444:namespace {
        -:  445:
        -:  446:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  447:// to creates test cases for it, a synthetic test case is
        -:  448:// inserted to report ether an error or a log message.
        -:  449://
        -:  450:// This configuration bit will likely be removed at some point.
        -:  451:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  452:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  453:
        -:  454:// A test that fails at a given file/line location with a given message.
        -:  455:class FailureTest : public Test {
        -:  456: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  457:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  458:                       bool as_error)
    #####:  459:      : loc_(loc),
    #####:  460:        error_message_(std::move(error_message)),
    #####:  461:        as_error_(as_error) {}
    %%%%%:  461-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  461-block  1
call    4 never executed
call    5 never executed
    $$$$$:  461-block  2
call    6 never executed
        -:  462:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  463:  void TestBody() override {
    #####:  464:    if (as_error_) {
    %%%%%:  464-block  0
branch  0 never executed
branch  1 never executed
    #####:  465:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  465-block  0
call    3 never executed
    $$$$$:  465-block  1
call    4 never executed
    $$$$$:  465-block  2
    #####:  466:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  466-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  466-block  1
call    4 never executed
    %%%%%:  466-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  466-block  3
call    9 never executed
        -:  467:    } else {
    #####:  468:      std::cout << error_message_ << std::endl;
    %%%%%:  468-block  0
call    0 never executed
call    1 never executed
        -:  469:    }
    #####:  470:  }
    %%%%%:  470-block  0
        -:  471:
        -:  472: private:
        -:  473:  const CodeLocation loc_;
        -:  474:  const std::string error_message_;
        -:  475:  const bool as_error_;
        -:  476:};
        -:  477:
        -:  478:}  // namespace
        -:  479:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  480:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  481:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  481-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  482:}
        -:  483:
        -:  484:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  485:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  486:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  486-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  486-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  486-block  2
call    8 never executed
call    9 never executed
    $$$$$:  486-block  3
call   10 never executed
    $$$$$:  486-block  4
    $$$$$:  486-block  5
call   11 never executed
    #####:  487:}
        -:  488:
        -:  489:// If this parameterized test suite has no instantiations (and that
        -:  490:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  491:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  492:                             bool has_test_p) {
    #####:  493:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  494:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  494-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  494-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  494-block  2
    $$$$$:  494-block  3
        -:  495:
    #####:  496:  const char kMissingInstantiation[] =  //
        -:  497:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  498:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  499:      "ones provided expand to nothing."
        -:  500:      "\n\n"
        -:  501:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  502:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  503:      "placed in a library that may be linked in to get other utilities.)";
        -:  504:
    #####:  505:  const char kMissingTestCase[] =  //
        -:  506:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  507:      "defined via TEST_P . No test cases will run."
        -:  508:      "\n\n"
        -:  509:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  510:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  511:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  512:      "removed but the rest got left behind.";
        -:  513:
        -:  514:  std::string message =
    #####:  515:      "Parameterized test suite " + name +
    %%%%%:  515-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  515-block  1
    %%%%%:  515-block  2
    %%%%%:  515-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  515-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  515-block  5
    $$$$$:  515-block  6
    #####:  516:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  516-block  1
        -:  517:      "\n\n"
        -:  518:      "To suppress this error for this test suite, insert the following line "
        -:  519:      "(in a non-header) in the namespace it is defined in:"
        -:  520:      "\n\n"
    #####:  521:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  521-block  1
    #####:  522:      name + ");";
    %%%%%:  522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  522-block  1
call    4 never executed
        -:  523:
    #####:  524:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  524-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  524-block  1
    $$$$$:  524-block  2
call    6 never executed
    #####:  525:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  525-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  525-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  525-block  2
call   11 never executed
call   12 never executed
    $$$$$:  525-block  3
call   13 never executed
    $$$$$:  525-block  4
        -:  526:      "GoogleTestVerification", full_name.c_str(),
        -:  527:      nullptr,  // No type parameter.
        -:  528:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  529:      location.file.c_str(), location.line, [message, location] {
    #####:  530:        return new FailureTest(location, message,
    #####:  531:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  531-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  531-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  531-block  2
call    7 never executed
    %%%%%:  531-block  3
    $$$$$:  531-block  4
call    8 never executed
    $$$$$:  531-block  5
call    9 never executed
        -:  532:      });
        -:  533:}
        -:  534:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  535:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  536:                                        CodeLocation code_location) {
    #####:  537:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  537-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  537-block  1
call    6 never executed
    $$$$$:  537-block  2
call    7 never executed
        -:  538:      test_suite_name, code_location);
    #####:  539:}
        -:  540:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  541:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  542:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  542-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  543:      case_name);
    #####:  544:}
        -:  545:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  546:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  547:    const char* test_suite_name, CodeLocation code_location) {
    #####:  548:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  548-block  1
call    4 never executed
call    5 never executed
    $$$$$:  548-block  2
call    6 never executed
    $$$$$:  548-block  3
    $$$$$:  548-block  4
call    7 never executed
    $$$$$:  548-block  5
    #####:  549:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  549-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  549-block  2
call    9 never executed
    $$$$$:  549-block  3
    $$$$$:  549-block  4
call   10 never executed
    #####:  550:}
        -:  551:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  552:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  553:    const char* test_suite_name) {
    #####:  554:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  554-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  554-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  554-block  2
call    7 never executed
call    8 never executed
    $$$$$:  554-block  3
call    9 never executed
    $$$$$:  554-block  4
    $$$$$:  554-block  5
call   10 never executed
    $$$$$:  554-block  6
    #####:  555:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  556:    it->second.instantiated = true;
    %%%%%:  556-block  0
call    0 never executed
        -:  557:  } else {
    #####:  558:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  558-block  1
call    3 never executed
    %%%%%:  558-block  2
call    4 never executed
    $$$$$:  558-block  3
call    5 never executed
    $$$$$:  558-block  4
    #####:  559:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  559-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  559-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  560:  }
    #####:  561:}
    %%%%%:  561-block  0
        -:  562:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  563:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  564:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  564-block  0
call    0 returned 1
       1*:  565:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
        1:  565-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  565-block  1
call    5 never executed
    %%%%%:  565-block  2
call    6 never executed
    #####:  566:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  566-block  0
    %%%%%:  566-block  1
    #####:  567:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  567-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  567-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  567-block  2
    $$$$$:  567-block  3
        -:  568:
        -:  569:    std::string message =
    #####:  570:        "Type parameterized test suite " + testcase.first +
    %%%%%:  570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  570-block  1
    $$$$$:  570-block  2
        -:  571:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  572:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  573:        "\n\n"
        -:  574:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  575:        "part of binaries that intend to use them. (As opposed to, for "
        -:  576:        "example, being placed in a library that may be linked in to get other "
        -:  577:        "utilities.)"
        -:  578:        "\n\n"
        -:  579:        "To suppress this error for this test suite, insert the following line "
        -:  580:        "(in a non-header) in the namespace it is defined in:"
        -:  581:        "\n\n"
    #####:  582:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  582-block  1
    #####:  583:        testcase.first + ");";
    %%%%%:  583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  583-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  583-block  2
call    7 never executed
        -:  584:
        -:  585:    std::string full_name =
    #####:  586:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  586-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  586-block  1
    $$$$$:  586-block  2
call    6 never executed
    #####:  587:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  587-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  587-block  1
call   10 never executed
call   11 never executed
    $$$$$:  587-block  2
call   12 never executed
    $$$$$:  587-block  3
        -:  588:        "GoogleTestVerification", full_name.c_str(),
        -:  589:        nullptr,  // No type parameter.
        -:  590:        nullptr,  // No value parameter.
        -:  591:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  592:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  592-block  0
call    0 never executed
    #####:  593:          return new FailureTest(testcase.second.code_location, message,
    #####:  594:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  594-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  594-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  594-block  2
call    7 never executed
    %%%%%:  594-block  3
    $$$$$:  594-block  4
call    8 never executed
    $$$$$:  594-block  5
call    9 never executed
        -:  595:        });
        -:  596:  }
        1:  597:}
        1:  597-block  0
        -:  598:
        -:  599:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  600:static ::std::vector<std::string> g_argvs;
        -:  601:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  602:::std::vector<std::string> GetArgvs() {
        -:  603:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  604:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  605:  // ::string. This code converts it to the appropriate type.
        -:  606:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  607:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  608:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  609:  return g_argvs;
        2:  609-block  0
call    0 returned 2
        -:  610:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  611:}
        -:  612:
        -:  613:// Returns the current application's name, removing directory path if that
        -:  614:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  615:FilePath GetCurrentExecutableName() {
    #####:  616:  FilePath result;
    %%%%%:  616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  616-block  1
call    3 never executed
    $$$$$:  616-block  2
call    4 never executed
        -:  617:
        -:  618:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  619:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  620:#else
    #####:  621:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  621-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  621-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  621-block  3
call   10 never executed
call   11 never executed
    $$$$$:  621-block  4
call   12 never executed
    $$$$$:  621-block  5
    $$$$$:  621-block  6
call   13 never executed
    $$$$$:  621-block  7
        -:  622:#endif  // GTEST_OS_WINDOWS
        -:  623:
    #####:  624:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  624-block  0
        -:  625:}
        -:  626:
        -:  627:// Functions for processing the gtest_output flag.
        -:  628:
        -:  629:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 48%
        1:  630:std::string UnitTestOptions::GetOutputFormat() {
        1:  631:  std::string s = GTEST_FLAG_GET(output);
        1:  631-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  631-block  1
call    3 never executed
        1:  632:  const char* const gtest_output_flag = s.c_str();
        1:  632-block  0
call    0 returned 1
        1:  633:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  634:  return (colon == nullptr)
        -:  635:             ? std::string(gtest_output_flag)
        -:  636:             : std::string(gtest_output_flag,
       2*:  637:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  637-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  637-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  637-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  637-block  3
call   12 never executed
        1:  637-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  637-block  5
call   15 returned 1
        1:  637-block  6
call   16 returned 1
        1:  637-block  7
    $$$$$:  637-block  8
branch 17 never executed
branch 18 never executed
    $$$$$:  637-block  9
call   19 never executed
    $$$$$:  637-block 10
    $$$$$:  637-block 11
branch 20 never executed
branch 21 never executed
    $$$$$:  637-block 12
call   22 never executed
    $$$$$:  637-block 13
        -:  638:}
        -:  639:
        -:  640:// Returns the name of the requested output file, or the default if none
        -:  641:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  642:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  643:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  643-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  643-block  1
call    4 never executed
    #####:  644:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  644-block  0
call    0 never executed
        -:  645:
    #####:  646:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  646-block  0
call    3 never executed
    $$$$$:  646-block  1
call    4 never executed
    #####:  647:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  647-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  647-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  647-block  3
call   10 never executed
    $$$$$:  647-block  4
        -:  648:
    #####:  649:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  650:  if (colon == nullptr)
    %%%%%:  650-block  0
branch  0 never executed
branch  1 never executed
    #####:  651:    return internal::FilePath::MakeFileName(
    %%%%%:  651-block  0
call    0 never executed
    %%%%%:  651-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  651-block  2
call    4 never executed
    $$$$$:  651-block  3
call    5 never executed
    $$$$$:  651-block  4
    #####:  652:               internal::FilePath(
    %%%%%:  652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  652-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  652-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  652-block  3
call   14 never executed
    $$$$$:  652-block  4
    $$$$$:  652-block  5
call   15 never executed
    $$$$$:  652-block  6
    $$$$$:  652-block  7
call   16 never executed
    $$$$$:  652-block  8
        -:  653:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  654:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  654-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  654-block  1
call   10 never executed
    $$$$$:  654-block  2
    $$$$$:  654-block  3
call   11 never executed
    $$$$$:  654-block  4
    $$$$$:  654-block  5
call   12 never executed
    $$$$$:  654-block  6
    #####:  655:        .string();
    %%%%%:  655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  656:
    #####:  657:  internal::FilePath output_name(colon + 1);
    %%%%%:  657-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  657-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:  657-block  2
call    8 never executed
    $$$$$:  657-block  3
    $$$$$:  657-block  4
    $$$$$:  657-block  5
call    9 never executed
    #####:  658:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  659:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  659-block  1
call    3 never executed
    $$$$$:  659-block  2
call    4 never executed
    $$$$$:  659-block  3
    #####:  660:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  660-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  660-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  660-block  3
call   14 never executed
    $$$$$:  660-block  4
    $$$$$:  660-block  5
call   15 never executed
    $$$$$:  660-block  6
    $$$$$:  660-block  7
call   16 never executed
    $$$$$:  660-block  8
    #####:  661:        internal::FilePath(colon + 1));
    %%%%%:  661-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  661-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  661-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  661-block  3
call   13 never executed
    $$$$$:  661-block  4
    $$$$$:  661-block  5
call   14 never executed
    $$$$$:  661-block  6
    $$$$$:  661-block  7
call   15 never executed
    $$$$$:  661-block  8
        -:  662:
    #####:  663:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  663-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  664:
        -:  665:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  666:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  666-block  0
    #####:  667:      GetOutputFormat().c_str()));
    %%%%%:  667-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  667-block  1
call    3 never executed
    %%%%%:  667-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  667-block  3
call    7 never executed
    $$$$$:  667-block  4
    $$$$$:  667-block  5
call    8 never executed
    #####:  668:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  669:}
        -:  670:
        -:  671:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  672:// pattern consists of regular characters, single-character wildcards (?), and
        -:  673:// multi-character wildcards (*).
        -:  674://
        -:  675:// This function implements a linear-time string globbing algorithm based on
        -:  676:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 17 returned 100% blocks executed 83%
       17:  677:static bool PatternMatchesString(const std::string& name_str,
        -:  678:                                 const char* pattern, const char* pattern_end) {
       17:  679:  const char* name = name_str.c_str();
       17:  679-block  0
call    0 returned 17
       17:  680:  const char* const name_begin = name;
       17:  681:  const char* const name_end = name + name_str.size();
call    0 returned 17
        -:  682:
       17:  683:  const char* pattern_next = pattern;
       17:  684:  const char* name_next = name;
        -:  685:
      334:  686:  while (pattern < pattern_end || name < name_end) {
      334:  686-block  0
branch  0 taken 72 (fallthrough)
branch  1 taken 262
       72:  686-block  1
branch  2 taken 69 (fallthrough)
branch  3 taken 3
      317:  686-block  2
      331:  687:    if (pattern < pattern_end) {
      331:  687-block  0
branch  0 taken 262 (fallthrough)
branch  1 taken 69
      262:  688:      switch (*pattern) {
      262:  688-block  0
branch  0 taken 98
branch  1 taken 0
branch  2 taken 164
       98:  689:        default:  // Match an ordinary character.
      98*:  690:          if (name < name_end && *name == *pattern) {
       98:  690-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 8
       90:  690-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 90
    #####:  691:            ++pattern;
    #####:  692:            ++name;
    #####:  693:            continue;
    %%%%%:  693-block  0
        -:  694:          }
       98:  695:          break;
       98:  695-block  0
    #####:  696:        case '?':  // Match any single character.
    #####:  697:          if (name < name_end) {
    %%%%%:  697-block  0
branch  0 never executed
branch  1 never executed
    #####:  698:            ++pattern;
    #####:  699:            ++name;
    #####:  700:            continue;
    %%%%%:  700-block  0
        -:  701:          }
    #####:  702:          break;
    %%%%%:  702-block  0
      164:  703:        case '*':
        -:  704:          // Match zero or more characters. Start by skipping over the wildcard
        -:  705:          // and matching zero characters from name. If that fails, restart and
        -:  706:          // match one more character than the last attempt.
      164:  707:          pattern_next = pattern;
      164:  708:          name_next = name + 1;
      164:  709:          ++pattern;
      164:  710:          continue;
      164:  710-block  0
        -:  711:      }
        -:  712:    }
        -:  713:    // Failed to match a character. Restart if possible.
      167:  714:    if (name_begin < name_next && name_next <= name_end) {
      167:  714-block  0
branch  0 taken 161 (fallthrough)
branch  1 taken 6
      161:  714-block  1
branch  2 taken 153 (fallthrough)
branch  3 taken 8
      153:  715:      pattern = pattern_next;
      153:  716:      name = name_next;
      153:  717:      continue;
      153:  717-block  0
        -:  718:    }
       14:  719:    return false;
       14:  719-block  0
        -:  720:  }
        3:  721:  return true;
        3:  721-block  0
        -:  722:}
        -:  723:
        -:  724:namespace {
        -:  725:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5:  726:bool IsGlobPattern(const std::string& pattern) {
        5:  727:  return std::any_of(pattern.begin(), pattern.end(),
        5:  727-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 14 returned 100% blocks executed 100%
       19:  728:                     [](const char c) { return c == '?' || c == '*'; });
       14:  728-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  728-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 9
        5:  728-block  2
        9:  728-block  3
       14:  728-block  4
        -:  729:}
        -:  730:
        -:  731:class UnitTestFilter {
        -:  732: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  733:  UnitTestFilter() = default;
        2:  733-block  0
call    0 returned 2
call    1 returned 2
        -:  734:
        -:  735:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:  736:  explicit UnitTestFilter(const std::string& filter) {
        3:  736-block  0
call    0 returned 3
call    1 returned 3
    $$$$$:  736-block  1
call    2 never executed
    $$$$$:  736-block  2
call    3 never executed
        -:  737:    // By design "" filter matches "" string.
        6:  738:    std::vector<std::string> all_patterns;
call    0 returned 3
        3:  738-block  0
call    1 returned 3
    $$$$$:  738-block  1
call    2 never executed
        3:  739:    SplitString(filter, ':', &all_patterns);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  740:    const auto exact_match_patterns_begin = std::partition(
        3:  741:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        3:  741-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  742:
        6:  743:    glob_patterns_.reserve(static_cast<size_t>(
        3:  744:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        3:  744-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  744-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        -:  745:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        3:  746:              std::inserter(glob_patterns_, glob_patterns_.begin()));
        3:  746-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  746-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        -:  747:    std::move(
        -:  748:        exact_match_patterns_begin, all_patterns.end(),
        3:  749:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
        3:  749-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  749-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:  750:  }
        -:  751:
        -:  752:  // Returns true if and only if name matches at least one of the patterns in
        -:  753:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13 returned 100% blocks executed 100%
       13:  754:  bool MatchesName(const std::string& name) const {
       26:  755:    return exact_match_patterns_.count(name) > 0 ||
       13:  755-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0
        3:  755-block  1
       10:  755-block  2
       13:  756:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
       13:  756-block  0
call    0 returned 13
call    1 returned 13
call    2 returned 13
branch  3 taken 3 (fallthrough)
branch  4 taken 10
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 17 returned 100% blocks executed 100%
       34:  757:                       [&name](const std::string& pattern) {
       17:  758:                         return PatternMatchesString(
call    0 returned 17
call    1 returned 17
        -:  759:                             name, pattern.c_str(),
       34:  760:                             pattern.c_str() + pattern.size());
       17:  760-block  0
call    0 returned 17
call    1 returned 17
       13:  761:                       });
       13:  761-block  0
        -:  762:  }
        -:  763:
        -:  764: private:
        -:  765:  std::vector<std::string> glob_patterns_;
        -:  766:  std::unordered_set<std::string> exact_match_patterns_;
        -:  767:};
        -:  768:
        -:  769:class PositiveAndNegativeUnitTestFilter {
        -:  770: public:
        -:  771:  // Constructs a positive and a negative filter from a string. The string
        -:  772:  // contains a positive filter optionally followed by a '-' character and a
        -:  773:  // negative filter. In case only a negative filter is provided the positive
        -:  774:  // filter will be assumed "*".
        -:  775:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 23%
        1:  776:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  776-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  776-block  1
call    2 never executed
    $$$$$:  776-block  2
call    3 never executed
        2:  777:    std::vector<std::string> positive_and_negative_filters;
call    0 returned 1
        1:  777-block  0
call    1 returned 1
    $$$$$:  777-block  1
call    2 never executed
        -:  778:
        -:  779:    // NOTE: `SplitString` always returns a non-empty container.
        1:  780:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  781:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  781-block  0
call    0 returned 1
        -:  782:
        1:  783:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  784:      positive_filter_ = UnitTestFilter(
    %%%%%:  784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  785:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  785-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  785-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  785-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  785-block  4
call   14 never executed
    $$$$$:  785-block  5
call   15 never executed
    $$$$$:  785-block  6
    $$$$$:  785-block  7
branch 16 never executed
branch 17 never executed
    $$$$$:  785-block  8
call   18 never executed
    $$$$$:  785-block  9
        -:  786:
        -:  787:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  788:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  789:      // string parts with `-` as separator to generate the negative filter.
    #####:  790:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  790-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  790-block  1
call    4 never executed
    #####:  791:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  791-block  0
    %%%%%:  791-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  792:        negative_filter_string =
    #####:  793:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  793-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  793-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  793-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  793-block  3
call   10 never executed
    $$$$$:  793-block  4
    #####:  794:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  794-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  794-block  1
call    3 never executed
call    4 never executed
call    5 never executed
        -:  795:    } else {
        -:  796:      // In case we don't have a negative filter and positive filter is ""
        -:  797:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  798:      // negative filter.
        1:  799:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  799-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  799-block  1
call    3 returned 1
call    4 returned 1
        -:  800:    }
        1:  801:  }
        -:  802:
        -:  803:  // Returns true if and only if test name (this is generated by appending test
        -:  804:  // suit name and test name via a '.' character) matches the positive filter
        -:  805:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 3 returned 100% blocks executed 64%
        3:  806:  bool MatchesTest(const std::string& test_suite_name,
        -:  807:                   const std::string& test_name) const {
        3:  808:    return MatchesName(test_suite_name + "." + test_name);
        3:  808-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  808-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  808-block  2
        3:  808-block  3
call    7 returned 3
call    8 returned 3
        3:  808-block  4
    $$$$$:  808-block  5
call    9 never executed
    $$$$$:  808-block  6
    $$$$$:  808-block  7
call   10 never executed
        -:  809:  }
        -:  810:
        -:  811:  // Returns true if and only if name matches the positive filter and does not
        -:  812:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 88%
        3:  813:  bool MatchesName(const std::string& name) const {
       6*:  814:    return positive_filter_.MatchesName(name) &&
        3:  814-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  814-block  1
    %%%%%:  814-block  2
        6:  815:           !negative_filter_.MatchesName(name);
        3:  815-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:  815-block  1
        -:  816:  }
        -:  817:
        -:  818: private:
        -:  819:  UnitTestFilter positive_filter_;
        -:  820:  UnitTestFilter negative_filter_;
        -:  821:};
        -:  822:}  // namespace
        -:  823:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  824:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  825:                                    const char* filter) {
    #####:  826:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  826-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  826-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  826-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  826-block  3
    %%%%%:  826-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  826-block  5
    $$$$$:  826-block  6
call   13 never executed
    $$$$$:  826-block  7
    $$$$$:  826-block  8
call   14 never executed
    $$$$$:  826-block  9
    $$$$$:  826-block 10
call   15 never executed
        -:  827:}
        -:  828:
        -:  829:// Returns true if and only if the user-specified filter matches the test
        -:  830:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  831:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  832:                                        const std::string& test_name) {
        -:  833:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  834:  // positive filter and negative filter portions
    #####:  835:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  835-block  0
call    0 never executed
    %%%%%:  835-block  1
call    1 never executed
    $$$$$:  835-block  2
call    2 never executed
    #####:  836:      .MatchesTest(test_suite_name, test_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  836-block  0
    %%%%%:  836-block  1
        -:  837:}
        -:  838:
        -:  839:#if GTEST_HAS_SEH
        -:  840:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  841:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  842:// This function is useful as an __except condition.
        -:  843:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  844:  // Google Test should handle a SEH exception if:
        -:  845:  //   1. the user wants it to, AND
        -:  846:  //   2. this is not a breakpoint exception, AND
        -:  847:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  848:  //      apparently).
        -:  849:  //
        -:  850:  // SEH exception code for C++ exceptions.
        -:  851:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  852:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  853:
        -:  854:  bool should_handle = true;
        -:  855:
        -:  856:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  857:    should_handle = false;
        -:  858:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  859:    should_handle = false;
        -:  860:  else if (exception_code == kCxxExceptionCode)
        -:  861:    should_handle = false;
        -:  862:
        -:  863:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  864:}
        -:  865:#endif  // GTEST_HAS_SEH
        -:  866:
        -:  867:}  // namespace internal
        -:  868:
        -:  869:// The c'tor sets this object as the test part result reporter used by
        -:  870:// Google Test.  The 'result' parameter specifies where to report the
        -:  871:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  872:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  873:    TestPartResultArray* result)
    #####:  874:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  874-block  0
call    0 never executed
    $$$$$:  874-block  1
call    1 never executed
    #####:  875:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:}
    %%%%%:  876-block  0
        -:  877:
        -:  878:// The c'tor sets this object as the test part result reporter used by
        -:  879:// Google Test.  The 'result' parameter specifies where to report the
        -:  880:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  881:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  882:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  883:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  883-block  0
call    0 never executed
    $$$$$:  883-block  1
call    1 never executed
    #####:  884:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  885:}
    %%%%%:  885-block  0
        -:  886:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  887:void ScopedFakeTestPartResultReporter::Init() {
    #####:  888:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  888-block  0
call    0 never executed
    #####:  889:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  890:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  890-block  0
call    0 never executed
    #####:  891:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  892:  } else {
    #####:  893:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  893-block  0
call    0 never executed
    #####:  894:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  895:  }
    #####:  896:}
        -:  897:
        -:  898:// The d'tor restores the test part result reporter used by Google Test
        -:  899:// before.
    #####:  900:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  901:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  902:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  903:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  904:  } else {
    #####:  905:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  906:  }
    #####:  907:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  900:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  901:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  902:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  903:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  904:  } else {
        -:  905:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  906:  }
    #####:  907:}
    %%%%%:  907-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  900:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  900-block  0
call    0 never executed
    #####:  901:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  901-block  0
call    0 never executed
    #####:  902:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  903:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  903-block  0
call    0 never executed
        -:  904:  } else {
    #####:  905:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  905-block  0
call    0 never executed
        -:  906:  }
    #####:  907:}
------------------
        -:  908:
        -:  909:// Increments the test part result count and remembers the result.
        -:  910:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  911:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  912:    const TestPartResult& result) {
    #####:  913:  result_->Append(result);
    %%%%%:  913-block  0
call    0 never executed
    #####:  914:}
        -:  915:
        -:  916:namespace internal {
        -:  917:
        -:  918:// Returns the type ID of ::testing::Test.  We should always call this
        -:  919:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  920:// testing::Test.  This is to work around a suspected linker bug when
        -:  921:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  922:// GetTypeId< ::testing::Test>() to return different values depending
        -:  923:// on whether the call is from the Google Test framework itself or
        -:  924:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  925:// return the same value, as it always calls GetTypeId<>() from the
        -:  926:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 4 returned 100% blocks executed 100%
        4:  927:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        4:  927-block  0
call    0 returned 4
        -:  928:
        -:  929:// The value of GetTestTypeId() as seen from within the Google Test
        -:  930:// library.  This is solely for testing GetTestTypeId().
        -:  931:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  932:
        -:  933:// This predicate-formatter checks that 'results' contains a test part
        -:  934:// failure of the given type and that the failure message contains the
        -:  935:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  936:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  937:                                     const char* /* type_expr */,
        -:  938:                                     const char* /* substr_expr */,
        -:  939:                                     const TestPartResultArray& results,
        -:  940:                                     TestPartResult::Type type,
        -:  941:                                     const std::string& substr) {
        -:  942:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  943:                                 ? "1 fatal failure"
    #####:  944:                                 : "1 non-fatal failure");
    %%%%%:  944-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  944-block  1
    %%%%%:  944-block  2
    %%%%%:  944-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  944-block  4
    $$$$$:  944-block  5
call    7 never executed
    #####:  945:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  945-block  0
call    3 never executed
    $$$$$:  945-block  1
call    4 never executed
    #####:  946:  if (results.size() != 1) {
    %%%%%:  946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:    msg << "Expected: " << expected << "\n"
    %%%%%:  947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  947-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  947-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  948:        << "  Actual: " << results.size() << " failures";
    %%%%%:  948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  948-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  948-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  948-block  3
    #####:  949:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  949-block  0
    %%%%%:  949-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  949-block  2
    #####:  950:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  950-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  950-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  950-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  951:    }
    #####:  952:    return AssertionFailure() << msg;
    %%%%%:  952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  952-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  952-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  952-block  3
call    9 never executed
    $$$$$:  952-block  4
call   10 never executed
    $$$$$:  952-block  5
        -:  953:  }
        -:  954:
    #####:  955:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:  if (r.type() != type) {
    %%%%%:  956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  957-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  957-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  957-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  957-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  957-block  4
call   12 never executed
    $$$$$:  957-block  5
call   13 never executed
    $$$$$:  957-block  6
    #####:  958:                              << "  Actual:\n"
    %%%%%:  958-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:                              << r;
    %%%%%:  959-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  959-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  960:  }
        -:  961:
    #####:  962:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  962-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  963:    return AssertionFailure()
    %%%%%:  963-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  963-block  1
call    3 never executed
    $$$$$:  963-block  2
call    4 never executed
    $$$$$:  963-block  3
    #####:  964:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  964-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  964-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  964-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  964-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  965:           << "  Actual:\n"
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:           << r;
    %%%%%:  966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  966-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  967:  }
        -:  968:
    #####:  969:  return AssertionSuccess();
    %%%%%:  969-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  970:}
        -:  971:
        -:  972:// The constructor of SingleFailureChecker remembers where to look up
        -:  973:// test part results, what type of failure we expect, and what
        -:  974:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  975:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  976:                                           TestPartResult::Type type,
    #####:  977:                                           const std::string& substr)
    #####:  978:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  978-block  0
call    0 never executed
        -:  979:
        -:  980:// The destructor of SingleFailureChecker verifies that the given
        -:  981:// TestPartResultArray contains exactly one failure that has the given
        -:  982:// type and contains the given substring.  If that's not the case, a
        -:  983:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  984:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
    #####:  985:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  985-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  985-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  985-block  2
call   10 never executed
    #####:  986:}
        -:  987:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  988:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  989:    UnitTestImpl* unit_test)
        1:  990:    : unit_test_(unit_test) {}
        1:  990-block  0
call    0 returned 1
        -:  991:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  992:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  993:    const TestPartResult& result) {
    #####:  994:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  994-block  0
call    0 never executed
call    1 never executed
    #####:  995:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  996:}
        -:  997:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  998:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  999:    UnitTestImpl* unit_test)
        1: 1000:    : unit_test_(unit_test) {}
        1: 1000-block  0
call    0 returned 1
        -: 1001:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1002:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1003:    const TestPartResult& result) {
    #####: 1004:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1004-block  0
call    0 never executed
call    1 never executed
    #####: 1005:}
        -: 1006:
        -: 1007:// Returns the global test part result reporter.
        -: 1008:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1009:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1010:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1011:  return global_test_part_result_repoter_;
    %%%%%: 1011-block  0
call    0 never executed
    %%%%%: 1011-block  1
        -: 1012:}
        -: 1013:
        -: 1014:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1015:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1016:    TestPartResultReporterInterface* reporter) {
    #####: 1017:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:  global_test_part_result_repoter_ = reporter;
    %%%%%: 1018-block  0
call    0 never executed
    #####: 1019:}
        -: 1020:
        -: 1021:// Returns the test part result reporter for the current thread.
        -: 1022:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1023:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1024:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1024-block  0
call    0 never executed
        -: 1025:}
        -: 1026:
        -: 1027:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1028:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1029:    TestPartResultReporterInterface* reporter) {
    #####: 1030:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1030-block  0
call    0 never executed
    #####: 1031:}
        -: 1032:
        -: 1033:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1034:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1035:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1035-block  0
call    0 never executed
        -: 1036:}
        -: 1037:
        -: 1038:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1039:int UnitTestImpl::failed_test_suite_count() const {
        2: 1040:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1040-block  0
call    0 returned 2
        -: 1041:}
        -: 1042:
        -: 1043:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1044:int UnitTestImpl::total_test_suite_count() const {
        2: 1045:  return static_cast<int>(test_suites_.size());
        2: 1045-block  0
call    0 returned 2
        -: 1046:}
        -: 1047:
        -: 1048:// Gets the number of all test suites that contain at least one test
        -: 1049:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1050:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1051:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1051-block  0
call    0 returned 2
        -: 1052:}
        -: 1053:
        -: 1054:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1055:int UnitTestImpl::successful_test_count() const {
        1: 1056:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1056-block  0
call    0 returned 1
        -: 1057:}
        -: 1058:
        -: 1059:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1060:int UnitTestImpl::skipped_test_count() const {
        1: 1061:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1061-block  0
call    0 returned 1
        -: 1062:}
        -: 1063:
        -: 1064:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1065:int UnitTestImpl::failed_test_count() const {
    #####: 1066:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1066-block  0
call    0 never executed
        -: 1067:}
        -: 1068:
        -: 1069:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1070:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1071:  return SumOverTestSuiteList(test_suites_,
        1: 1071-block  0
call    0 returned 1
        1: 1072:                              &TestSuite::reportable_disabled_test_count);
        -: 1073:}
        -: 1074:
        -: 1075:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1076:int UnitTestImpl::disabled_test_count() const {
    #####: 1077:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1077-block  0
call    0 never executed
        -: 1078:}
        -: 1079:
        -: 1080:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1081:int UnitTestImpl::reportable_test_count() const {
    #####: 1082:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1082-block  0
call    0 never executed
        -: 1083:}
        -: 1084:
        -: 1085:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1086:int UnitTestImpl::total_test_count() const {
    #####: 1087:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1087-block  0
call    0 never executed
        -: 1088:}
        -: 1089:
        -: 1090:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1091:int UnitTestImpl::test_to_run_count() const {
        2: 1092:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1092-block  0
call    0 returned 2
        -: 1093:}
        -: 1094:
        -: 1095:// Returns the current OS stack trace as an std::string.
        -: 1096://
        -: 1097:// The maximum number of stack frames to be included is specified by
        -: 1098:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1099:// specifies the number of top frames to be skipped, which doesn't
        -: 1100:// count against the number of frames to be included.
        -: 1101://
        -: 1102:// For example, if Foo() calls Bar(), which in turn calls
        -: 1103:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1104:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1105:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1106:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1106-block  0
call    0 never executed
        -: 1107:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1108:      // Skips the user-specified number of frames plus this function
        -: 1109:      // itself.
    #####: 1110:  );  // NOLINT
call    0 never executed
        -: 1111:}
        -: 1112:
        -: 1113:// A helper class for measuring elapsed times.
        -: 1114:class Timer {
        -: 1115: public:
function _ZN7testing8internal5TimerC2Ev called 5 returned 100% blocks executed 100%
        5: 1116:  Timer() : start_(std::chrono::steady_clock::now()) {}
        5: 1116-block  0
call    0 returned 5
        -: 1117:
        -: 1118:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 5 returned 100% blocks executed 88%
        5: 1119:  TimeInMillis Elapsed() {
        5: 1120:    return std::chrono::duration_cast<std::chrono::milliseconds>(
       10: 1121:               std::chrono::steady_clock::now() - start_)
        5: 1121-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 1121-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$: 1121-block  2
       10: 1122:        .count();
        5: 1122-block  0
call    0 returned 5
        5: 1122-block  1
        -: 1123:  }
        -: 1124:
        -: 1125: private:
        -: 1126:  std::chrono::steady_clock::time_point start_;
        -: 1127:};
        -: 1128:
        -: 1129:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1130:// around subject to adjustments by the system, to measure elapsed time use
        -: 1131:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 6 returned 100% blocks executed 80%
        6: 1132:TimeInMillis GetTimeInMillis() {
        6: 1133:  return std::chrono::duration_cast<std::chrono::milliseconds>(
        6: 1134:             std::chrono::system_clock::now() -
call    0 returned 6
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
       18: 1135:             std::chrono::system_clock::from_time_t(0))
        6: 1135-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6: 1135-block  1
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0 (throw)
       12: 1136:      .count();
        6: 1136-block  0
call    0 returned 6
        6: 1136-block  1
        -: 1137:}
        -: 1138:
        -: 1139:// Utilities
        -: 1140:
        -: 1141:// class String.
        -: 1142:
        -: 1143:#if GTEST_OS_WINDOWS_MOBILE
        -: 1144:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1145:// memory using new. The caller is responsible for deleting the return
        -: 1146:// value using delete[]. Returns the wide string, or NULL if the
        -: 1147:// input is NULL.
        -: 1148:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1149:  if (!ansi) return nullptr;
        -: 1150:  const int length = strlen(ansi);
        -: 1151:  const int unicode_length =
        -: 1152:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1153:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1154:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1155:  unicode[unicode_length] = 0;
        -: 1156:  return unicode;
        -: 1157:}
        -: 1158:
        -: 1159:// Creates an ANSI string from the given wide string, allocating
        -: 1160:// memory using new. The caller is responsible for deleting the return
        -: 1161:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1162:// input is NULL.
        -: 1163:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1164:  if (!utf16_str) return nullptr;
        -: 1165:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1166:                                              0, nullptr, nullptr);
        -: 1167:  char* ansi = new char[ansi_length + 1];
        -: 1168:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1169:                      nullptr);
        -: 1170:  ansi[ansi_length] = 0;
        -: 1171:  return ansi;
        -: 1172:}
        -: 1173:
        -: 1174:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1175:
        -: 1176:// Compares two C strings.  Returns true if and only if they have the same
        -: 1177:// content.
        -: 1178://
        -: 1179:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1180:// C string is considered different to any non-NULL C string,
        -: 1181:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 2 returned 100% blocks executed 67%
        2: 1182:bool String::CStringEquals(const char* lhs, const char* rhs) {
       2*: 1183:  if (lhs == nullptr) return rhs == nullptr;
        2: 1183-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1183-block  1
        -: 1184:
       2*: 1185:  if (rhs == nullptr) return false;
        2: 1185-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 1185-block  1
        -: 1186:
        2: 1187:  return strcmp(lhs, rhs) == 0;
        2: 1187-block  0
        -: 1188:}
        -: 1189:
        -: 1190:#if GTEST_HAS_STD_WSTRING
        -: 1191:
        -: 1192:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1193:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1194:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1195:                                     Message* msg) {
    #####: 1196:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1196-block  0
    %%%%%: 1196-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1196-block  2
    #####: 1197:    if (wstr[i] != L'\0') {
    %%%%%: 1197-block  0
branch  0 never executed
branch  1 never executed
    #####: 1198:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1198-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1198-block  1
call    4 never executed
    $$$$$: 1198-block  2
call    5 never executed
    $$$$$: 1198-block  3
call    6 never executed
    #####: 1199:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1199-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1199-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1199-block  2
        -: 1200:    } else {
    #####: 1201:      *msg << '\0';
    %%%%%: 1201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1202:      i++;
    %%%%%: 1202-block  0
        -: 1203:    }
        -: 1204:  }
    #####: 1205:}
    %%%%%: 1205-block  0
        -: 1206:
        -: 1207:#endif  // GTEST_HAS_STD_WSTRING
        -: 1208:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 69%
        4: 1209:void SplitString(const ::std::string& str, char delimiter,
        -: 1210:                 ::std::vector< ::std::string>* dest) {
        8: 1211:  ::std::vector< ::std::string> parsed;
        4: 1211-block  0
call    0 returned 4
call    1 returned 4
    $$$$$: 1211-block  1
call    2 never executed
        4: 1212:  ::std::string::size_type pos = 0;
        6: 1213:  while (::testing::internal::AlwaysTrue()) {
        6: 1213-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1213-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 0
        6: 1214:    const ::std::string::size_type colon = str.find(delimiter, pos);
        6: 1214-block  0
call    0 returned 6
        6: 1215:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1216:      parsed.push_back(str.substr(pos));
        4: 1216-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1216-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1216-block  2
call    6 returned 4
    $$$$$: 1216-block  3
call    7 never executed
    $$$$$: 1216-block  4
        4: 1217:      break;
        -: 1218:    } else {
        2: 1219:      parsed.push_back(str.substr(pos, colon - pos));
        2: 1219-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 1219-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 1219-block  2
call    6 returned 2
    $$$$$: 1219-block  3
call    7 never executed
    $$$$$: 1219-block  4
        2: 1220:      pos = colon + 1;
        -: 1221:    }
        -: 1222:  }
        4: 1223:  dest->swap(parsed);
        4: 1223-block  0
call    0 returned 4
        4: 1224:}
        -: 1225:
        -: 1226:}  // namespace internal
        -: 1227:
        -: 1228:// Constructs an empty Message.
        -: 1229:// We allocate the stringstream separately because otherwise each use of
        -: 1230:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1231:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1232:// the stack space.
function _ZN7testing7MessageC2Ev called 57 returned 100% blocks executed 73%
       57: 1233:Message::Message() : ss_(new ::std::stringstream) {
       57: 1233-block  0
call    0 returned 57
call    1 returned 57
branch  2 taken 57 (fallthrough)
branch  3 taken 0 (throw)
       57: 1233-block  1
call    4 returned 57
    $$$$$: 1233-block  2
call    5 never executed
    $$$$$: 1233-block  3
call    6 never executed
        -: 1234:  // By default, we want there to be enough precision when printing
        -: 1235:  // a double to a Message.
       57: 1236:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 57
call    1 returned 57
call    2 returned 57
branch  3 taken 57 (fallthrough)
branch  4 taken 0 (throw)
       57: 1237:}
       57: 1237-block  0
        -: 1238:
        -: 1239:// These two overloads allow streaming a wide C string to a Message
        -: 1240:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1241:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1242:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1242-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1242-block  1
call    4 never executed
    %%%%%: 1242-block  2
    $$$$$: 1242-block  3
call    5 never executed
        -: 1243:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1244:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1245:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1245-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1245-block  1
call    4 never executed
    %%%%%: 1245-block  2
    $$$$$: 1245-block  3
call    5 never executed
        -: 1246:}
        -: 1247:
        -: 1248:#if GTEST_HAS_STD_WSTRING
        -: 1249:// Converts the given wide string to a narrow string using the UTF-8
        -: 1250:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1251:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1252:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1252-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1253:  return *this;
        -: 1254:}
        -: 1255:#endif  // GTEST_HAS_STD_WSTRING
        -: 1256:
        -: 1257:// Gets the text streamed to this object so far as an std::string.
        -: 1258:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 57 returned 100% blocks executed 100%
       57: 1259:std::string Message::GetString() const {
       57: 1260:  return internal::StringStreamToString(ss_.get());
       57: 1260-block  0
call    0 returned 57
call    1 returned 57
        -: 1261:}
        -: 1262:
        -: 1263:namespace internal {
        -: 1264:
        -: 1265:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1266:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1267:                                            const std::vector<size_t>& right) {
        -: 1268:  std::vector<std::vector<double> > costs(
    #####: 1269:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1269-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1269-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1269-block  2
    $$$$$: 1269-block  3
    $$$$$: 1269-block  4
    $$$$$: 1269-block  5
call   13 never executed
        -: 1270:  std::vector<std::vector<EditType> > best_move(
    #####: 1271:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1271-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 1271-block  1
call   12 never executed
    $$$$$: 1271-block  2
    $$$$$: 1271-block  3
    $$$$$: 1271-block  4
    $$$$$: 1271-block  5
call   13 never executed
        -: 1272:
        -: 1273:  // Populate for empty right.
    #####: 1274:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1275:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1275-block  0
call    0 never executed
call    1 never executed
    #####: 1276:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1277:  }
        -: 1278:  // Populate for empty left.
    #####: 1279:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1279-block  0
    %%%%%: 1279-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1280:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1280-block  0
call    0 never executed
call    1 never executed
    #####: 1281:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1282:  }
        -: 1283:
    #####: 1284:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1284-block  0
    %%%%%: 1284-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1284-block  2
    #####: 1285:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1285-block  0
    %%%%%: 1285-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1285-block  2
    #####: 1286:      if (left[l_i] == right[r_i]) {
    %%%%%: 1286-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1287:        // Found a match. Consume it.
    #####: 1288:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1288-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1289:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1290:        continue;
        -: 1291:      }
        -: 1292:
    #####: 1293:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1293-block  0
call    0 never executed
call    1 never executed
    #####: 1294:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1295:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1296:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1296-block  0
branch  2 never executed
branch  3 never executed
    #####: 1297:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1297-block  0
call    0 never executed
call    1 never executed
    #####: 1298:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1299:      } else if (remove < add && remove < replace) {
    %%%%%: 1299-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1299-block  1
branch  2 never executed
branch  3 never executed
    #####: 1300:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1300-block  0
call    0 never executed
call    1 never executed
    #####: 1301:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1302:      } else {
        -: 1303:        // We make replace a little more expensive than add/remove to lower
        -: 1304:        // their priority.
    #####: 1305:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1305-block  0
call    0 never executed
call    1 never executed
    #####: 1306:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1307:      }
        -: 1308:    }
        -: 1309:  }
        -: 1310:
        -: 1311:  // Reconstruct the best path. We do it in reverse order.
    #####: 1312:  std::vector<EditType> best_path;
    %%%%%: 1312-block  0
call    0 never executed
    #####: 1313:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1313-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1313-block  1
branch  4 never executed
branch  5 never executed
    #####: 1314:    EditType move = best_move[l_i][r_i];
    %%%%%: 1314-block  0
call    0 never executed
call    1 never executed
    #####: 1315:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:    l_i -= move != kAdd;
    #####: 1317:    r_i -= move != kRemove;
    %%%%%: 1317-block  0
        -: 1318:  }
    #####: 1319:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1319-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1320:  return best_path;
    %%%%%: 1320-block  0
    %%%%%: 1320-block  1
        -: 1321:}
        -: 1322:
        -: 1323:namespace {
        -: 1324:
        -: 1325:// Helper class to convert string into ids with deduplication.
        -: 1326:class InternalStrings {
        -: 1327: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1328:  size_t GetId(const std::string& str) {
    #####: 1329:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1330:    if (it != ids_.end()) return it->second;
    %%%%%: 1330-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1330-block  1
call    4 never executed
    #####: 1331:    size_t id = ids_.size();
    %%%%%: 1331-block  0
call    0 never executed
    #####: 1332:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1332-block  0
        -: 1333:  }
        -: 1334:
        -: 1335: private:
        -: 1336:  typedef std::map<std::string, size_t> IdMap;
        -: 1337:  IdMap ids_;
        -: 1338:};
        -: 1339:
        -: 1340:}  // namespace
        -: 1341:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1342:std::vector<EditType> CalculateOptimalEdits(
        -: 1343:    const std::vector<std::string>& left,
        -: 1344:    const std::vector<std::string>& right) {
    #####: 1345:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1345-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1345-block  1
call    2 never executed
call    3 never executed
    $$$$$: 1345-block  2
call    4 never executed
    $$$$$: 1345-block  3
call    5 never executed
        -: 1346:  {
    #####: 1347:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 1347-block  0
call    1 never executed
    $$$$$: 1347-block  1
call    2 never executed
    #####: 1348:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1348-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1349:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1349-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1349-block  2
    $$$$$: 1349-block  3
        -: 1350:    }
    #####: 1351:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1351-block  0
    %%%%%: 1351-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1352:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1352-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1352-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1352-block  2
    $$$$$: 1352-block  3
        -: 1353:    }
        -: 1354:  }
    #####: 1355:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1355-block  0
        -: 1356:}
        -: 1357:
        -: 1358:namespace {
        -: 1359:
        -: 1360:// Helper class that holds the state for one hunk and prints it out to the
        -: 1361:// stream.
        -: 1362:// It reorders adds/removes when possible to group all removes before all
        -: 1363:// adds. It also adds the hunk header before printint into the stream.
        -: 1364:class Hunk {
        -: 1365: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1366:  Hunk(size_t left_start, size_t right_start)
    #####: 1367:      : left_start_(left_start),
        -: 1368:        right_start_(right_start),
        -: 1369:        adds_(),
        -: 1370:        removes_(),
    #####: 1371:        common_() {}
    %%%%%: 1371-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1372:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1373:  void PushLine(char edit, const char* line) {
    #####: 1374:    switch (edit) {
    %%%%%: 1374-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1375:      case ' ':
    #####: 1376:        ++common_;
    #####: 1377:        FlushEdits();
    %%%%%: 1377-block  0
call    0 never executed
    #####: 1378:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1378-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1378-block  1
    $$$$$: 1378-block  2
call    6 never executed
    #####: 1379:        break;
    %%%%%: 1379-block  0
    #####: 1380:      case '-':
    #####: 1381:        ++removes_;
    #####: 1382:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1382-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1382-block  2
    $$$$$: 1382-block  3
call    6 never executed
    #####: 1383:        break;
    %%%%%: 1383-block  0
    #####: 1384:      case '+':
    #####: 1385:        ++adds_;
    #####: 1386:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1386-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1386-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1386-block  2
    #####: 1387:        break;
    %%%%%: 1387-block  0
        -: 1388:    }
    #####: 1389:  }
    %%%%%: 1389-block  0
        -: 1390:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1391:  void PrintTo(std::ostream* os) {
    #####: 1392:    PrintHeader(os);
    %%%%%: 1392-block  0
call    0 never executed
    #####: 1393:    FlushEdits();
call    0 never executed
    #####: 1394:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1395:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1396:         it != hunk_.end(); ++it) {
    %%%%%: 1396-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1396-block  1
call    5 never executed
    #####: 1397:      *os << it->first << it->second << "\n";
    %%%%%: 1397-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1397-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1397-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1398:    }
    #####: 1399:  }
    %%%%%: 1399-block  0
        -: 1400:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1401:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1401-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1401-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1401-block  2
    %%%%%: 1401-block  3
    %%%%%: 1401-block  4
        -: 1402:
        -: 1403: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1404:  void FlushEdits() {
    #####: 1405:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1405-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1406:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1407:  }
        -: 1408:
        -: 1409:  // Print a unified diff header for one hunk.
        -: 1410:  // The format is
        -: 1411:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1412:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1413:  void PrintHeader(std::ostream* ss) const {
    #####: 1414:    *ss << "@@ ";
    %%%%%: 1414-block  0
call    0 never executed
    #####: 1415:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1416:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1416-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1417:    }
    #####: 1418:    if (removes_ && adds_) {
    %%%%%: 1418-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1418-block  1
branch  2 never executed
branch  3 never executed
    #####: 1419:      *ss << " ";
    %%%%%: 1419-block  0
call    0 never executed
        -: 1420:    }
    #####: 1421:    if (adds_) {
    %%%%%: 1421-block  0
branch  0 never executed
branch  1 never executed
    #####: 1422:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1422-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1423:    }
    #####: 1424:    *ss << " @@\n";
    %%%%%: 1424-block  0
call    0 never executed
    #####: 1425:  }
        -: 1426:
        -: 1427:  size_t left_start_, right_start_;
        -: 1428:  size_t adds_, removes_, common_;
        -: 1429:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1430:};
        -: 1431:
        -: 1432:}  // namespace
        -: 1433:
        -: 1434:// Create a list of diff hunks in Unified diff format.
        -: 1435:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1436:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1437:// addition.
        -: 1438:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1439:// If two hunks are close enough that their contexts overlap, then they are
        -: 1440:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1441:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1442:                              const std::vector<std::string>& right,
        -: 1443:                              size_t context) {
    #####: 1444:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1444-block  1
call    4 never executed
        -: 1445:
    #####: 1446:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1447:  std::stringstream ss;
    %%%%%: 1447-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1447-block  1
call    3 never executed
    $$$$$: 1447-block  2
call    4 never executed
    #####: 1448:  while (edit_i < edits.size()) {
    %%%%%: 1448-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1448-block  1
        -: 1449:    // Find first edit.
    #####: 1450:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1450-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1450-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1450-block  2
    %%%%%: 1450-block  3
    %%%%%: 1450-block  4
branch  6 never executed
branch  7 never executed
    #####: 1451:      ++l_i;
    #####: 1452:      ++r_i;
    #####: 1453:      ++edit_i;
    %%%%%: 1453-block  0
        -: 1454:    }
        -: 1455:
        -: 1456:    // Find the first line to include in the hunk.
    #####: 1457:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1457-block  0
call    0 never executed
    #####: 1458:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1458-block  0
call    1 never executed
    #####: 1459:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1459-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1459-block  1
    #####: 1460:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1460-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1461:    }
        -: 1462:
        -: 1463:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1464:    // is over.
    #####: 1465:    size_t n_suffix = 0;
    %%%%%: 1465-block  0
    #####: 1466:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1466-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1467:      if (n_suffix >= context) {
    %%%%%: 1467-block  0
branch  0 never executed
branch  1 never executed
        -: 1468:        // Continue only if the next hunk is very close.
    #####: 1469:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1469-block  0
call    0 never executed
call    1 never executed
    #####: 1470:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1470-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1470-block  2
    %%%%%: 1470-block  3
    %%%%%: 1470-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 1470-block  5
call    9 never executed
    #####: 1471:        if (it == edits.end() ||
    %%%%%: 1471-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1471-block  1
    %%%%%: 1471-block  2
    #####: 1472:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1472-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1472-block  1
branch  4 never executed
branch  5 never executed
        -: 1473:          // There is no next edit or it is too far away.
    #####: 1474:          break;
    %%%%%: 1474-block  0
        -: 1475:        }
        -: 1476:      }
        -: 1477:
    #####: 1478:      EditType edit = edits[edit_i];
    %%%%%: 1478-block  0
call    0 never executed
        -: 1479:      // Reset count when a non match is found.
    #####: 1480:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1480-block  0
    %%%%%: 1480-block  1
        -: 1481:
    #####: 1482:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1482-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1482-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1482-block  2
branch  4 never executed
branch  5 never executed
    #####: 1483:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1483-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1483-block  1
    %%%%%: 1483-block  2
    %%%%%: 1483-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1484:      }
    #####: 1485:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1485-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1485-block  1
branch  2 never executed
branch  3 never executed
    #####: 1486:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1486-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1487:      }
        -: 1488:
        -: 1489:      // Advance indices, depending on edit type.
    #####: 1490:      l_i += edit != kAdd;
    #####: 1491:      r_i += edit != kRemove;
    %%%%%: 1491-block  0
        -: 1492:    }
        -: 1493:
    #####: 1494:    if (!hunk.has_edits()) {
    %%%%%: 1494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1495:      // We are done. We don't want this hunk.
    #####: 1496:      break;
    %%%%%: 1496-block  0
        -: 1497:    }
        -: 1498:
    #####: 1499:    hunk.PrintTo(&ss);
    %%%%%: 1499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1500:  }
    #####: 1501:  return ss.str();
    %%%%%: 1501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1501-block  1
        -: 1502:}
        -: 1503:
        -: 1504:}  // namespace edit_distance
        -: 1505:
        -: 1506:namespace {
        -: 1507:
        -: 1508:// The string representation of the values received in EqFailure() are already
        -: 1509:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1510:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1511:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1512:  std::vector<std::string> lines;
    %%%%%: 1512-block  0
call    0 never executed
    #####: 1513:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1514:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1514-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1514-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1514-block  2
    %%%%%: 1514-block  3
    %%%%%: 1514-block  4
branch  8 never executed
branch  9 never executed
    #####: 1515:    ++start;
    #####: 1516:    --end;
    %%%%%: 1516-block  0
        -: 1517:  }
    #####: 1518:  bool escaped = false;
    #####: 1519:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1519-block  0
    %%%%%: 1519-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1519-block  2
    #####: 1520:    if (escaped) {
    %%%%%: 1520-block  0
branch  0 never executed
branch  1 never executed
    #####: 1521:      escaped = false;
    #####: 1522:      if (str[i] == 'n') {
    %%%%%: 1522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1523:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1523-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1523-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1523-block  2
call    6 never executed
    $$$$$: 1523-block  3
call    7 never executed
    $$$$$: 1523-block  4
    #####: 1524:        start = i + 1;
        -: 1525:      }
        -: 1526:    } else {
    #####: 1527:      escaped = str[i] == '\\';
    %%%%%: 1527-block  0
call    0 never executed
        -: 1528:    }
        -: 1529:  }
    #####: 1530:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1530-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1530-block  2
call    6 never executed
    $$$$$: 1530-block  3
call    7 never executed
    $$$$$: 1530-block  4
    #####: 1531:  return lines;
    %%%%%: 1531-block  0
        -: 1532:}
        -: 1533:
        -: 1534:}  // namespace
        -: 1535:
        -: 1536:// Constructs and returns the message for an equality assertion
        -: 1537:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1538://
        -: 1539:// The first four parameters are the expressions used in the assertion
        -: 1540:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1541:// where foo is 5 and bar is 6, we have:
        -: 1542://
        -: 1543://   lhs_expression: "foo"
        -: 1544://   rhs_expression: "bar"
        -: 1545://   lhs_value:      "5"
        -: 1546://   rhs_value:      "6"
        -: 1547://
        -: 1548:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1549:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1550:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1551:AssertionResult EqFailure(const char* lhs_expression,
        -: 1552:                          const char* rhs_expression,
        -: 1553:                          const std::string& lhs_value,
        -: 1554:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1555:  Message msg;
    %%%%%: 1555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1555-block  1
call    3 never executed
    #####: 1556:  msg << "Expected equality of these values:";
    %%%%%: 1556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1557:  msg << "\n  " << lhs_expression;
    %%%%%: 1557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1558:  if (lhs_value != lhs_expression) {
    %%%%%: 1558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1559:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1559-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1560:  }
    #####: 1561:  msg << "\n  " << rhs_expression;
    %%%%%: 1561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1562:  if (rhs_value != rhs_expression) {
    %%%%%: 1562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1563:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1563-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1564:  }
        -: 1565:
    #####: 1566:  if (ignoring_case) {
    %%%%%: 1566-block  0
branch  0 never executed
branch  1 never executed
    #####: 1567:    msg << "\nIgnoring case";
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1568:  }
        -: 1569:
    #####: 1570:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1570-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1570-block  2
    %%%%%: 1570-block  3
    %%%%%: 1570-block  4
branch  6 never executed
branch  7 never executed
    #####: 1571:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1571-block  1
call    4 never executed
    #####: 1572:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1572-block  1
call    3 never executed
    $$$$$: 1572-block  2
call    4 never executed
    #####: 1573:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1573-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1573-block  2
    %%%%%: 1573-block  3
    %%%%%: 1573-block  4
branch  6 never executed
branch  7 never executed
    #####: 1574:      msg << "\nWith diff:\n"
    %%%%%: 1574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1575:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1575-block  2
call    6 never executed
    $$$$$: 1575-block  3
call    7 never executed
    $$$$$: 1575-block  4
        -: 1576:    }
        -: 1577:  }
        -: 1578:
    #####: 1579:  return AssertionFailure() << msg;
    %%%%%: 1579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1579-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1579-block  3
call    9 never executed
call   10 never executed
    %%%%%: 1579-block  4
    $$$$$: 1579-block  5
call   11 never executed
    $$$$$: 1579-block  6
        -: 1580:}
        -: 1581:
        -: 1582:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1583:std::string GetBoolAssertionFailureMessage(
        -: 1584:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1585:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1586:  const char* actual_message = assertion_result.message();
    %%%%%: 1586-block  0
call    0 never executed
    #####: 1587:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1587-block  0
call    3 never executed
    $$$$$: 1587-block  1
call    4 never executed
    #####: 1588:  msg << "Value of: " << expression_text
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1589:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1589-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1589-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1590:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1590-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1590-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1590-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1590-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1591:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1591-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1592:  return msg.GetString();
    %%%%%: 1592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1592-block  1
        -: 1593:}
        -: 1594:
        -: 1595:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1596:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1597:                                     const char* abs_error_expr, double val1,
        -: 1598:                                     double val2, double abs_error) {
    #####: 1599:  const double diff = fabs(val1 - val2);
    #####: 1600:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1600-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1600-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1601:
        -: 1602:  // Find the value which is closest to zero.
    #####: 1603:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1603-block  0
call    0 never executed
        -: 1604:  // Find the distance to the next double from that value.
        -: 1605:  const double epsilon =
    #####: 1606:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1607:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1608:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1609:  // message so that the situation can be more easily understood without
        -: 1610:  // requiring exotic floating-point knowledge.
        -: 1611:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1612:  // that an equality check was actually intended.
    #####: 1613:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1613-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1613-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1613-block  2
    %%%%%: 1613-block  3
    %%%%%: 1613-block  4
branch  8 never executed
branch  9 never executed
    #####: 1614:      abs_error < epsilon) {
    %%%%%: 1614-block  0
branch  0 never executed
branch  1 never executed
    #####: 1615:    return AssertionFailure()
    %%%%%: 1615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1615-block  1
call    3 never executed
    $$$$$: 1615-block  2
call    4 never executed
    $$$$$: 1615-block  3
    #####: 1616:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1616-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1616-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1616-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1617:           << diff << ", where\n"
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1617-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1618:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1618-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1619:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1619-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1619-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1620:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1620-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1620-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1621:           << " which is smaller than the minimum distance between doubles for "
    #####: 1622:              "numbers of this magnitude which is "
    %%%%%: 1622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1623:           << epsilon
    %%%%%: 1623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1624:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1625:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1625-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1626:  }
    #####: 1627:  return AssertionFailure()
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1627-block  1
call    3 never executed
    $$$$$: 1627-block  2
call    4 never executed
    $$$$$: 1627-block  3
    #####: 1628:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1628-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1628-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1628-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1628-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1629:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1629-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1629-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1629-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1630:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1630-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1630-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1630-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1631:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1631-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1631-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1631-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1632:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1632-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1632-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1632-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1632-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1632-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1633:}
        -: 1634:
        -: 1635:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1636:template <typename RawType>
    #####: 1637:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1638:                                RawType val1, RawType val2) {
        -: 1639:  // Returns success if val1 is less than val2,
    #####: 1640:  if (val1 < val2) {
    #####: 1641:    return AssertionSuccess();
        -: 1642:  }
        -: 1643:
        -: 1644:  // or if val1 is almost equal to val2.
    #####: 1645:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1646:  if (lhs.AlmostEquals(rhs)) {
    #####: 1647:    return AssertionSuccess();
        -: 1648:  }
        -: 1649:
        -: 1650:  // Note that the above two checks will both fail if either val1 or
        -: 1651:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1652:  // any predicate involving a NaN must return false.
        -: 1653:
    #####: 1654:  ::std::stringstream val1_ss;
    #####: 1655:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1656:          << val1;
        -: 1657:
    #####: 1658:  ::std::stringstream val2_ss;
    #####: 1659:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1660:          << val2;
        -: 1661:
        -: 1662:  return AssertionFailure()
    #####: 1663:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1664:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1665:         << StringStreamToString(&val2_ss);
        -: 1666:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1637:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1638:                                RawType val1, RawType val2) {
        -: 1639:  // Returns success if val1 is less than val2,
    #####: 1640:  if (val1 < val2) {
    %%%%%: 1640-block  0
branch  0 never executed
branch  1 never executed
    #####: 1641:    return AssertionSuccess();
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1642:  }
        -: 1643:
        -: 1644:  // or if val1 is almost equal to val2.
    #####: 1645:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1645-block  0
call    0 never executed
call    1 never executed
    #####: 1646:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1646-block  0
branch  3 never executed
branch  4 never executed
    #####: 1647:    return AssertionSuccess();
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1648:  }
        -: 1649:
        -: 1650:  // Note that the above two checks will both fail if either val1 or
        -: 1651:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1652:  // any predicate involving a NaN must return false.
        -: 1653:
    #####: 1654:  ::std::stringstream val1_ss;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1654-block  1
call    4 never executed
    #####: 1655:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1656:          << val1;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1657:
    #####: 1658:  ::std::stringstream val2_ss;
    %%%%%: 1658-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1658-block  1
call    3 never executed
    #####: 1659:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1660:          << val2;
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1661:
        -: 1662:  return AssertionFailure()
    #####: 1663:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1663-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1663-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1663-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1663-block  6
call   19 never executed
    $$$$$: 1663-block  7
    #####: 1664:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1664-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1664-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1664-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1664-block  4
call   13 never executed
    $$$$$: 1664-block  5
    #####: 1665:         << StringStreamToString(&val2_ss);
    %%%%%: 1665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1665-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1665-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1665-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1665-block  4
call   11 never executed
    $$$$$: 1665-block  5
        -: 1666:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1637:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1638:                                RawType val1, RawType val2) {
        -: 1639:  // Returns success if val1 is less than val2,
    #####: 1640:  if (val1 < val2) {
    %%%%%: 1640-block  0
branch  0 never executed
branch  1 never executed
    #####: 1641:    return AssertionSuccess();
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1642:  }
        -: 1643:
        -: 1644:  // or if val1 is almost equal to val2.
    #####: 1645:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1645-block  0
call    0 never executed
call    1 never executed
    #####: 1646:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1646-block  0
branch  3 never executed
branch  4 never executed
    #####: 1647:    return AssertionSuccess();
    %%%%%: 1647-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1648:  }
        -: 1649:
        -: 1650:  // Note that the above two checks will both fail if either val1 or
        -: 1651:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1652:  // any predicate involving a NaN must return false.
        -: 1653:
    #####: 1654:  ::std::stringstream val1_ss;
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1654-block  1
call    4 never executed
    #####: 1655:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1656:          << val1;
    %%%%%: 1656-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1657:
    #####: 1658:  ::std::stringstream val2_ss;
    %%%%%: 1658-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1658-block  1
call    3 never executed
    #####: 1659:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1660:          << val2;
    %%%%%: 1660-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1661:
        -: 1662:  return AssertionFailure()
    #####: 1663:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1663-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1663-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1663-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1663-block  6
call   19 never executed
    $$$$$: 1663-block  7
    #####: 1664:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1664-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1664-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1664-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1664-block  4
call   13 never executed
    $$$$$: 1664-block  5
    #####: 1665:         << StringStreamToString(&val2_ss);
    %%%%%: 1665-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1665-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1665-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1665-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1665-block  4
call   11 never executed
    $$$$$: 1665-block  5
        -: 1666:}
------------------
        -: 1667:
        -: 1668:}  // namespace internal
        -: 1669:
        -: 1670:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1671:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1672:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1673:                        float val2) {
    #####: 1674:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1674-block  0
call    0 never executed
        -: 1675:}
        -: 1676:
        -: 1677:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1678:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1679:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1680:                         double val2) {
    #####: 1681:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1681-block  0
call    0 never executed
        -: 1682:}
        -: 1683:
        -: 1684:namespace internal {
        -: 1685:
        -: 1686:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1687:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1688:                               const char* rhs_expression, const char* lhs,
        -: 1689:                               const char* rhs) {
    #####: 1690:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1690-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1691:    return AssertionSuccess();
    %%%%%: 1691-block  0
call    0 never executed
        -: 1692:  }
        -: 1693:
    #####: 1694:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1694-block  0
call    3 never executed
    $$$$$: 1694-block  1
call    4 never executed
    $$$$$: 1694-block  2
    #####: 1695:                   PrintToString(rhs), false);
    %%%%%: 1695-block  0
call    0 never executed
    %%%%%: 1695-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1695-block  2
call    5 never executed
        -: 1696:}
        -: 1697:
        -: 1698:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1699:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1700:                                   const char* rhs_expression, const char* lhs,
        -: 1701:                                   const char* rhs) {
    #####: 1702:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1703:    return AssertionSuccess();
    %%%%%: 1703-block  0
call    0 never executed
        -: 1704:  }
        -: 1705:
    #####: 1706:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1706-block  0
call    3 never executed
    $$$$$: 1706-block  1
call    4 never executed
    $$$$$: 1706-block  2
    #####: 1707:                   PrintToString(rhs), true);
    %%%%%: 1707-block  0
call    0 never executed
    %%%%%: 1707-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1707-block  2
call    5 never executed
        -: 1708:}
        -: 1709:
        -: 1710:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1711:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1712:                               const char* s2_expression, const char* s1,
        -: 1713:                               const char* s2) {
    #####: 1714:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1715:    return AssertionSuccess();
    %%%%%: 1715-block  0
call    0 never executed
        -: 1716:  } else {
    #####: 1717:    return AssertionFailure()
    %%%%%: 1717-block  0
call    0 never executed
    %%%%%: 1717-block  1
call    1 never executed
    $$$$$: 1717-block  2
call    2 never executed
    #####: 1718:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1718-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1718-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1718-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1719:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1719-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1719-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1719-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1719-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1719-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1719-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1720:  }
        -: 1721:}
        -: 1722:
        -: 1723:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1724:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1725:                                   const char* s2_expression, const char* s1,
        -: 1726:                                   const char* s2) {
    #####: 1727:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1727-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1728:    return AssertionSuccess();
    %%%%%: 1728-block  0
call    0 never executed
        -: 1729:  } else {
    #####: 1730:    return AssertionFailure()
    %%%%%: 1730-block  0
call    0 never executed
    %%%%%: 1730-block  1
call    1 never executed
    $$$$$: 1730-block  2
call    2 never executed
    #####: 1731:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1731-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1731-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1731-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1732:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1732-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1732-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1732-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1732-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1732-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1733:  }
        -: 1734:}
        -: 1735:
        -: 1736:}  // namespace internal
        -: 1737:
        -: 1738:namespace {
        -: 1739:
        -: 1740:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1741:
        -: 1742:// This group of overloaded functions return true if and only if needle
        -: 1743:// is a substring of haystack.  NULL is considered a substring of
        -: 1744:// itself only.
        -: 1745:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1746:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1747:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1747-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1747-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1747-block  2
        -: 1748:
    #####: 1749:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1749-block  0
        -: 1750:}
        -: 1751:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1752:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1753:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1753-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1753-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1753-block  2
        -: 1754:
    #####: 1755:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1755-block  0
        -: 1756:}
        -: 1757:
        -: 1758:// StringType here can be either ::std::string or ::std::wstring.
        -: 1759:template <typename StringType>
    #####: 1760:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1761:  return haystack.find(needle) != StringType::npos;
        -: 1762:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1760:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1761:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1761-block  0
call    0 never executed
        -: 1762:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1760:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1761:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1761-block  0
call    0 never executed
        -: 1762:}
------------------
        -: 1763:
        -: 1764:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1765:// depending on the value of the expected_to_be_substring parameter.
        -: 1766:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1767:// or ::std::wstring.
        -: 1768:template <typename StringType>
    #####: 1769:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1770:                                const char* needle_expr,
        -: 1771:                                const char* haystack_expr,
        -: 1772:                                const StringType& needle,
        -: 1773:                                const StringType& haystack) {
    #####: 1774:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1775:    return AssertionSuccess();
        -: 1776:
    #####: 1777:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1778:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1779:  return AssertionFailure()
    #####: 1780:         << "Value of: " << needle_expr << "\n"
    #####: 1781:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1782:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1783:         << "a substring of " << haystack_expr << "\n"
    #####: 1784:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1785:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1769:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1770:                                const char* needle_expr,
        -: 1771:                                const char* haystack_expr,
        -: 1772:                                const StringType& needle,
        -: 1773:                                const StringType& haystack) {
    #####: 1774:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1775:    return AssertionSuccess();
    %%%%%: 1775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1776:
    #####: 1777:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1778:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1779:  return AssertionFailure()
    #####: 1780:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1780-block  4
call   12 never executed
    $$$$$: 1780-block  5
    #####: 1781:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1781-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1782:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1782-block  2
    %%%%%: 1782-block  3
    %%%%%: 1782-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1782-block  5
call    8 never executed
    $$$$$: 1782-block  6
    #####: 1783:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1784:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1785:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1769:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1770:                                const char* needle_expr,
        -: 1771:                                const char* haystack_expr,
        -: 1772:                                const StringType& needle,
        -: 1773:                                const StringType& haystack) {
    #####: 1774:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1775:    return AssertionSuccess();
    %%%%%: 1775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1776:
    #####: 1777:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1778:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1779:  return AssertionFailure()
    #####: 1780:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1780-block  4
call   12 never executed
    $$$$$: 1780-block  5
    #####: 1781:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1781-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1782:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1782-block  2
    %%%%%: 1782-block  3
    %%%%%: 1782-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1782-block  5
call    8 never executed
    $$$$$: 1782-block  6
    #####: 1783:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1784:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1785:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1769:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1770:                                const char* needle_expr,
        -: 1771:                                const char* haystack_expr,
        -: 1772:                                const StringType& needle,
        -: 1773:                                const StringType& haystack) {
    #####: 1774:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1775:    return AssertionSuccess();
    %%%%%: 1775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1776:
    #####: 1777:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1778:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1779:  return AssertionFailure()
    #####: 1780:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1780-block  4
call   12 never executed
    $$$$$: 1780-block  5
    #####: 1781:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1781-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1782:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1782-block  2
    %%%%%: 1782-block  3
    %%%%%: 1782-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1782-block  5
call    8 never executed
    $$$$$: 1782-block  6
    #####: 1783:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1784:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1785:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1769:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1770:                                const char* needle_expr,
        -: 1771:                                const char* haystack_expr,
        -: 1772:                                const StringType& needle,
        -: 1773:                                const StringType& haystack) {
    #####: 1774:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1775:    return AssertionSuccess();
    %%%%%: 1775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1776:
    #####: 1777:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1778:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1779:  return AssertionFailure()
    #####: 1780:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1780-block  4
call   12 never executed
    $$$$$: 1780-block  5
    #####: 1781:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1781-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1781-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1782:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1782-block  2
    %%%%%: 1782-block  3
    %%%%%: 1782-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1782-block  5
call    8 never executed
    $$$$$: 1782-block  6
    #####: 1783:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1784:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1784-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1784-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1784-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1784-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1785:}
------------------
        -: 1786:
        -: 1787:}  // namespace
        -: 1788:
        -: 1789:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1790:// substring of haystack (NULL is considered a substring of itself
        -: 1791:// only), and return an appropriate error message when they fail.
        -: 1792:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1793:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1794:                            const char* needle, const char* haystack) {
    #####: 1795:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1795-block  0
call    0 never executed
        -: 1796:}
        -: 1797:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1798:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1799:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1800:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1800-block  0
call    0 never executed
        -: 1801:}
        -: 1802:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1803:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1804:                               const char* haystack_expr, const char* needle,
        -: 1805:                               const char* haystack) {
    #####: 1806:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1806-block  0
call    0 never executed
        -: 1807:}
        -: 1808:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1809:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1810:                               const char* haystack_expr, const wchar_t* needle,
        -: 1811:                               const wchar_t* haystack) {
    #####: 1812:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1812-block  0
call    0 never executed
        -: 1813:}
        -: 1814:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1815:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1816:                            const ::std::string& needle,
        -: 1817:                            const ::std::string& haystack) {
    #####: 1818:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1818-block  0
call    0 never executed
        -: 1819:}
        -: 1820:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1821:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1822:                               const char* haystack_expr,
        -: 1823:                               const ::std::string& needle,
        -: 1824:                               const ::std::string& haystack) {
    #####: 1825:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1825-block  0
call    0 never executed
        -: 1826:}
        -: 1827:
        -: 1828:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1829:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1830:                            const ::std::wstring& needle,
        -: 1831:                            const ::std::wstring& haystack) {
    #####: 1832:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1832-block  0
call    0 never executed
        -: 1833:}
        -: 1834:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1835:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1836:                               const char* haystack_expr,
        -: 1837:                               const ::std::wstring& needle,
        -: 1838:                               const ::std::wstring& haystack) {
    #####: 1839:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1839-block  0
call    0 never executed
        -: 1840:}
        -: 1841:#endif  // GTEST_HAS_STD_WSTRING
        -: 1842:
        -: 1843:namespace internal {
        -: 1844:
        -: 1845:#if GTEST_OS_WINDOWS
        -: 1846:
        -: 1847:namespace {
        -: 1848:
        -: 1849:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1850:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1851:                                     long hr) {  // NOLINT
        -: 1852:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1853:
        -: 1854:  // Windows CE doesn't support FormatMessage.
        -: 1855:  const char error_text[] = "";
        -: 1856:
        -: 1857:#else
        -: 1858:
        -: 1859:  // Looks up the human-readable system message for the HRESULT code
        -: 1860:  // and since we're not passing any params to FormatMessage, we don't
        -: 1861:  // want inserts expanded.
        -: 1862:  const DWORD kFlags =
        -: 1863:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1864:  const DWORD kBufSize = 4096;
        -: 1865:  // Gets the system's human readable message string for this HRESULT.
        -: 1866:  char error_text[kBufSize] = {'\0'};
        -: 1867:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1868:                                          0,  // no source, we're asking system
        -: 1869:                                          static_cast<DWORD>(hr),  // the error
        -: 1870:                                          0,  // no line width restrictions
        -: 1871:                                          error_text,  // output buffer
        -: 1872:                                          kBufSize,    // buf size
        -: 1873:                                          nullptr);  // no arguments for inserts
        -: 1874:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1875:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1876:       --message_length) {
        -: 1877:    error_text[message_length - 1] = '\0';
        -: 1878:  }
        -: 1879:
        -: 1880:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1881:
        -: 1882:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1883:  return ::testing::AssertionFailure()
        -: 1884:         << "Expected: " << expr << " " << expected << ".\n"
        -: 1885:         << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1886:}
        -: 1887:
        -: 1888:}  // namespace
        -: 1889:
        -: 1890:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1891:  if (SUCCEEDED(hr)) {
        -: 1892:    return AssertionSuccess();
        -: 1893:  }
        -: 1894:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1895:}
        -: 1896:
        -: 1897:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1898:  if (FAILED(hr)) {
        -: 1899:    return AssertionSuccess();
        -: 1900:  }
        -: 1901:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1902:}
        -: 1903:
        -: 1904:#endif  // GTEST_OS_WINDOWS
        -: 1905:
        -: 1906:// Utility functions for encoding Unicode text (wide strings) in
        -: 1907:// UTF-8.
        -: 1908:
        -: 1909:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1910:// like this:
        -: 1911://
        -: 1912:// Code-point length   Encoding
        -: 1913://   0 -  7 bits       0xxxxxxx
        -: 1914://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1915://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1916://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1917:
        -: 1918:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1919:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1920:
        -: 1921:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1922:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1923:
        -: 1924:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1925:constexpr uint32_t kMaxCodePoint3 =
        -: 1926:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1927:
        -: 1928:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1929:constexpr uint32_t kMaxCodePoint4 =
        -: 1930:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1931:
        -: 1932:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1933:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1934:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1935:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1936:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1937:  *bits >>= n;
    #####: 1938:  return low_bits;
    %%%%%: 1938-block  0
        -: 1939:}
        -: 1940:
        -: 1941:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1942:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1943:// wide enough to contain a code point.
        -: 1944:// If the code_point is not a valid Unicode code point
        -: 1945:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1946:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1947:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1948:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1948-block  0
branch  0 never executed
branch  1 never executed
    #####: 1949:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1949-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1949-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1949-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1949-block  4
call   11 never executed
    $$$$$: 1949-block  5
    $$$$$: 1949-block  6
call   12 never executed
    $$$$$: 1949-block  7
        -: 1950:  }
        -: 1951:
        -: 1952:  char str[5];  // Big enough for the largest valid code point.
    #####: 1953:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1953-block  0
branch  0 never executed
branch  1 never executed
    #####: 1954:    str[1] = '\0';
    #####: 1955:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1955-block  0
    #####: 1956:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1956-block  0
branch  0 never executed
branch  1 never executed
    #####: 1957:    str[2] = '\0';
    #####: 1958:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1958-block  0
call    0 never executed
    #####: 1959:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1960:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1960-block  0
branch  0 never executed
branch  1 never executed
    #####: 1961:    str[3] = '\0';
    #####: 1962:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1962-block  0
call    0 never executed
    #####: 1963:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1964:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1965:  } else {  // code_point <= kMaxCodePoint4
    #####: 1966:    str[4] = '\0';
    #####: 1967:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1967-block  0
call    0 never executed
    #####: 1968:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1969:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1970:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1971:  }
    #####: 1972:  return str;
    %%%%%: 1972-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1972-block  1
call    4 never executed
    $$$$$: 1972-block  2
call    5 never executed
    $$$$$: 1972-block  3
        -: 1973:}
        -: 1974:
        -: 1975:// The following two functions only make sense if the system
        -: 1976:// uses UTF-16 for wide string encoding. All supported systems
        -: 1977:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1978:
        -: 1979:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1980:// and thus should be combined into a single Unicode code point
        -: 1981:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1982:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1983:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    #####: 1984:         (second & 0xFC00) == 0xDC00;
    %%%%%: 1984-block  0
        -: 1985:}
        -: 1986:
        -: 1987:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1988:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1989:                                                      wchar_t second) {
    #####: 1990:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1991:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1992:  const uint32_t mask = (1 << 10) - 1;
        -: 1993:  return (sizeof(wchar_t) == 2)
        -: 1994:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 1995:             :
        -: 1996:             // This function should not be called when the condition is
        -: 1997:             // false, but we provide a sensible default in case it is.
    #####: 1998:             first_u;
    %%%%%: 1998-block  0
        -: 1999:}
        -: 2000:
        -: 2001:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2002:// The wide string is assumed to have the following encoding:
        -: 2003://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2004://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2005:// Parameter str points to a null-terminated wide string.
        -: 2006:// Parameter num_chars may additionally limit the number
        -: 2007:// of wchar_t characters processed. -1 is used when the entire string
        -: 2008:// should be processed.
        -: 2009:// If the string contains code points that are not valid Unicode code points
        -: 2010:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2011:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2012:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2013:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2014:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2015:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2015-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2015-block  1
        -: 2016:
    #####: 2017:  ::std::stringstream stream;
    %%%%%: 2017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2017-block  1
call    3 never executed
    $$$$$: 2017-block  2
call    4 never executed
    #####: 2018:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2018-block  0
    %%%%%: 2018-block  1
branch  0 never executed
branch  1 never executed
        -: 2019:    uint32_t unicode_code_point;
        -: 2020:
    #####: 2021:    if (str[i] == L'\0') {
    %%%%%: 2021-block  0
branch  0 never executed
branch  1 never executed
    #####: 2022:      break;
    %%%%%: 2022-block  0
    #####: 2023:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2023-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2023-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2023-block  2
    %%%%%: 2023-block  3
    %%%%%: 2023-block  4
branch  5 never executed
branch  6 never executed
        -: 2024:      unicode_code_point =
    #####: 2025:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2025-block  0
call    0 never executed
    #####: 2026:      i++;
        -: 2027:    } else {
    #####: 2028:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2028-block  0
        -: 2029:    }
        -: 2030:
    #####: 2031:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2031-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2031-block  2
call    6 never executed
    $$$$$: 2031-block  3
call    7 never executed
    $$$$$: 2031-block  4
        -: 2032:  }
    #####: 2033:  return StringStreamToString(&stream);
    %%%%%: 2033-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2033-block  1
        -: 2034:}
        -: 2035:
        -: 2036:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2037:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2038:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2039:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2039-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2039-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2039-block  2
call    6 never executed
    $$$$$: 2039-block  3
call    7 never executed
        -: 2040:
    #####: 2041:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2041-block  0
call    0 never executed
        -: 2042:}
        -: 2043:
        -: 2044:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2045:// same content.
        -: 2046://
        -: 2047:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2048:// C string is considered different to any non-NULL C string,
        -: 2049:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2050:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2051:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2051-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2051-block  1
        -: 2052:
    #####: 2053:  if (rhs == nullptr) return false;
    %%%%%: 2053-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2053-block  1
        -: 2054:
    #####: 2055:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2055-block  0
        -: 2056:}
        -: 2057:
        -: 2058:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2059:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2060:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2061:                               const wchar_t* rhs) {
    #####: 2062:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2062-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2063:    return AssertionSuccess();
    %%%%%: 2063-block  0
call    0 never executed
        -: 2064:  }
        -: 2065:
    #####: 2066:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2066-block  0
call    3 never executed
    $$$$$: 2066-block  1
call    4 never executed
    $$$$$: 2066-block  2
    #####: 2067:                   PrintToString(rhs), false);
    %%%%%: 2067-block  0
call    0 never executed
    %%%%%: 2067-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2067-block  2
call    5 never executed
        -: 2068:}
        -: 2069:
        -: 2070:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2071:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2072:                               const char* s2_expression, const wchar_t* s1,
        -: 2073:                               const wchar_t* s2) {
    #####: 2074:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2074-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2075:    return AssertionSuccess();
    %%%%%: 2075-block  0
call    0 never executed
        -: 2076:  }
        -: 2077:
    #####: 2078:  return AssertionFailure()
    %%%%%: 2078-block  0
call    0 never executed
    $$$$$: 2078-block  1
call    1 never executed
    #####: 2079:         << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2079-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2079-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2079-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2080:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2080-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2080-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2080-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2080-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2080-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2080-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2080-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2080-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2080-block  8
call   24 never executed
    $$$$$: 2080-block  9
    $$$$$: 2080-block 10
call   25 never executed
    $$$$$: 2080-block 11
        -: 2081:}
        -: 2082:
        -: 2083:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2084:// the same content.
        -: 2085://
        -: 2086:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2087:// NULL C string is considered different to any non-NULL C string,
        -: 2088:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2089:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       4*: 2090:  if (lhs == nullptr) return rhs == nullptr;
        4: 2090-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2090-block  1
       4*: 2091:  if (rhs == nullptr) return false;
        4: 2091-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2091-block  1
        4: 2092:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2092-block  0
call    0 returned 4
        -: 2093:}
        -: 2094:
        -: 2095:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2096:// have the same content.
        -: 2097://
        -: 2098:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2099:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2100:// including the empty string.
        -: 2101:// NB: The implementations on different platforms slightly differ.
        -: 2102:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2103:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2104:// which compares according to LC_CTYPE category of the current locale.
        -: 2105:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2106:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2107:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2108:                                              const wchar_t* rhs) {
    #####: 2109:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2109-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2109-block  1
        -: 2110:
    #####: 2111:  if (rhs == nullptr) return false;
    %%%%%: 2111-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2111-block  1
        -: 2112:
        -: 2113:#if GTEST_OS_WINDOWS
        -: 2114:  return _wcsicmp(lhs, rhs) == 0;
        -: 2115:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2116:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2116-block  0
call    0 never executed
        -: 2117:#else
        -: 2118:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2119:  // Other unknown OSes may not define it either.
        -: 2120:  wint_t left, right;
        -: 2121:  do {
        -: 2122:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2123:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2124:  } while (left && left == right);
        -: 2125:  return left == right;
        -: 2126:#endif  // OS selector
        -: 2127:}
        -: 2128:
        -: 2129:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2130:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2131:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2132:                                     const std::string& suffix) {
    #####: 2133:  const size_t str_len = str.length();
    %%%%%: 2133-block  0
call    0 never executed
    #####: 2134:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2135:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2135-block  0
    %%%%%: 2135-block  1
    #####: 2136:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2136-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2137:                                      suffix.c_str());
    %%%%%: 2137-block  0
        -: 2138:}
        -: 2139:
        -: 2140:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2141:std::string String::FormatIntWidth2(int value) {
    #####: 2142:  return FormatIntWidthN(value, 2);
    %%%%%: 2142-block  0
call    0 never executed
        -: 2143:}
        -: 2144:
        -: 2145:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2146:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2147:  std::stringstream ss;
    %%%%%: 2147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2147-block  1
call    3 never executed
    $$$$$: 2147-block  2
call    4 never executed
    #####: 2148:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2148-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2148-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2148-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2149:  return ss.str();
    %%%%%: 2149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2149-block  1
        -: 2150:}
        -: 2151:
        -: 2152:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2153:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2154:  std::stringstream ss;
    %%%%%: 2154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2154-block  1
call    3 never executed
    $$$$$: 2154-block  2
call    4 never executed
    #####: 2155:  ss << std::hex << std::uppercase << value;
    %%%%%: 2155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2155-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2156:  return ss.str();
    %%%%%: 2156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2156-block  1
        -: 2157:}
        -: 2158:
        -: 2159:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2160:std::string String::FormatHexInt(int value) {
    #####: 2161:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2161-block  0
call    0 never executed
        -: 2162:}
        -: 2163:
        -: 2164:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2165:std::string String::FormatByte(unsigned char value) {
    #####: 2166:  std::stringstream ss;
    %%%%%: 2166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2166-block  1
call    3 never executed
    $$$$$: 2166-block  2
call    4 never executed
    #####: 2167:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2167-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2167-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2167-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2167-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2168:     << static_cast<unsigned int>(value);
    %%%%%: 2168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2169:  return ss.str();
    %%%%%: 2169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2169-block  1
        -: 2170:}
        -: 2171:
        -: 2172:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2173:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 57 returned 100% blocks executed 75%
       57: 2174:std::string StringStreamToString(::std::stringstream* ss) {
      114: 2175:  const ::std::string& str = ss->str();
       57: 2175-block  0
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
       57: 2175-block  1
call    3 returned 57
    $$$$$: 2175-block  2
call    4 never executed
       57: 2176:  const char* const start = str.c_str();
       57: 2176-block  0
call    0 returned 57
       57: 2177:  const char* const end = start + str.length();
call    0 returned 57
        -: 2178:
       57: 2179:  std::string result;
call    0 returned 57
       57: 2180:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
     1023: 2181:  for (const char* ch = start; ch != end; ++ch) {
       57: 2181-block  0
     1023: 2181-block  1
branch  0 taken 966 (fallthrough)
branch  1 taken 57
      966: 2181-block  2
      966: 2182:    if (*ch == '\0') {
      966: 2182-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 966
    #####: 2183:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2184:    } else {
      966: 2185:      result += *ch;
      966: 2185-block  0
call    0 returned 966
branch  1 taken 966 (fallthrough)
branch  2 taken 0 (throw)
        -: 2186:    }
        -: 2187:  }
        -: 2188:
      114: 2189:  return result;
       57: 2189-block  0
       57: 2189-block  1
        -: 2190:}
        -: 2191:
        -: 2192:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2193:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2194:                              const Message& user_msg) {
        -: 2195:  // Appends the user message if it's non-empty.
    #####: 2196:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2196-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2196-block  1
call    3 never executed
    $$$$$: 2196-block  2
call    4 never executed
    #####: 2197:  if (user_msg_string.empty()) {
    %%%%%: 2197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2198:    return gtest_msg;
    %%%%%: 2198-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2199:  }
    #####: 2200:  if (gtest_msg.empty()) {
    %%%%%: 2200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2201:    return user_msg_string;
    %%%%%: 2201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2202:  }
    #####: 2203:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2203-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2203-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2203-block  2
call    6 never executed
    $$$$$: 2203-block  3
call    7 never executed
    $$$$$: 2203-block  4
        -: 2204:}
        -: 2205:
        -: 2206:}  // namespace internal
        -: 2207:
        -: 2208:// class TestResult
        -: 2209:
        -: 2210:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 5 returned 100% blocks executed 100%
        5: 2211:TestResult::TestResult()
        5: 2212:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
        5: 2212-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
        -: 2213:
        -: 2214:// D'tor.
function _ZN7testing10TestResultD2Ev called 5 returned 100% blocks executed 100%
        5: 2215:TestResult::~TestResult() {}
        5: 2215-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
        -: 2216:
        -: 2217:// Returns the i-th test part result among all the results. i can
        -: 2218:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2219:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2220:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2221:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2221-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2221-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2221-block  2
    %%%%%: 2221-block  3
    %%%%%: 2221-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2221-block  5
call    7 never executed
    #####: 2222:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2222-block  0
call    0 never executed
        -: 2223:}
        -: 2224:
        -: 2225:// Returns the i-th test property. i can range from 0 to
        -: 2226:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2227:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2228:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2229:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2229-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2229-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2229-block  2
    %%%%%: 2229-block  3
    %%%%%: 2229-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2229-block  5
call    7 never executed
    #####: 2230:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2230-block  0
call    0 never executed
        -: 2231:}
        -: 2232:
        -: 2233:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2234:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2234-block  0
call    0 never executed
        -: 2235:
        -: 2236:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2237:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2238:  test_part_results_.push_back(test_part_result);
    %%%%%: 2238-block  0
call    0 never executed
    #####: 2239:}
        -: 2240:
        -: 2241:// Adds a test property to the list. If a property with the same key as the
        -: 2242:// supplied property is already represented, the value of this test_property
        -: 2243:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2244:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2245:                                const TestProperty& test_property) {
    #####: 2246:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2246-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2246-block  1
branch  3 never executed
branch  4 never executed
    #####: 2247:    return;
    %%%%%: 2247-block  0
    %%%%%: 2247-block  1
        -: 2248:  }
    #####: 2249:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2249-block  1
call    3 never executed
        -: 2250:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2251:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2252:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2252-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2252-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2252-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2252-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2252-block  4
call   16 never executed
    $$$$$: 2252-block  5
    $$$$$: 2252-block  6
call   17 never executed
    $$$$$: 2252-block  7
    $$$$$: 2252-block  8
call   18 never executed
    $$$$$: 2252-block  9
    #####: 2253:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2254:    test_properties_.push_back(test_property);
    %%%%%: 2254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2255:    return;
    %%%%%: 2255-block  0
        -: 2256:  }
    #####: 2257:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2257-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2257-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2257-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2257-block  3
call   11 never executed
    $$$$$: 2257-block  4
    $$$$$: 2257-block  5
call   12 never executed
    $$$$$: 2257-block  6
        -: 2258:}
        -: 2259:
        -: 2260:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2261:// output.
        -: 2262:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2263:    "disabled",    "errors", "failures", "name",
        -: 2264:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2265:
        -: 2266:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2267:// output.
        -: 2268:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2269:    "disabled", "errors", "failures",  "name",
        -: 2270:    "tests",    "time",   "timestamp", "skipped"};
        -: 2271:
        -: 2272:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2273:static const char* const kReservedTestCaseAttributes[] = {
        -: 2274:    "classname",  "name",        "status", "time",
        -: 2275:    "type_param", "value_param", "file",   "line"};
        -: 2276:
        -: 2277:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2278:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2279:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2280:    "classname",   "name", "status", "time",   "type_param",
        -: 2281:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2282:
        -: 2283:template <size_t kSize>
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
        -: 2286:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2285-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2285-block  1
call    4 never executed
    %%%%%: 2285-block  2
    $$$$$: 2285-block  3
call    5 never executed
        -: 2286:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2285-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2285-block  1
call    4 never executed
    %%%%%: 2285-block  2
    $$$$$: 2285-block  3
call    5 never executed
        -: 2286:}
------------------
        -: 2287:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2288:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2289:    const std::string& xml_element) {
    #####: 2290:  if (xml_element == "testsuites") {
    %%%%%: 2290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2291:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2291-block  0
call    0 never executed
    #####: 2292:  } else if (xml_element == "testsuite") {
    %%%%%: 2292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2293:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2293-block  0
call    0 never executed
    #####: 2294:  } else if (xml_element == "testcase") {
    %%%%%: 2294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2295:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2295-block  0
call    0 never executed
        -: 2296:  } else {
    #####: 2297:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2297-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2297-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2297-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2297-block  4
call   14 never executed
    $$$$$: 2297-block  5
call   15 never executed
        -: 2298:  }
        -: 2299:  // This code is unreachable but some compilers may not realizes that.
    #####: 2300:  return std::vector<std::string>();
    %%%%%: 2300-block  0
call    0 never executed
        -: 2301:}
        -: 2302:
        -: 2303:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2304:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2305:    const std::string& xml_element) {
    #####: 2306:  if (xml_element == "testsuites") {
    %%%%%: 2306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2307:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2307-block  0
call    0 never executed
    #####: 2308:  } else if (xml_element == "testsuite") {
    %%%%%: 2308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2309:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2309-block  0
call    0 never executed
    #####: 2310:  } else if (xml_element == "testcase") {
    %%%%%: 2310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2311:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2311-block  0
call    0 never executed
        -: 2312:  } else {
    #####: 2313:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2313-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2313-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2313-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2313-block  4
call   14 never executed
    $$$$$: 2313-block  5
call   15 never executed
        -: 2314:  }
        -: 2315:  // This code is unreachable but some compilers may not realizes that.
    #####: 2316:  return std::vector<std::string>();
    %%%%%: 2316-block  0
call    0 never executed
        -: 2317:}
        -: 2318:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2319:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2320:  Message word_list;
    %%%%%: 2320-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2320-block  1
call    3 never executed
    $$$$$: 2320-block  2
call    4 never executed
    #####: 2321:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2321-block  0
    %%%%%: 2321-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2321-block  2
    #####: 2322:    if (i > 0 && words.size() > 2) {
    %%%%%: 2322-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2322-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2322-block  2
    %%%%%: 2322-block  3
    %%%%%: 2322-block  4
branch  5 never executed
branch  6 never executed
    #####: 2323:      word_list << ", ";
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2324:    }
    #####: 2325:    if (i == words.size() - 1) {
    %%%%%: 2325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2326:      word_list << "and ";
    %%%%%: 2326-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2327:    }
    #####: 2328:    word_list << "'" << words[i] << "'";
    %%%%%: 2328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2328-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2328-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2329:  }
    #####: 2330:  return word_list.GetString();
    %%%%%: 2330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2330-block  1
        -: 2331:}
        -: 2332:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2333:static bool ValidateTestPropertyName(
        -: 2334:    const std::string& property_name,
        -: 2335:    const std::vector<std::string>& reserved_names) {
    #####: 2336:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2336-block  0
call    5 never executed
    #####: 2337:      reserved_names.end()) {
    %%%%%: 2337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2337-block  1
call    3 never executed
    #####: 2338:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2338-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2338-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2338-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2338-block  3
call   10 never executed
    $$$$$: 2338-block  4
call   11 never executed
    $$$$$: 2338-block  5
    $$$$$: 2338-block  6
call   12 never executed
    #####: 2339:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2339-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2339-block  3
call   11 never executed
    $$$$$: 2339-block  4
    #####: 2340:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2340-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2340-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2340-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2340-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2341:    return false;
        -: 2342:  }
    #####: 2343:  return true;
    %%%%%: 2343-block  0
        -: 2344:}
        -: 2345:
        -: 2346:// Adds a failure if the key is a reserved attribute of the element named
        -: 2347:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2348:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2349:                                      const TestProperty& test_property) {
    #####: 2350:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2350-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2350-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2350-block  2
call   10 never executed
    $$$$$: 2350-block  3
    $$$$$: 2350-block  4
call   11 never executed
    $$$$$: 2350-block  5
    #####: 2351:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2351-block  0
call    0 never executed
    %%%%%: 2351-block  1
call    1 never executed
    %%%%%: 2351-block  2
    $$$$$: 2351-block  3
call    2 never executed
        -: 2352:}
        -: 2353:
        -: 2354:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 4 returned 100% blocks executed 100%
        4: 2355:void TestResult::Clear() {
        4: 2356:  test_part_results_.clear();
        4: 2356-block  0
call    0 returned 4
        4: 2357:  test_properties_.clear();
call    0 returned 4
        4: 2358:  death_test_count_ = 0;
        4: 2359:  elapsed_time_ = 0;
        4: 2360:}
        -: 2361:
        -: 2362:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2363:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2364:  return result.skipped();
    %%%%%: 2364-block  0
call    0 never executed
        -: 2365:}
        -: 2366:
        -: 2367:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 16 returned 100% blocks executed 88%
       16: 2368:bool TestResult::Skipped() const {
      16*: 2369:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       16: 2369-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0
       16: 2369-block  1
call    3 returned 16
branch  4 taken 0 (fallthrough)
branch  5 taken 16
    %%%%%: 2369-block  2
       16: 2369-block  3
       16: 2369-block  4
        -: 2370:}
        -: 2371:
        -: 2372:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 36 returned 100% blocks executed 50%
       36: 2373:bool TestResult::Failed() const {
      36*: 2374:  for (int i = 0; i < total_part_count(); ++i) {
       36: 2374-block  0
       36: 2374-block  1
call    0 returned 36
branch  1 taken 0 (fallthrough)
branch  2 taken 36
    %%%%%: 2374-block  2
    #####: 2375:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2375-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2375-block  1
        -: 2376:  }
       36: 2377:  return false;
       36: 2377-block  0
        -: 2378:}
        -: 2379:
        -: 2380:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2381:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2382:  return result.fatally_failed();
    %%%%%: 2382-block  0
call    0 never executed
        -: 2383:}
        -: 2384:
        -: 2385:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 7 returned 100% blocks executed 100%
        7: 2386:bool TestResult::HasFatalFailure() const {
        7: 2387:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
        7: 2387-block  0
call    0 returned 7
        -: 2388:}
        -: 2389:
        -: 2390:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2391:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2392:  return result.nonfatally_failed();
    %%%%%: 2392-block  0
call    0 never executed
        -: 2393:}
        -: 2394:
        -: 2395:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2396:bool TestResult::HasNonfatalFailure() const {
    #####: 2397:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2397-block  0
call    0 never executed
        -: 2398:}
        -: 2399:
        -: 2400:// Gets the number of all test parts.  This is the sum of the number
        -: 2401:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 36 returned 100% blocks executed 100%
       36: 2402:int TestResult::total_part_count() const {
       36: 2403:  return static_cast<int>(test_part_results_.size());
       36: 2403-block  0
call    0 returned 36
        -: 2404:}
        -: 2405:
        -: 2406:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2407:int TestResult::test_property_count() const {
    #####: 2408:  return static_cast<int>(test_properties_.size());
    %%%%%: 2408-block  0
call    0 never executed
        -: 2409:}
        -: 2410:
        -: 2411:// class Test
        -: 2412:
        -: 2413:// Creates a Test object.
        -: 2414:
        -: 2415:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 3 returned 100% blocks executed 83%
        3: 2416:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
        3: 2416-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 2416-block  1
call    4 returned 3
    $$$$$: 2416-block  2
call    5 never executed
        -: 2417:
        -: 2418:// The d'tor restores the states of all flags.  The actual work is
        -: 2419:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2420:// visible here.
       3*: 2421:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2421:Test::~Test() {}
    %%%%%: 2421-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 3 returned 100% blocks executed 100%
        3: 2421:Test::~Test() {}
        3: 2421-block  0
call    0 returned 3
------------------
        -: 2422:
        -: 2423:// Sets up the test fixture.
        -: 2424://
        -: 2425:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 3 returned 100% blocks executed 100%
        3: 2426:void Test::SetUp() {}
        -: 2427:
        -: 2428:// Tears down the test fixture.
        -: 2429://
        -: 2430:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 3 returned 100% blocks executed 100%
        3: 2431:void Test::TearDown() {}
        -: 2432:
        -: 2433:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2434:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2435:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2435-block  0
call    0 never executed
call    1 never executed
    #####: 2436:}
        -: 2437:
        -: 2438:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2439:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2440:  Message value_message;
    %%%%%: 2440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2440-block  1
call    3 never executed
    #####: 2441:  value_message << value;
    %%%%%: 2441-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2442:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2442-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2442-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2442-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2442-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2442-block  4
call   15 never executed
    $$$$$: 2442-block  5
    $$$$$: 2442-block  6
call   16 never executed
    $$$$$: 2442-block  7
    $$$$$: 2442-block  8
call   17 never executed
    $$$$$: 2442-block  9
    #####: 2443:}
        -: 2444:
        -: 2445:namespace internal {
        -: 2446:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2447:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2448:                                    const std::string& message) {
        -: 2449:  // This function is a friend of UnitTest and as such has access to
        -: 2450:  // AddTestPartResult.
    #####: 2451:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2451-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2451-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2451-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2451-block  3
call   10 never executed
    $$$$$: 2451-block  4
    $$$$$: 2451-block  5
call   11 never executed
        -: 2452:      result_type,
        -: 2453:      nullptr,  // No info about the source file where the exception occurred.
        -: 2454:      -1,       // We have no info on which line caused the exception.
        -: 2455:      message,
        -: 2456:      "");  // No stack trace, either.
    #####: 2457:}
        -: 2458:
        -: 2459:}  // namespace internal
        -: 2460:
        -: 2461:// Google Test requires all tests in the same test suite to use the same test
        -: 2462:// fixture class.  This function checks if the current test has the
        -: 2463:// same fixture class as the first test in the current test suite.  If
        -: 2464:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2465:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 3 returned 100% blocks executed 15%
        3: 2466:bool Test::HasSameFixtureClass() {
        3: 2467:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        3: 2467-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2468:  const TestSuite* const test_suite = impl->current_test_suite();
        3: 2468-block  0
call    0 returned 3
        -: 2469:
        -: 2470:  // Info about the first test in the current test suite.
        3: 2471:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 3
call    1 returned 3
        3: 2472:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
        3: 2473:  const char* const first_test_name = first_test_info->name();
call    0 returned 3
        -: 2474:
        -: 2475:  // Info about the current test.
        3: 2476:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 3
        3: 2477:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
        3: 2478:  const char* const this_test_name = this_test_info->name();
call    0 returned 3
        -: 2479:
        3: 2480:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 2481:    // Is the first test defined using TEST?
    #####: 2482:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2482-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2483:    // Is this test defined using TEST?
    #####: 2484:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2484-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2485:
    #####: 2486:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2486-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2486-block  1
branch  2 never executed
branch  3 never executed
        -: 2487:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2488:      // Tell the user how to fix this.
        -: 2489:
        -: 2490:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2491:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2492:      // the fixture IDs are different for the two tests.
    #####: 2493:      const char* const TEST_name =
    %%%%%: 2493-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2493-block  1
    %%%%%: 2493-block  2
        -: 2494:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2495:      const char* const TEST_F_name =
    %%%%%: 2495-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2495-block  1
    %%%%%: 2495-block  2
        -: 2496:          first_is_TEST ? this_test_name : first_test_name;
        -: 2497:
    #####: 2498:      ADD_FAILURE()
    %%%%%: 2498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2498-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2498-block  2
call    6 never executed
    $$$$$: 2498-block  3
call    7 never executed
    $$$$$: 2498-block  4
    $$$$$: 2498-block  5
call    8 never executed
    $$$$$: 2498-block  6
    #####: 2499:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2500:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2501:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2501-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2501-block  2
    #####: 2502:          << ",\n"
    %%%%%: 2502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2503:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2503-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2503-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2504:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2504-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2504-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2505:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2506:          << "case.";
    %%%%%: 2506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2506-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2507:    } else {
        -: 2508:      // Two fixture classes with the same name appear in two different
        -: 2509:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2510:      ADD_FAILURE()
    %%%%%: 2510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2510-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2510-block  2
call    6 never executed
    $$$$$: 2510-block  3
call    7 never executed
    $$$$$: 2510-block  4
    $$$$$: 2510-block  5
call    8 never executed
    $$$$$: 2510-block  6
    #####: 2511:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2512:          << "class.  However, in test suite "
    %%%%%: 2512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2513:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2513-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2513-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2513-block  2
    #####: 2514:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2514-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2514-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2515:          << this_test_name << "\n"
    %%%%%: 2515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2515-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2516:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2517:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2518:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2519:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2520:    }
    #####: 2521:    return false;
    %%%%%: 2521-block  0
        -: 2522:  }
        -: 2523:
        3: 2524:  return true;
        3: 2524-block  0
        -: 2525:}
        -: 2526:
        -: 2527:#if GTEST_HAS_SEH
        -: 2528:
        -: 2529:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2530:// function returns its result via an output parameter pointer because VC++
        -: 2531:// prohibits creation of objects with destructors on stack in functions
        -: 2532:// using __try (see error C2712).
        -: 2533:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2534:                                              const char* location) {
        -: 2535:  Message message;
        -: 2536:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2537:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2538:
        -: 2539:  return new std::string(message.GetString());
        -: 2540:}
        -: 2541:
        -: 2542:#endif  // GTEST_HAS_SEH
        -: 2543:
        -: 2544:namespace internal {
        -: 2545:
        -: 2546:#if GTEST_HAS_EXCEPTIONS
        -: 2547:
        -: 2548:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2549:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2550:                                             const char* location) {
    #####: 2551:  Message message;
    %%%%%: 2551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2551-block  1
call    3 never executed
    $$$$$: 2551-block  2
call    4 never executed
    #####: 2552:  if (description != nullptr) {
    %%%%%: 2552-block  0
branch  0 never executed
branch  1 never executed
    #####: 2553:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2553-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2553-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2554:  } else {
    #####: 2555:    message << "Unknown C++ exception";
    %%%%%: 2555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2556:  }
    #####: 2557:  message << " thrown in " << location << ".";
    %%%%%: 2557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2557-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2558:
    #####: 2559:  return message.GetString();
    %%%%%: 2559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2559-block  1
        -: 2560:}
        -: 2561:
        -: 2562:static std::string PrintTestPartResultToString(
        -: 2563:    const TestPartResult& test_part_result);
        -: 2564:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2565:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2566:    const TestPartResult& failure)
    #####: 2567:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2567-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2567-block  1
call    5 never executed
    $$$$$: 2567-block  2
call    6 never executed
        -: 2568:
        -: 2569:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2570:
        -: 2571:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2572:// compiler rejects the code if they were declared static.
        -: 2573:
        -: 2574:// Runs the given method and handles SEH exceptions it throws, when
        -: 2575:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2576:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2577:// exceptions in the same function.  Therefore, we provide a separate
        -: 2578:// wrapper function for handling SEH exceptions.)
        -: 2579:template <class T, typename Result>
       18: 2580:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2581:                                              const char* location) {
        -: 2582:#if GTEST_HAS_SEH
        -: 2583:  __try {
        -: 2584:    return (object->*method)();
        -: 2585:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2586:      GetExceptionCode())) {
        -: 2587:    // We create the exception message on the heap because VC++ prohibits
        -: 2588:    // creation of objects with destructors on stack in functions using __try
        -: 2589:    // (see error C2712).
        -: 2590:    std::string* exception_message =
        -: 2591:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2592:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2593:                                             *exception_message);
        -: 2594:    delete exception_message;
        -: 2595:    return static_cast<Result>(0);
        -: 2596:  }
        -: 2597:#else
        -: 2598:  (void)location;
      18*: 2599:  return (object->*method)();
        -: 2600:#endif  // GTEST_HAS_SEH
        -: 2601:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2580:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2581:                                              const char* location) {
        -: 2582:#if GTEST_HAS_SEH
        -: 2583:  __try {
        -: 2584:    return (object->*method)();
        -: 2585:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2586:      GetExceptionCode())) {
        -: 2587:    // We create the exception message on the heap because VC++ prohibits
        -: 2588:    // creation of objects with destructors on stack in functions using __try
        -: 2589:    // (see error C2712).
        -: 2590:    std::string* exception_message =
        -: 2591:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2592:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2593:                                             *exception_message);
        -: 2594:    delete exception_message;
        -: 2595:    return static_cast<Result>(0);
        -: 2596:  }
        -: 2597:#else
        -: 2598:  (void)location;
       1*: 2599:  return (object->*method)();
        1: 2599-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2599-block  1
        1: 2599-block  2
        1: 2599-block  3
call    2 returned 1
        -: 2600:#endif  // GTEST_HAS_SEH
        -: 2601:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 80%
        2: 2580:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2581:                                              const char* location) {
        -: 2582:#if GTEST_HAS_SEH
        -: 2583:  __try {
        -: 2584:    return (object->*method)();
        -: 2585:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2586:      GetExceptionCode())) {
        -: 2587:    // We create the exception message on the heap because VC++ prohibits
        -: 2588:    // creation of objects with destructors on stack in functions using __try
        -: 2589:    // (see error C2712).
        -: 2590:    std::string* exception_message =
        -: 2591:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2592:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2593:                                             *exception_message);
        -: 2594:    delete exception_message;
        -: 2595:    return static_cast<Result>(0);
        -: 2596:  }
        -: 2597:#else
        -: 2598:  (void)location;
       2*: 2599:  return (object->*method)();
        2: 2599-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2599-block  1
        2: 2599-block  2
        2: 2599-block  3
call    2 returned 2
        -: 2600:#endif  // GTEST_HAS_SEH
        -: 2601:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 3 returned 100% blocks executed 83%
        3: 2580:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2581:                                              const char* location) {
        -: 2582:#if GTEST_HAS_SEH
        -: 2583:  __try {
        -: 2584:    return (object->*method)();
        -: 2585:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2586:      GetExceptionCode())) {
        -: 2587:    // We create the exception message on the heap because VC++ prohibits
        -: 2588:    // creation of objects with destructors on stack in functions using __try
        -: 2589:    // (see error C2712).
        -: 2590:    std::string* exception_message =
        -: 2591:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2592:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2593:                                             *exception_message);
        -: 2594:    delete exception_message;
        -: 2595:    return static_cast<Result>(0);
        -: 2596:  }
        -: 2597:#else
        -: 2598:  (void)location;
       3*: 2599:  return (object->*method)();
        3: 2599-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2599-block  1
    %%%%%: 2599-block  2
        3: 2599-block  3
call    2 returned 3
        -: 2600:#endif  // GTEST_HAS_SEH
        -: 2601:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 12 returned 100% blocks executed 100%
       12: 2580:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2581:                                              const char* location) {
        -: 2582:#if GTEST_HAS_SEH
        -: 2583:  __try {
        -: 2584:    return (object->*method)();
        -: 2585:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2586:      GetExceptionCode())) {
        -: 2587:    // We create the exception message on the heap because VC++ prohibits
        -: 2588:    // creation of objects with destructors on stack in functions using __try
        -: 2589:    // (see error C2712).
        -: 2590:    std::string* exception_message =
        -: 2591:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2592:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2593:                                             *exception_message);
        -: 2594:    delete exception_message;
        -: 2595:    return static_cast<Result>(0);
        -: 2596:  }
        -: 2597:#else
        -: 2598:  (void)location;
       12: 2599:  return (object->*method)();
       12: 2599-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 3
        9: 2599-block  1
        3: 2599-block  2
       12: 2599-block  3
call    2 returned 12
        -: 2600:#endif  // GTEST_HAS_SEH
        -: 2601:}
------------------
        -: 2602:
        -: 2603:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2604:// exceptions, if they are supported; returns the 0-value for type
        -: 2605:// Result in case of an SEH exception.
        -: 2606:template <class T, typename Result>
       18: 2607:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2608:                                           const char* location) {
        -: 2609:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2610:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2611:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2612:  // after the exception is caught and either report or re-throw the
        -: 2613:  // exception based on the flag's value:
        -: 2614:  //
        -: 2615:  // try {
        -: 2616:  //   // Perform the test method.
        -: 2617:  // } catch (...) {
        -: 2618:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2619:  //     // Report the exception as failure.
        -: 2620:  //   else
        -: 2621:  //     throw;  // Re-throws the original exception.
        -: 2622:  // }
        -: 2623:  //
        -: 2624:  // However, the purpose of this flag is to allow the program to drop into
        -: 2625:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2626:  // control enters the catch block, the exception origin information is
        -: 2627:  // lost and the debugger will stop the program at the point of the
        -: 2628:  // re-throw in this function -- instead of at the point of the original
        -: 2629:  // throw statement in the code under test.  For this reason, we perform
        -: 2630:  // the check early, sacrificing the ability to affect Google Test's
        -: 2631:  // exception handling in the method where the exception is thrown.
       18: 2632:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2633:#if GTEST_HAS_EXCEPTIONS
        -: 2634:    try {
       18: 2635:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2636:    } catch (const AssertionException&) {  // NOLINT
        -: 2637:      // This failure was reported already.
    =====: 2638:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2639:      // This exception type can only be thrown by a failed Google
        -: 2640:      // Test assertion with the intention of letting another testing
        -: 2641:      // framework catch it.  Therefore we just re-throw it.
    =====: 2642:      throw;
    =====: 2643:    } catch (const std::exception& e) {  // NOLINT
    =====: 2644:      internal::ReportFailureInUnknownLocation(
        -: 2645:          TestPartResult::kFatalFailure,
    =====: 2646:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2647:    } catch (...) {  // NOLINT
    =====: 2648:      internal::ReportFailureInUnknownLocation(
        -: 2649:          TestPartResult::kFatalFailure,
        -: 2650:          FormatCxxExceptionMessage(nullptr, location));
        -: 2651:    }
    =====: 2652:    return static_cast<Result>(0);
        -: 2653:#else
        -: 2654:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2655:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2656:  } else {
    #####: 2657:    return (object->*method)();
        -: 2658:  }
        -: 2659:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2607:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2608:                                           const char* location) {
        -: 2609:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2610:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2611:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2612:  // after the exception is caught and either report or re-throw the
        -: 2613:  // exception based on the flag's value:
        -: 2614:  //
        -: 2615:  // try {
        -: 2616:  //   // Perform the test method.
        -: 2617:  // } catch (...) {
        -: 2618:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2619:  //     // Report the exception as failure.
        -: 2620:  //   else
        -: 2621:  //     throw;  // Re-throws the original exception.
        -: 2622:  // }
        -: 2623:  //
        -: 2624:  // However, the purpose of this flag is to allow the program to drop into
        -: 2625:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2626:  // control enters the catch block, the exception origin information is
        -: 2627:  // lost and the debugger will stop the program at the point of the
        -: 2628:  // re-throw in this function -- instead of at the point of the original
        -: 2629:  // throw statement in the code under test.  For this reason, we perform
        -: 2630:  // the check early, sacrificing the ability to affect Google Test's
        -: 2631:  // exception handling in the method where the exception is thrown.
        1: 2632:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2632-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2633:#if GTEST_HAS_EXCEPTIONS
        -: 2634:    try {
        1: 2635:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2635-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2635-block  1
    =====: 2636:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2636-block  0
call    0 never executed
call    1 never executed
        -: 2637:      // This failure was reported already.
    =====: 2638:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2638-block  0
call    0 never executed
    $$$$$: 2638-block  1
call    1 never executed
        -: 2639:      // This exception type can only be thrown by a failed Google
        -: 2640:      // Test assertion with the intention of letting another testing
        -: 2641:      // framework catch it.  Therefore we just re-throw it.
    =====: 2642:      throw;
call    0 never executed
    =====: 2643:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
    =====: 2646:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2647:    } catch (...) {  // NOLINT
    $$$$$: 2647-block  0
call    0 never executed
    $$$$$: 2647-block  1
call    1 never executed
    =====: 2648:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2648-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2648-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2648-block  2
call    8 never executed
    $$$$$: 2648-block  3
        -: 2649:          TestPartResult::kFatalFailure,
        -: 2650:          FormatCxxExceptionMessage(nullptr, location));
        -: 2651:    }
    =====: 2652:    return static_cast<Result>(0);
    $$$$$: 2652-block  0
        -: 2653:#else
        -: 2654:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2655:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2656:  } else {
    #####: 2657:    return (object->*method)();
    %%%%%: 2657-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2657-block  1
    %%%%%: 2657-block  2
    %%%%%: 2657-block  3
call    2 never executed
        -: 2658:  }
        -: 2659:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2607:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2608:                                           const char* location) {
        -: 2609:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2610:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2611:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2612:  // after the exception is caught and either report or re-throw the
        -: 2613:  // exception based on the flag's value:
        -: 2614:  //
        -: 2615:  // try {
        -: 2616:  //   // Perform the test method.
        -: 2617:  // } catch (...) {
        -: 2618:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2619:  //     // Report the exception as failure.
        -: 2620:  //   else
        -: 2621:  //     throw;  // Re-throws the original exception.
        -: 2622:  // }
        -: 2623:  //
        -: 2624:  // However, the purpose of this flag is to allow the program to drop into
        -: 2625:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2626:  // control enters the catch block, the exception origin information is
        -: 2627:  // lost and the debugger will stop the program at the point of the
        -: 2628:  // re-throw in this function -- instead of at the point of the original
        -: 2629:  // throw statement in the code under test.  For this reason, we perform
        -: 2630:  // the check early, sacrificing the ability to affect Google Test's
        -: 2631:  // exception handling in the method where the exception is thrown.
        2: 2632:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2632-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2633:#if GTEST_HAS_EXCEPTIONS
        -: 2634:    try {
        2: 2635:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2635-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2635-block  1
    =====: 2636:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2636-block  0
call    0 never executed
call    1 never executed
        -: 2637:      // This failure was reported already.
    =====: 2638:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2638-block  0
call    0 never executed
    $$$$$: 2638-block  1
call    1 never executed
        -: 2639:      // This exception type can only be thrown by a failed Google
        -: 2640:      // Test assertion with the intention of letting another testing
        -: 2641:      // framework catch it.  Therefore we just re-throw it.
    =====: 2642:      throw;
call    0 never executed
    =====: 2643:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
    =====: 2646:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2647:    } catch (...) {  // NOLINT
    $$$$$: 2647-block  0
call    0 never executed
    $$$$$: 2647-block  1
call    1 never executed
    =====: 2648:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2648-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2648-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2648-block  2
call    8 never executed
    $$$$$: 2648-block  3
        -: 2649:          TestPartResult::kFatalFailure,
        -: 2650:          FormatCxxExceptionMessage(nullptr, location));
        -: 2651:    }
    =====: 2652:    return static_cast<Result>(0);
    $$$$$: 2652-block  0
        -: 2653:#else
        -: 2654:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2655:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2656:  } else {
    #####: 2657:    return (object->*method)();
    %%%%%: 2657-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2657-block  1
    %%%%%: 2657-block  2
    %%%%%: 2657-block  3
call    2 never executed
        -: 2658:  }
        -: 2659:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 3 returned 100% blocks executed 18%
        3: 2607:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2608:                                           const char* location) {
        -: 2609:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2610:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2611:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2612:  // after the exception is caught and either report or re-throw the
        -: 2613:  // exception based on the flag's value:
        -: 2614:  //
        -: 2615:  // try {
        -: 2616:  //   // Perform the test method.
        -: 2617:  // } catch (...) {
        -: 2618:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2619:  //     // Report the exception as failure.
        -: 2620:  //   else
        -: 2621:  //     throw;  // Re-throws the original exception.
        -: 2622:  // }
        -: 2623:  //
        -: 2624:  // However, the purpose of this flag is to allow the program to drop into
        -: 2625:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2626:  // control enters the catch block, the exception origin information is
        -: 2627:  // lost and the debugger will stop the program at the point of the
        -: 2628:  // re-throw in this function -- instead of at the point of the original
        -: 2629:  // throw statement in the code under test.  For this reason, we perform
        -: 2630:  // the check early, sacrificing the ability to affect Google Test's
        -: 2631:  // exception handling in the method where the exception is thrown.
        3: 2632:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        3: 2632-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        -: 2633:#if GTEST_HAS_EXCEPTIONS
        -: 2634:    try {
        3: 2635:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        3: 2635-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2635-block  1
    =====: 2636:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2636-block  0
call    0 never executed
call    1 never executed
        -: 2637:      // This failure was reported already.
    =====: 2638:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2638-block  0
call    0 never executed
    $$$$$: 2638-block  1
call    1 never executed
        -: 2639:      // This exception type can only be thrown by a failed Google
        -: 2640:      // Test assertion with the intention of letting another testing
        -: 2641:      // framework catch it.  Therefore we just re-throw it.
    =====: 2642:      throw;
call    0 never executed
    =====: 2643:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
    =====: 2646:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2647:    } catch (...) {  // NOLINT
    $$$$$: 2647-block  0
call    0 never executed
    $$$$$: 2647-block  1
call    1 never executed
    =====: 2648:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2648-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2648-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2648-block  2
call    8 never executed
    $$$$$: 2648-block  3
        -: 2649:          TestPartResult::kFatalFailure,
        -: 2650:          FormatCxxExceptionMessage(nullptr, location));
        -: 2651:    }
    =====: 2652:    return static_cast<Result>(0);
    $$$$$: 2652-block  0
        -: 2653:#else
        -: 2654:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2655:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2656:  } else {
    #####: 2657:    return (object->*method)();
    %%%%%: 2657-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2657-block  1
    %%%%%: 2657-block  2
    %%%%%: 2657-block  3
call    2 never executed
        -: 2658:  }
        -: 2659:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 12 returned 100% blocks executed 18%
       12: 2607:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2608:                                           const char* location) {
        -: 2609:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2610:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2611:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2612:  // after the exception is caught and either report or re-throw the
        -: 2613:  // exception based on the flag's value:
        -: 2614:  //
        -: 2615:  // try {
        -: 2616:  //   // Perform the test method.
        -: 2617:  // } catch (...) {
        -: 2618:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2619:  //     // Report the exception as failure.
        -: 2620:  //   else
        -: 2621:  //     throw;  // Re-throws the original exception.
        -: 2622:  // }
        -: 2623:  //
        -: 2624:  // However, the purpose of this flag is to allow the program to drop into
        -: 2625:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2626:  // control enters the catch block, the exception origin information is
        -: 2627:  // lost and the debugger will stop the program at the point of the
        -: 2628:  // re-throw in this function -- instead of at the point of the original
        -: 2629:  // throw statement in the code under test.  For this reason, we perform
        -: 2630:  // the check early, sacrificing the ability to affect Google Test's
        -: 2631:  // exception handling in the method where the exception is thrown.
       12: 2632:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       12: 2632-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0
        -: 2633:#if GTEST_HAS_EXCEPTIONS
        -: 2634:    try {
       12: 2635:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       12: 2635-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2635-block  1
    =====: 2636:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2636-block  0
call    0 never executed
call    1 never executed
        -: 2637:      // This failure was reported already.
    =====: 2638:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2638-block  0
call    0 never executed
    $$$$$: 2638-block  1
call    1 never executed
        -: 2639:      // This exception type can only be thrown by a failed Google
        -: 2640:      // Test assertion with the intention of letting another testing
        -: 2641:      // framework catch it.  Therefore we just re-throw it.
    =====: 2642:      throw;
call    0 never executed
    =====: 2643:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2643-block  0
call    0 never executed
    $$$$$: 2643-block  1
call    1 never executed
    =====: 2644:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2644-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2644-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2644-block  2
call    8 never executed
    $$$$$: 2644-block  3
        -: 2645:          TestPartResult::kFatalFailure,
    =====: 2646:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2647:    } catch (...) {  // NOLINT
    $$$$$: 2647-block  0
call    0 never executed
    $$$$$: 2647-block  1
call    1 never executed
    =====: 2648:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2648-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2648-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2648-block  2
call    8 never executed
    $$$$$: 2648-block  3
        -: 2649:          TestPartResult::kFatalFailure,
        -: 2650:          FormatCxxExceptionMessage(nullptr, location));
        -: 2651:    }
    =====: 2652:    return static_cast<Result>(0);
    $$$$$: 2652-block  0
        -: 2653:#else
        -: 2654:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2655:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2656:  } else {
    #####: 2657:    return (object->*method)();
    %%%%%: 2657-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2657-block  1
    %%%%%: 2657-block  2
    %%%%%: 2657-block  3
call    2 never executed
        -: 2658:  }
        -: 2659:}
------------------
        -: 2660:
        -: 2661:}  // namespace internal
        -: 2662:
        -: 2663:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 3 returned 100% blocks executed 90%
        3: 2664:void Test::Run() {
       3*: 2665:  if (!HasSameFixtureClass()) return;
        3: 2665-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    %%%%%: 2665-block  1
        -: 2666:
        3: 2667:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        3: 2667-block  0
call    0 returned 3
        3: 2668:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 3
call    1 returned 3
        3: 2669:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 3
        -: 2670:  // We will run the test only if SetUp() was successful and didn't call
        -: 2671:  // GTEST_SKIP().
       3*: 2672:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3: 2672-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3: 2672-block  1
    %%%%%: 2672-block  2
        3: 2672-block  3
branch  6 taken 3 (fallthrough)
branch  7 taken 0
        3: 2673:    impl->os_stack_trace_getter()->UponLeavingGTest();
        3: 2673-block  0
call    0 returned 3
call    1 returned 3
        3: 2674:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 3
        -: 2675:                                                  "the test body");
        -: 2676:  }
        -: 2677:
        -: 2678:  // However, we want to clean up as much as possible.  Hence we will
        -: 2679:  // always call TearDown(), even if SetUp() or the test body has
        -: 2680:  // failed.
        3: 2681:  impl->os_stack_trace_getter()->UponLeavingGTest();
        3: 2681-block  0
call    0 returned 3
call    1 returned 3
        3: 2682:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 3
        -: 2683:                                                "TearDown()");
        -: 2684:}
        -: 2685:
        -: 2686:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 7 returned 100% blocks executed 100%
        7: 2687:bool Test::HasFatalFailure() {
        7: 2688:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
        7: 2688-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2689:}
        -: 2690:
        -: 2691:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2692:bool Test::HasNonfatalFailure() {
        -: 2693:  return internal::GetUnitTestImpl()
        -: 2694:      ->current_test_result()
    #####: 2695:      ->HasNonfatalFailure();
    %%%%%: 2695-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2696:}
        -: 2697:
        -: 2698:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 7 returned 100% blocks executed 100%
        7: 2699:bool Test::IsSkipped() {
        7: 2700:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
        7: 2700-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2701:}
        -: 2702:
        -: 2703:// class TestInfo
        -: 2704:
        -: 2705:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2706:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 3 returned 100% blocks executed 31%
        3: 2707:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2708:                   const std::string& a_name, const char* a_type_param,
        -: 2709:                   const char* a_value_param,
        -: 2710:                   internal::CodeLocation a_code_location,
        -: 2711:                   internal::TypeId fixture_class_id,
        3: 2712:                   internal::TestFactoryBase* factory)
        -: 2713:    : test_suite_name_(a_test_suite_name),
        -: 2714:      name_(a_name),
    #####: 2715:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2715-block  1
call    3 never executed
    #####: 2716:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2716-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2716-block  1
call    3 never executed
        -: 2717:      location_(a_code_location),
        -: 2718:      fixture_class_id_(fixture_class_id),
        -: 2719:      should_run_(false),
        -: 2720:      is_disabled_(false),
        -: 2721:      matches_filter_(false),
        -: 2722:      is_in_another_shard_(false),
        -: 2723:      factory_(factory),
       3*: 2724:      result_() {}
        3: 2724-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 2724-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 3
    %%%%%: 2724-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2724-block  3
        3: 2724-block  4
        3: 2724-block  5
call   10 returned 3
branch 11 taken 0 (fallthrough)
branch 12 taken 3
    %%%%%: 2724-block  6
call   13 never executed
        3: 2724-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 3
    %%%%%: 2724-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 2724-block  9
        3: 2724-block 10
        3: 2724-block 11
call   20 returned 3
branch 21 taken 0 (fallthrough)
branch 22 taken 3
    %%%%%: 2724-block 12
call   23 never executed
        3: 2724-block 13
call   24 returned 3
branch 25 taken 3 (fallthrough)
branch 26 taken 0 (throw)
        3: 2724-block 14
call   27 returned 3
branch 28 taken 3 (fallthrough)
branch 29 taken 0 (throw)
        3: 2724-block 15
    $$$$$: 2724-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 2724-block 17
call   32 never executed
    $$$$$: 2724-block 18
    $$$$$: 2724-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 2724-block 20
call   35 never executed
    $$$$$: 2724-block 21
    $$$$$: 2724-block 22
call   36 never executed
    $$$$$: 2724-block 23
call   37 never executed
    $$$$$: 2724-block 24
call   38 never executed
    $$$$$: 2724-block 25
call   39 never executed
    $$$$$: 2724-block 26
call   40 never executed
        -: 2725:
        -: 2726:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 3 returned 100% blocks executed 100%
        3: 2727:TestInfo::~TestInfo() { delete factory_; }
        3: 2727-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2727-block  1
call    2 returned 3
        3: 2727-block  2
call    3 returned 3
call    4 returned 3
call    5 returned 3
call    6 returned 3
call    7 returned 3
call    8 returned 3
        -: 2728:
        -: 2729:namespace internal {
        -: 2730:
        -: 2731:// Creates a new TestInfo object and registers it with Google Test;
        -: 2732:// returns the created object.
        -: 2733://
        -: 2734:// Arguments:
        -: 2735://
        -: 2736://   test_suite_name:  name of the test suite
        -: 2737://   name:             name of the test
        -: 2738://   type_param:       the name of the test's type parameter, or NULL if
        -: 2739://                     this is not a typed or a type-parameterized test.
        -: 2740://   value_param:      text representation of the test's value parameter,
        -: 2741://                     or NULL if this is not a value-parameterized test.
        -: 2742://   code_location:    code location where the test is defined
        -: 2743://   fixture_class_id: ID of the test fixture class
        -: 2744://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2745://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2746://   factory:          pointer to the factory that creates a test object.
        -: 2747://                     The newly created TestInfo instance will assume
        -: 2748://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 3 returned 100% blocks executed 52%
        3: 2749:TestInfo* MakeAndRegisterTestInfo(
        -: 2750:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2751:    const char* value_param, CodeLocation code_location,
        -: 2752:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2753:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2754:  TestInfo* const test_info =
        -: 2755:      new TestInfo(test_suite_name, name, type_param, value_param,
        3: 2756:                   code_location, fixture_class_id, factory);
        3: 2756-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 2756-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3: 2756-block  2
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0 (throw)
        3: 2756-block  3
call   11 returned 3
branch 12 taken 3 (fallthrough)
branch 13 taken 0 (throw)
        3: 2756-block  4
call   14 returned 3
branch 15 taken 3 (fallthrough)
branch 16 taken 0 (throw)
        3: 2756-block  5
call   17 returned 3
call   18 returned 3
call   19 returned 3
call   20 returned 3
call   21 returned 3
    $$$$$: 2756-block  6
call   22 never executed
    $$$$$: 2756-block  7
call   23 never executed
    $$$$$: 2756-block  8
    $$$$$: 2756-block  9
call   24 never executed
    $$$$$: 2756-block 10
    $$$$$: 2756-block 11
call   25 never executed
    $$$$$: 2756-block 12
    $$$$$: 2756-block 13
call   26 never executed
    $$$$$: 2756-block 14
    $$$$$: 2756-block 15
call   27 never executed
        3: 2757:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 3
call    1 returned 3
        3: 2758:  return test_info;
        3: 2758-block  0
        -: 2759:}
        -: 2760:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2761:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2762:                                CodeLocation code_location) {
    #####: 2763:  Message errors;
    %%%%%: 2763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2763-block  1
call    3 never executed
        -: 2764:  errors
    #####: 2765:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2765-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2765-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2766:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2766-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2767:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2767-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2767-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2768:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2769:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2770:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2771:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2772:      << "test suites.";
    %%%%%: 2772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2773:
    #####: 2774:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2774-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 2774-block  2
call   10 never executed
    $$$$$: 2774-block  3
    $$$$$: 2774-block  4
call   11 never executed
    $$$$$: 2774-block  5
        -: 2775:                                          code_location.line)
    #####: 2776:                    << " " << errors.GetString();
    %%%%%: 2776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2776-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2776-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2776-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2776-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2776-block  5
call   14 never executed
    $$$$$: 2776-block  6
    #####: 2777:}
        -: 2778:}  // namespace internal
        -: 2779:
        -: 2780:namespace {
        -: 2781:
        -: 2782:// A predicate that checks the test name of a TestInfo against a known
        -: 2783:// value.
        -: 2784://
        -: 2785:// This is used for implementation of the TestSuite class only.  We put
        -: 2786:// it in the anonymous namespace to prevent polluting the outer
        -: 2787:// namespace.
        -: 2788://
        -: 2789:// TestNameIs is copyable.
        -: 2790:class TestNameIs {
        -: 2791: public:
        -: 2792:  // Constructor.
        -: 2793:  //
        -: 2794:  // TestNameIs has NO default constructor.
        -: 2795:  explicit TestNameIs(const char* name) : name_(name) {}
        -: 2796:
        -: 2797:  // Returns true if and only if the test name of test_info matches name_.
        -: 2798:  bool operator()(const TestInfo* test_info) const {
        -: 2799:    return test_info && test_info->name() == name_;
        -: 2800:  }
        -: 2801:
        -: 2802: private:
        -: 2803:  std::string name_;
        -: 2804:};
        -: 2805:
        -: 2806:}  // namespace
        -: 2807:
        -: 2808:namespace internal {
        -: 2809:
        -: 2810:// This method expands all parameterized tests registered with macros TEST_P
        -: 2811:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2812:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2813:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2814:  if (!parameterized_tests_registered_) {
        1: 2814-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2815:    parameterized_test_registry_.RegisterTests();
        1: 2815-block  0
call    0 returned 1
        1: 2816:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2817:    parameterized_tests_registered_ = true;
        -: 2818:  }
        1: 2819:}
        -: 2820:
        -: 2821:}  // namespace internal
        -: 2822:
        -: 2823:// Creates the test object, runs it, records its result, and then
        -: 2824:// deletes it.
function _ZN7testing8TestInfo3RunEv called 3 returned 100% blocks executed 86%
        3: 2825:void TestInfo::Run() {
        3: 2826:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        3: 2826-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2826-block  1
call    3 returned 3
call    4 returned 3
        3: 2827:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 2828:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2828-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2828-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2828-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2829:    return;
    %%%%%: 2829-block  0
        -: 2830:  }
        -: 2831:
        -: 2832:  // Tells UnitTest where to store test result.
        3: 2833:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        3: 2833-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2834:  impl->set_current_test_info(this);
        3: 2834-block  0
call    0 returned 3
        -: 2835:
        -: 2836:  // Notifies the unit test event listeners that a test is about to start.
        3: 2837:  repeater->OnTestStart(*this);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2838:  result_.set_start_timestamp(internal::GetTimeInMillis());
        3: 2838-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2838-block  1
call    3 returned 3
        3: 2839:  internal::Timer timer;
call    0 returned 3
        3: 2840:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2840-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -: 2841:
        -: 2842:  // Creates the test object.
        6: 2843:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
        3: 2844:      factory_, &internal::TestFactoryBase::CreateTest,
        3: 2844-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 2845:      "the test fixture's constructor");
        -: 2846:
        -: 2847:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2848:  // GTEST_SKIP().
        -: 2849:  // Note that the object will not be null
       3*: 2850:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
        3: 2850-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2850-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3: 2850-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3: 2850-block  3
branch  8 taken 3 (fallthrough)
branch  9 taken 0
        3: 2850-block  4
    %%%%%: 2850-block  5
        3: 2850-block  6
branch 10 taken 3 (fallthrough)
branch 11 taken 0
        -: 2851:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2852:    // exception handling code.
        3: 2853:    test->Run();
        3: 2853-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 2854:  }
        -: 2855:
        3: 2856:  if (test != nullptr) {
        3: 2856-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 2857:    // Deletes the test object.
        3: 2858:    impl->os_stack_trace_getter()->UponLeavingGTest();
        3: 2858-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2858-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3: 2859:    internal::HandleExceptionsInMethodIfSupported(
        3: 2859-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 2860:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2861:  }
        -: 2862:
        3: 2863:  result_.set_elapsed_time(timer.Elapsed());
        3: 2863-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 2863-block  1
call    3 returned 3
        -: 2864:
        -: 2865:  // Notifies the unit test event listener that a test has just finished.
        3: 2866:  repeater->OnTestEnd(*this);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -: 2867:
        -: 2868:  // Tells UnitTest to stop associating assertion results to this
        -: 2869:  // test.
        3: 2870:  impl->set_current_test_info(nullptr);
        3: 2870-block  0
call    0 returned 3
        -: 2871:}
        -: 2872:
        -: 2873:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2874:void TestInfo::Skip() {
    #####: 2875:  if (!should_run_) return;
    %%%%%: 2875-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2875-block  1
        -: 2876:
    #####: 2877:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2878:  impl->set_current_test_info(this);
    %%%%%: 2878-block  0
call    0 never executed
        -: 2879:
    #####: 2880:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2880-block  0
call    3 never executed
call    4 never executed
        -: 2881:
        -: 2882:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2883:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2884:
        -: 2885:  const TestPartResult test_part_result =
    #####: 2886:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2886-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2886-block  1
call    6 never executed
    #####: 2887:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2888:      test_part_result);
    %%%%%: 2888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2889:
        -: 2890:  // Notifies the unit test event listener that a test has just finished.
    #####: 2891:  repeater->OnTestEnd(*this);
    %%%%%: 2891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2892:  impl->set_current_test_info(nullptr);
    %%%%%: 2892-block  0
call    0 never executed
        -: 2893:}
        -: 2894:
        -: 2895:// class TestSuite
        -: 2896:
        -: 2897:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2898:int TestSuite::successful_test_count() const {
        1: 2899:  return CountIf(test_info_list_, TestPassed);
        1: 2899-block  0
call    0 returned 1
        -: 2900:}
        -: 2901:
        -: 2902:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2903:int TestSuite::skipped_test_count() const {
        1: 2904:  return CountIf(test_info_list_, TestSkipped);
        1: 2904-block  0
call    0 returned 1
        -: 2905:}
        -: 2906:
        -: 2907:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2908:int TestSuite::failed_test_count() const {
        2: 2909:  return CountIf(test_info_list_, TestFailed);
        2: 2909-block  0
call    0 returned 2
        -: 2910:}
        -: 2911:
        -: 2912:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2913:int TestSuite::reportable_disabled_test_count() const {
        1: 2914:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2914-block  0
call    0 returned 1
        -: 2915:}
        -: 2916:
        -: 2917:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2918:int TestSuite::disabled_test_count() const {
    #####: 2919:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2919-block  0
call    0 never executed
        -: 2920:}
        -: 2921:
        -: 2922:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2923:int TestSuite::reportable_test_count() const {
    #####: 2924:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2924-block  0
call    0 never executed
        -: 2925:}
        -: 2926:
        -: 2927:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2928:int TestSuite::test_to_run_count() const {
        4: 2929:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2929-block  0
call    0 returned 4
        -: 2930:}
        -: 2931:
        -: 2932:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 4 returned 100% blocks executed 100%
        4: 2933:int TestSuite::total_test_count() const {
        4: 2934:  return static_cast<int>(test_info_list_.size());
        4: 2934-block  0
call    0 returned 4
        -: 2935:}
        -: 2936:
        -: 2937:// Creates a TestSuite with the given name.
        -: 2938://
        -: 2939:// Arguments:
        -: 2940://
        -: 2941://   a_name:       name of the test suite
        -: 2942://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2943://                 this is not a typed or a type-parameterized test suite.
        -: 2944://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2945://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 1 returned 100% blocks executed 36%
        1: 2946:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2947:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2948:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2949:    : name_(a_name),
    #####: 2950:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2950-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2950-block  1
call    3 never executed
        -: 2951:      set_up_tc_(set_up_tc),
        -: 2952:      tear_down_tc_(tear_down_tc),
        -: 2953:      should_run_(false),
        -: 2954:      start_timestamp_(0),
       1*: 2955:      elapsed_time_(0) {}
        1: 2955-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2955-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 2955-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2955-block  3
        1: 2955-block  4
        1: 2955-block  5
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 2955-block  6
call   14 never executed
        1: 2955-block  7
call   15 returned 1
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1: 2955-block  8
    $$$$$: 2955-block  9
call   20 never executed
    $$$$$: 2955-block 10
call   21 never executed
    $$$$$: 2955-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 2955-block 12
call   24 never executed
    $$$$$: 2955-block 13
    $$$$$: 2955-block 14
call   25 never executed
    $$$$$: 2955-block 15
call   26 never executed
    $$$$$: 2955-block 16
call   27 never executed
    $$$$$: 2955-block 17
call   28 never executed
        -: 2956:
        -: 2957:// Destructor of TestSuite.
        2: 2958:TestSuite::~TestSuite() {
        -: 2959:  // Deletes every Test in the collection.
        1: 2960:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2961:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 1 returned 100% blocks executed 100%
        1: 2958:TestSuite::~TestSuite() {
        -: 2959:  // Deletes every Test in the collection.
        -: 2960:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2961:}
        1: 2961-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 1 returned 100% blocks executed 100%
        1: 2958:TestSuite::~TestSuite() {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 2959:  // Deletes every Test in the collection.
        1: 2960:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2960-block  0
call    0 returned 1
        1: 2961:}
------------------
        -: 2962:
        -: 2963:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2964:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2965:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2966:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2966-block  0
call    0 never executed
    #####: 2967:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2967-block  0
call    2 never executed
    %%%%%: 2967-block  1
    %%%%%: 2967-block  2
        -: 2968:}
        -: 2969:
        -: 2970:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2971:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 3 returned 100% blocks executed 86%
        3: 2972:TestInfo* TestSuite::GetMutableTestInfo(int i) {
        3: 2973:  const int index = GetElementOr(test_indices_, i, -1);
        3: 2973-block  0
call    0 returned 3
       3*: 2974:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 2974-block  0
call    2 returned 3
    %%%%%: 2974-block  1
        3: 2974-block  2
        -: 2975:}
        -: 2976:
        -: 2977:// Adds a test to this test suite.  Will delete the test upon
        -: 2978:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 3 returned 100% blocks executed 100%
        3: 2979:void TestSuite::AddTestInfo(TestInfo* test_info) {
        3: 2980:  test_info_list_.push_back(test_info);
        3: 2980-block  0
call    0 returned 3
        3: 2981:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 2982:}
        3: 2982-block  0
        -: 2983:
        -: 2984:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 70%
        1: 2985:void TestSuite::Run() {
       1*: 2986:  if (!should_run_) return;
        1: 2986-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2986-block  1
        -: 2987:
        1: 2988:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2988-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2989:  impl->set_current_test_suite(this);
        1: 2989-block  0
call    0 returned 1
        -: 2990:
        1: 2991:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2991-block  0
call    3 returned 1
call    4 returned 1
        -: 2992:
        -: 2993:  // Call both legacy and the new API
        1: 2994:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2995://  Legacy API is deprecated but still available
        -: 2996:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 2997:  repeater->OnTestCaseStart(*this);
        1: 2997-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2998:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2999:
        1: 3000:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3000-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3000-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3001:  internal::HandleExceptionsInMethodIfSupported(
        1: 3001-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3002:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3003:
        1: 3004:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 3004-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 3005:
        1: 3006:  start_timestamp_ = internal::GetTimeInMillis();
        1: 3006-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3007:  internal::Timer timer;
        1: 3007-block  0
call    0 returned 1
        4: 3008:  for (int i = 0; i < total_test_count(); i++) {
        4: 3008-block  0
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 3008-block  1
        3: 3009:    if (skip_all) {
        3: 3009-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####: 3010:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3010-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3011:    } else {
        3: 3012:      GetMutableTestInfo(i)->Run();
        3: 3012-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 3012-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -: 3013:    }
       3*: 3014:    if (GTEST_FLAG_GET(fail_fast) &&
        3: 3014-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 3014-block  1
        3: 3014-block  2
        3: 3014-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    #####: 3015:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3015-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3015-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3015-block  2
branch  7 never executed
branch  8 never executed
    #####: 3016:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3016-block  0
    %%%%%: 3016-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3016-block  2
    #####: 3017:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3017-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3017-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3018:      }
    #####: 3019:      break;
    %%%%%: 3019-block  0
        -: 3020:    }
        -: 3021:  }
        1: 3022:  elapsed_time_ = timer.Elapsed();
        1: 3022-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3023:
        1: 3024:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3024-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3024-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3025:  internal::HandleExceptionsInMethodIfSupported(
        1: 3025-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3026:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3027:
        -: 3028:  // Call both legacy and the new API
        1: 3029:  repeater->OnTestSuiteEnd(*this);
        1: 3029-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3030://  Legacy API is deprecated but still available
        -: 3031:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3032:  repeater->OnTestCaseEnd(*this);
        1: 3032-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3033:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3034:
        1: 3035:  impl->set_current_test_suite(nullptr);
        1: 3035-block  0
call    0 returned 1
        -: 3036:}
        -: 3037:
        -: 3038:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3039:void TestSuite::Skip() {
    #####: 3040:  if (!should_run_) return;
    %%%%%: 3040-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3040-block  1
        -: 3041:
    #####: 3042:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3042-block  0
call    0 never executed
    #####: 3043:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3044:
    #####: 3045:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3046:
        -: 3047:  // Call both legacy and the new API
    #####: 3048:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3049://  Legacy API is deprecated but still available
        -: 3050:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3051:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3052:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3053:
    #####: 3054:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3054-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3055:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3055-block  0
call    0 never executed
call    1 never executed
        -: 3056:  }
        -: 3057:
        -: 3058:  // Call both legacy and the new API
    #####: 3059:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3059-block  0
call    0 never executed
        -: 3060:  // Legacy API is deprecated but still available
        -: 3061:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3062:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3063:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3064:
    #####: 3065:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3066:}
        -: 3067:
        -: 3068:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3069:void TestSuite::ClearResult() {
        1: 3070:  ad_hoc_test_result_.Clear();
        1: 3070-block  0
call    0 returned 1
        1: 3071:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3072:}
        -: 3073:
        -: 3074:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3075:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3076:  Shuffle(random, &test_indices_);
    %%%%%: 3076-block  0
call    0 never executed
    #####: 3077:}
        -: 3078:
        -: 3079:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3080:void TestSuite::UnshuffleTests() {
        4: 3081:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3081-block  0
        4: 3081-block  1
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 3082:    test_indices_[i] = static_cast<int>(i);
        3: 3082-block  0
call    0 returned 3
        -: 3083:  }
        1: 3084:}
        -: 3085:
        -: 3086:// Formats a countable noun.  Depending on its quantity, either the
        -: 3087:// singular form or the plural form is used. e.g.
        -: 3088://
        -: 3089:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3090:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 71%
        7: 3091:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3092:                                       const char* plural_form) {
       14: 3093:  return internal::StreamableToString(count) + " " +
        7: 3093-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3093-block  1
call    4 returned 7
call    5 returned 7
    $$$$$: 3093-block  2
call    6 never executed
    $$$$$: 3093-block  3
    $$$$$: 3093-block  4
call    7 never executed
       21: 3094:         (count == 1 ? singular_form : plural_form);
        7: 3094-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2: 3094-block  1
        5: 3094-block  2
        7: 3094-block  3
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7: 3094-block  4
        -: 3095:}
        -: 3096:
        -: 3097:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3098:static std::string FormatTestCount(int test_count) {
        3: 3099:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3099-block  0
call    0 returned 3
        -: 3100:}
        -: 3101:
        -: 3102:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3103:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3104:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3104-block  0
call    0 returned 2
        -: 3105:}
        -: 3106:
        -: 3107:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3108:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3109:// to "Failure", as the user usually doesn't care about the difference
        -: 3110:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3111:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3112:  switch (type) {
    %%%%%: 3112-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3113:    case TestPartResult::kSkip:
    #####: 3114:      return "Skipped\n";
    %%%%%: 3114-block  0
    #####: 3115:    case TestPartResult::kSuccess:
    #####: 3116:      return "Success";
    %%%%%: 3116-block  0
        -: 3117:
    #####: 3118:    case TestPartResult::kNonFatalFailure:
        -: 3119:    case TestPartResult::kFatalFailure:
        -: 3120:#ifdef _MSC_VER
        -: 3121:      return "error: ";
        -: 3122:#else
    #####: 3123:      return "Failure\n";
    %%%%%: 3123-block  0
        -: 3124:#endif
    #####: 3125:    default:
    #####: 3126:      return "Unknown result type";
    %%%%%: 3126-block  0
        -: 3127:  }
        -: 3128:}
        -: 3129:
        -: 3130:namespace internal {
        -: 3131:namespace {
        -: 3132:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3133:}  // namespace
        -: 3134:
        -: 3135:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3136:static std::string PrintTestPartResultToString(
        -: 3137:    const TestPartResult& test_part_result) {
    #####: 3138:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3138-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3138-block  1
call    7 never executed
    $$$$$: 3138-block  2
    $$$$$: 3138-block  3
call    8 never executed
        -: 3139:                           test_part_result.file_name(),
    #####: 3140:                           test_part_result.line_number())
    %%%%%: 3140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3141:                    << " "
    %%%%%: 3141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3142:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3142-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3142-block  1
    #####: 3143:                    << test_part_result.message())
    %%%%%: 3143-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3143-block  1
call    4 never executed
    $$$$$: 3143-block  2
    #####: 3144:      .GetString();
    %%%%%: 3144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3144-block  1
        -: 3145:}
        -: 3146:
        -: 3147:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3148:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3149:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3149-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3149-block  1
call    3 never executed
    $$$$$: 3149-block  2
call    4 never executed
    #####: 3150:  printf("%s\n", result.c_str());
    %%%%%: 3150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3151:  fflush(stdout);
    %%%%%: 3151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3152:  // If the test program runs in Visual Studio or a debugger, the
        -: 3153:  // following statements add the test part result message to the Output
        -: 3154:  // window such that the user can double-click on it to jump to the
        -: 3155:  // corresponding source code location; otherwise they do nothing.
        -: 3156:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3157:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3158:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3159:  // want the same message printed twice.
        -: 3160:  ::OutputDebugStringA(result.c_str());
        -: 3161:  ::OutputDebugStringA("\n");
        -: 3162:#endif
    #####: 3163:}
        -: 3164:
        -: 3165:// class PrettyUnitTestResultPrinter
        -: 3166:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3167:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3168:
        -: 3169:// Returns the character attribute for the given color.
        -: 3170:static WORD GetColorAttribute(GTestColor color) {
        -: 3171:  switch (color) {
        -: 3172:    case GTestColor::kRed:
        -: 3173:      return FOREGROUND_RED;
        -: 3174:    case GTestColor::kGreen:
        -: 3175:      return FOREGROUND_GREEN;
        -: 3176:    case GTestColor::kYellow:
        -: 3177:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3178:    default:
        -: 3179:      return 0;
        -: 3180:  }
        -: 3181:}
        -: 3182:
        -: 3183:static int GetBitOffset(WORD color_mask) {
        -: 3184:  if (color_mask == 0) return 0;
        -: 3185:
        -: 3186:  int bitOffset = 0;
        -: 3187:  while ((color_mask & 1) == 0) {
        -: 3188:    color_mask >>= 1;
        -: 3189:    ++bitOffset;
        -: 3190:  }
        -: 3191:  return bitOffset;
        -: 3192:}
        -: 3193:
        -: 3194:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3195:  // Let's reuse the BG
        -: 3196:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3197:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3198:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3199:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3200:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3201:
        -: 3202:  WORD new_color =
        -: 3203:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3204:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3205:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3206:
        -: 3207:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3208:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3209:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3210:  }
        -: 3211:  return new_color;
        -: 3212:}
        -: 3213:
        -: 3214:#else
        -: 3215:
        -: 3216:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3217:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3218:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3219:  switch (color) {
    %%%%%: 3219-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3220:    case GTestColor::kRed:
    #####: 3221:      return "1";
    %%%%%: 3221-block  0
    #####: 3222:    case GTestColor::kGreen:
    #####: 3223:      return "2";
    %%%%%: 3223-block  0
    #####: 3224:    case GTestColor::kYellow:
    #####: 3225:      return "3";
    %%%%%: 3225-block  0
    #####: 3226:    default:
    #####: 3227:      return nullptr;
    %%%%%: 3227-block  0
        -: 3228:  }
        -: 3229:}
        -: 3230:
        -: 3231:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3232:
        -: 3233:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 37%
        1: 3234:bool ShouldUseColor(bool stdout_is_tty) {
        2: 3235:  std::string c = GTEST_FLAG_GET(color);
        1: 3235-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3235-block  1
call    3 returned 1
        1: 3236:  const char* const gtest_color = c.c_str();
        1: 3236-block  0
call    0 returned 1
        -: 3237:
        1: 3238:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3239:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3240:    // On Windows the TERM variable is usually not set, but the
        -: 3241:    // console there does support colors.
        -: 3242:    return stdout_is_tty;
        -: 3243:#else
        -: 3244:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3245:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3245-block  0
call    0 never executed
        -: 3246:    const bool term_supports_color =
    #####: 3247:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3248:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3249:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3250:        String::CStringEquals(term, "screen") ||
    %%%%%: 3250-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3251:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3251-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3252:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3253:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3253-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3254:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3255:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3255-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3256:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3256-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3256-block  1
    %%%%%: 3256-block  2
    #####: 3257:        String::CStringEquals(term, "cygwin");
    %%%%%: 3257-block  0
call    0 never executed
    #####: 3258:    return stdout_is_tty && term_supports_color;
    %%%%%: 3258-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3258-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3258-block  2
    %%%%%: 3258-block  3
    %%%%%: 3258-block  4
        -: 3259:#endif  // GTEST_OS_WINDOWS
        -: 3260:  }
        -: 3261:
        2: 3262:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3263:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3263-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 3264:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3264-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3264-block  1
        1: 3264-block  2
        2: 3265:         String::CStringEquals(gtest_color, "1");
        1: 3265-block  0
call    0 returned 1
        1: 3265-block  1
        -: 3266:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3267:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3268:  // be conservative.
        -: 3269:}
        -: 3270:
        -: 3271:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3272:// cannot simply emit special characters and have the terminal change colors.
        -: 3273:// This routine must actually emit the characters rather than return a string
        -: 3274:// that would be colored when printed, as can be done on Linux.
        -: 3275:
        -: 3276:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 13 returned 100% blocks executed 58%
       13: 3277:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3278:  va_list args;
       13: 3279:  va_start(args, fmt);
        -: 3280:
        -: 3281:  static const bool in_color_mode =
       13: 3282:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       13: 3282-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        1: 3282-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3282-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3282-block  3
call   10 returned 1
    $$$$$: 3282-block  4
branch 11 never executed
branch 12 never executed
    $$$$$: 3282-block  5
call   13 never executed
      13*: 3283:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       13: 3283-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    %%%%%: 3283-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3283-block  2
       13: 3283-block  3
        -: 3284:
       13: 3285:  if (!use_color) {
       13: 3285-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13: 3286:    vprintf(fmt, args);
       13: 3286-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13: 3287:    va_end(args);
       13: 3288:    return;
       13: 3288-block  0
        -: 3289:  }
        -: 3290:
        -: 3291:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3292:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3293:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3294:
        -: 3295:  // Gets the current text color.
        -: 3296:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3297:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3298:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3299:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3300:
        -: 3301:  // We need to flush the stream buffers into the console before each
        -: 3302:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3303:  // printed but has not yet reached the console.
        -: 3304:  fflush(stdout);
        -: 3305:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3306:
        -: 3307:  vprintf(fmt, args);
        -: 3308:
        -: 3309:  fflush(stdout);
        -: 3310:  // Restores the text color.
        -: 3311:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3312:#else
    #####: 3313:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3313-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3314:  vprintf(fmt, args);
    %%%%%: 3314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3315:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3316:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3317:  va_end(args);
    %%%%%: 3317-block  0
        -: 3318:}
        -: 3319:
        -: 3320:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3321:// output to label the type parameter and value parameter for a test.
        -: 3322:static const char kTypeParamLabel[] = "TypeParam";
        -: 3323:static const char kValueParamLabel[] = "GetParam()";
        -: 3324:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3325:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3326:  const char* const type_param = test_info.type_param();
    %%%%%: 3326-block  0
call    0 never executed
    #####: 3327:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3328:
    #####: 3329:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3329-block  0
branch  2 never executed
branch  3 never executed
    #####: 3330:    printf(", where ");
    %%%%%: 3330-block  0
call    0 never executed
    #####: 3331:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3332:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3332-block  0
call    0 never executed
    #####: 3333:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3333-block  0
call    2 never executed
        -: 3334:    }
    #####: 3335:    if (value_param != nullptr) {
    %%%%%: 3335-block  0
branch  0 never executed
branch  1 never executed
    #####: 3336:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3336-block  0
call    0 never executed
        -: 3337:    }
        -: 3338:  }
    #####: 3339:}
        -: 3340:
        -: 3341:// This class implements the TestEventListener interface.
        -: 3342://
        -: 3343:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3344:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3345: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 3346:  PrettyUnitTestResultPrinter() {}
        1: 3346-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 6 returned 100% blocks executed 100%
        6: 3347:  static void PrintTestName(const char* test_suite, const char* test) {
        6: 3348:    printf("%s.%s", test_suite, test);
        6: 3348-block  0
call    0 returned 6
        6: 3349:  }
        -: 3350:
        -: 3351:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3352:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3353:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3354:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3355:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3356:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3357:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3358:#else
        -: 3359:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3360:#endif  // OnTestCaseStart
        -: 3361:
        -: 3362:  void OnTestStart(const TestInfo& test_info) override;
        -: 3363:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3364:
        -: 3365:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3366:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3367:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3368:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3369:#else
        -: 3370:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3371:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3372:
        -: 3373:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3374:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3375:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3376:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3377:
        -: 3378: private:
        -: 3379:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3380:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3381:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3382:};
        -: 3383:
        -: 3384:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 59%
        1: 3385:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3386:    const UnitTest& unit_test, int iteration) {
        1: 3387:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3387-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3388:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3388-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3389:
        2: 3390:  std::string f = GTEST_FLAG_GET(filter);
        1: 3390-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3390-block  1
call    3 returned 1
    $$$$$: 3390-block  2
call    4 never executed
        1: 3391:  const char* const filter = f.c_str();
        1: 3391-block  0
call    0 returned 1
        -: 3392:
        -: 3393:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3394:  // tests may be skipped.
        1: 3395:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3396:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3396-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3397:                  filter);
        -: 3398:  }
        -: 3399:
        1: 3400:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3400-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3400-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3401:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3402:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3402-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3403:                  static_cast<int>(shard_index) + 1,
        -: 3404:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3405:  }
        -: 3406:
        1: 3407:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3407-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3408:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3408-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3409:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3410:                  unit_test.random_seed());
        -: 3411:  }
        -: 3412:
        1: 3413:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3413-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3414:  printf("Running %s from %s.\n",
        1: 3414-block  0
call    0 returned 1
        1: 3414-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3415:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3415-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3415-block  1
call    6 returned 1
    $$$$$: 3415-block  2
call    7 never executed
    $$$$$: 3415-block  3
        2: 3416:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3416-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3416-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3416-block  2
call    7 never executed
    $$$$$: 3416-block  3
        1: 3417:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3418:}
        -: 3419:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3420:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3421:    const UnitTest& /*unit_test*/) {
        1: 3422:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3422-block  0
call    0 returned 1
        1: 3423:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3424:  fflush(stdout);
call    0 returned 1
        1: 3425:}
        -: 3426:
        -: 3427:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 76%
        1: 3428:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3429:  const std::string counts =
        2: 3430:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3430-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3430-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3430-block  2
call    6 returned 1
    $$$$$: 3430-block  3
call    7 never executed
        1: 3431:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3431-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3432:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3432-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3433:  if (test_case.type_param() == nullptr) {
        1: 3433-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3434:    printf("\n");
        1: 3434-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3435:  } else {
    #####: 3436:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3436-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3437:  }
        1: 3438:  fflush(stdout);
        1: 3438-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3439:}
        -: 3440:#else
        -: 3441:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3442:    const TestSuite& test_suite) {
        -: 3443:  const std::string counts =
        -: 3444:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3445:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3446:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3447:  if (test_suite.type_param() == nullptr) {
        -: 3448:    printf("\n");
        -: 3449:  } else {
        -: 3450:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3451:  }
        -: 3452:  fflush(stdout);
        -: 3453:}
        -: 3454:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3455:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 3 returned 100% blocks executed 100%
        3: 3456:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
        3: 3457:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
        3: 3457-block  0
call    0 returned 3
        3: 3458:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 3
call    1 returned 3
call    2 returned 3
        3: 3459:  printf("\n");
call    0 returned 3
        3: 3460:  fflush(stdout);
call    0 returned 3
        3: 3461:}
        -: 3462:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3463:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3464:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3464-block  0
call    0 never executed
    #####: 3465:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3466:  printf("\n");
call    0 never executed
    #####: 3467:  fflush(stdout);
call    0 never executed
    #####: 3468:}
        -: 3469:
        -: 3470:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3471:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3472:    const TestPartResult& result) {
    #####: 3473:  switch (result.type()) {
    %%%%%: 3473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3474:    // If the test part succeeded, we don't need to do anything.
    #####: 3475:    case TestPartResult::kSuccess:
    #####: 3476:      return;
    %%%%%: 3476-block  0
    #####: 3477:    default:
        -: 3478:      // Print failure message from the assertion
        -: 3479:      // (e.g. expected this and got that).
    #####: 3480:      PrintTestPartResult(result);
    %%%%%: 3480-block  0
call    0 never executed
    #####: 3481:      fflush(stdout);
call    0 never executed
        -: 3482:  }
        -: 3483:}
        -: 3484:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 3 returned 100% blocks executed 68%
        3: 3485:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
        3: 3486:  if (test_info.result()->Passed()) {
        3: 3486-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 3487:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
        3: 3487-block  0
call    0 returned 3
    #####: 3488:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3488-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3489:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3489-block  0
call    0 never executed
        -: 3490:  } else {
    #####: 3491:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3491-block  0
call    0 never executed
        -: 3492:  }
        3: 3493:  PrintTestName(test_info.test_suite_name(), test_info.name());
        3: 3493-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
       3*: 3494:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 3
call    1 returned 3
branch  2 taken 0 (fallthrough)
branch  3 taken 3
    %%%%%: 3494-block  0
call    4 never executed
        -: 3495:
        3: 3496:  if (GTEST_FLAG_GET(print_time)) {
        3: 3496-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3497:    printf(" (%s ms)\n",
        3: 3497-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        6: 3498:           internal::StreamableToString(test_info.result()->elapsed_time())
        3: 3498-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3: 3498-block  1
call    5 returned 3
    $$$$$: 3498-block  2
call    6 never executed
    $$$$$: 3498-block  3
        -: 3499:               .c_str());
        -: 3500:  } else {
    #####: 3501:    printf("\n");
    %%%%%: 3501-block  0
call    0 never executed
        -: 3502:  }
        3: 3503:  fflush(stdout);
        3: 3503-block  0
call    0 returned 3
        3: 3504:}
        -: 3505:
        -: 3506:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 70%
        1: 3507:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3508:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3508-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3508-block  1
        -: 3509:
        -: 3510:  const std::string counts =
        2: 3511:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3511-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3511-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3511-block  2
call    6 returned 1
    $$$$$: 3511-block  3
call    7 never executed
        1: 3512:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3512-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3513:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3513-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3514:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3514-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3514-block  1
call    4 returned 1
    $$$$$: 3514-block  2
call    5 never executed
    $$$$$: 3514-block  3
    $$$$$: 3514-block  4
        1: 3515:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3516:}
        -: 3517:#else
        -: 3518:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3519:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3520:
        -: 3521:  const std::string counts =
        -: 3522:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3523:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3524:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3525:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3526:  fflush(stdout);
        -: 3527:}
        -: 3528:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3529:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3530:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3531:    const UnitTest& /*unit_test*/) {
        1: 3532:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3532-block  0
call    0 returned 1
        1: 3533:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3534:  fflush(stdout);
call    0 returned 1
        1: 3535:}
        -: 3536:
        -: 3537:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3538:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3539:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3539-block  0
call    0 never executed
    #####: 3540:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3541:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3541-block  0
call    5 never executed
    $$$$$: 3541-block  1
call    6 never executed
        -: 3542:
    #####: 3543:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3543-block  1
    #####: 3544:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3544-block  0
call    0 never executed
    #####: 3545:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3545-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3545-block  1
    %%%%%: 3545-block  2
    %%%%%: 3545-block  3
branch  6 never executed
branch  7 never executed
    #####: 3546:      continue;
    %%%%%: 3546-block  0
        -: 3547:    }
    #####: 3548:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3548-block  0
    %%%%%: 3548-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3548-block  2
    #####: 3549:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3549-block  0
call    0 never executed
    #####: 3550:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3550-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3550-block  1
    %%%%%: 3550-block  2
    %%%%%: 3550-block  3
branch  7 never executed
branch  8 never executed
    #####: 3551:        continue;
    %%%%%: 3551-block  0
        -: 3552:      }
    #####: 3553:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3553-block  0
call    0 never executed
    #####: 3554:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3555:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3556:      printf("\n");
call    0 never executed
        -: 3557:    }
        -: 3558:  }
    #####: 3559:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3559-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3559-block  1
    %%%%%: 3559-block  2
    %%%%%: 3559-block  3
call    2 never executed
        -: 3560:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3561:}
        -: 3562:
        -: 3563:// Internal helper for printing the list of test suite failures not covered by
        -: 3564:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3565:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3566:    const UnitTest& unit_test) {
    #####: 3567:  int suite_failure_count = 0;
    #####: 3568:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3568-block  0
    %%%%%: 3568-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3568-block  2
    #####: 3569:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3569-block  0
call    0 never executed
    #####: 3570:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3571:      continue;
    %%%%%: 3571-block  0
        -: 3572:    }
    #####: 3573:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3573-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3574:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3574-block  0
call    0 never executed
    #####: 3575:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3576:      ++suite_failure_count;
        -: 3577:    }
        -: 3578:  }
    #####: 3579:  if (suite_failure_count > 0) {
    %%%%%: 3579-block  0
branch  0 never executed
branch  1 never executed
    #####: 3580:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3580-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3580-block  1
    %%%%%: 3580-block  2
    %%%%%: 3580-block  3
call    2 never executed
        -: 3581:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3582:  }
    #####: 3583:}
        -: 3584:
        -: 3585:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3586:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3587:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3587-block  0
call    0 never executed
    #####: 3588:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3589:    return;
    %%%%%: 3589-block  0
        -: 3590:  }
        -: 3591:
    #####: 3592:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3592-block  0
    %%%%%: 3592-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3592-block  2
    #####: 3593:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3593-block  0
call    0 never executed
    #####: 3594:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3594-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3594-block  1
    %%%%%: 3594-block  2
    %%%%%: 3594-block  3
branch  6 never executed
branch  7 never executed
    #####: 3595:      continue;
    %%%%%: 3595-block  0
        -: 3596:    }
    #####: 3597:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3597-block  0
    %%%%%: 3597-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3597-block  2
    #####: 3598:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3598-block  0
call    0 never executed
    #####: 3599:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3599-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3599-block  1
    %%%%%: 3599-block  2
    %%%%%: 3599-block  3
branch  7 never executed
branch  8 never executed
    #####: 3600:        continue;
    %%%%%: 3600-block  0
        -: 3601:      }
    #####: 3602:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3602-block  0
call    0 never executed
    #####: 3603:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3604:      printf("\n");
call    0 never executed
        -: 3605:    }
        -: 3606:  }
        -: 3607:}
        -: 3608:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3609:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3610:                                                     int /*iteration*/) {
        1: 3611:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3611-block  0
call    0 returned 1
        2: 3612:  printf("%s from %s ran.",
call    0 returned 1
        1: 3612-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3613:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3613-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3613-block  1
call    6 returned 1
    $$$$$: 3613-block  2
call    7 never executed
    $$$$$: 3613-block  3
        2: 3614:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3614-block  0
call    3 never executed
    $$$$$: 3614-block  1
call    4 never executed
        1: 3615:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3616:    printf(" (%s ms total)",
        1: 3616-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3617:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3617-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3617-block  1
call    4 returned 1
    $$$$$: 3617-block  2
call    5 never executed
    $$$$$: 3617-block  3
    $$$$$: 3617-block  4
call    6 never executed
        -: 3618:  }
        1: 3619:  printf("\n");
        1: 3619-block  0
call    0 returned 1
        1: 3620:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3621:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3621-block  0
call    6 returned 1
    $$$$$: 3621-block  1
call    7 never executed
    $$$$$: 3621-block  2
call    8 never executed
        -: 3622:
        1: 3623:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3624:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3625:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3625-block  0
call    0 never executed
    #####: 3626:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3626-block  0
call    5 never executed
    $$$$$: 3626-block  1
call    6 never executed
    #####: 3627:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3628:  }
        -: 3629:
        1: 3630:  if (!unit_test.Passed()) {
        1: 3630-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3631:    PrintFailedTests(unit_test);
    %%%%%: 3631-block  0
call    0 never executed
    #####: 3632:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3633:  }
        -: 3634:
        1: 3635:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3635-block  0
call    0 returned 1
       1*: 3636:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3636-block  0
branch  2 never executed
branch  3 never executed
    #####: 3637:    if (unit_test.Passed()) {
    %%%%%: 3637-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3638:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3638-block  0
call    0 never executed
        -: 3639:    }
    #####: 3640:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3640-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3640-block  1
    %%%%%: 3640-block  2
    %%%%%: 3640-block  3
call    2 never executed
        -: 3641:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3642:  }
        -: 3643:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3644:  fflush(stdout);
        1: 3644-block  0
call    0 returned 1
        1: 3645:}
        -: 3646:
        -: 3647:// End PrettyUnitTestResultPrinter
        -: 3648:
        -: 3649:// This class implements the TestEventListener interface.
        -: 3650://
        -: 3651:// Class BriefUnitTestResultPrinter is copyable.
        -: 3652:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3653: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3654:  BriefUnitTestResultPrinter() {}
    %%%%%: 3654-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3655:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3656:    printf("%s.%s", test_suite, test);
    %%%%%: 3656-block  0
call    0 never executed
    #####: 3657:  }
        -: 3658:
        -: 3659:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3660:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3661:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3662:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3663:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3664:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3665:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3666:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3667:#else
        -: 3668:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3669:#endif  // OnTestCaseStart
        -: 3670:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3671:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3672:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3673:
        -: 3674:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3675:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3676:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3677:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3678:#else
        -: 3679:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3680:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3681:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3682:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3683:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3684:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3685:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3686:};
        -: 3687:
        -: 3688:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3689:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3690:    const TestPartResult& result) {
    #####: 3691:  switch (result.type()) {
    %%%%%: 3691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3692:    // If the test part succeeded, we don't need to do anything.
    #####: 3693:    case TestPartResult::kSuccess:
    #####: 3694:      return;
    %%%%%: 3694-block  0
    #####: 3695:    default:
        -: 3696:      // Print failure message from the assertion
        -: 3697:      // (e.g. expected this and got that).
    #####: 3698:      PrintTestPartResult(result);
    %%%%%: 3698-block  0
call    0 never executed
    #####: 3699:      fflush(stdout);
call    0 never executed
        -: 3700:  }
        -: 3701:}
        -: 3702:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3703:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3704:  if (test_info.result()->Failed()) {
    %%%%%: 3704-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3705:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3705-block  0
call    0 never executed
    #####: 3706:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3707:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3708:
    #####: 3709:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3710:      printf(" (%s ms)\n",
    %%%%%: 3710-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3711:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3711-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3711-block  1
call    5 never executed
    $$$$$: 3711-block  2
call    6 never executed
    $$$$$: 3711-block  3
        -: 3712:                 .c_str());
        -: 3713:    } else {
    #####: 3714:      printf("\n");
    %%%%%: 3714-block  0
call    0 never executed
        -: 3715:    }
    #####: 3716:    fflush(stdout);
    %%%%%: 3716-block  0
call    0 never executed
        -: 3717:  }
    #####: 3718:}
    %%%%%: 3718-block  0
        -: 3719:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3720:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3721:                                                    int /*iteration*/) {
    #####: 3722:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3722-block  0
call    0 never executed
    #####: 3723:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3723-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3724:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3724-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3724-block  1
call    6 never executed
    $$$$$: 3724-block  2
call    7 never executed
    $$$$$: 3724-block  3
    #####: 3725:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3725-block  0
call    3 never executed
    $$$$$: 3725-block  1
call    4 never executed
    #####: 3726:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3727:    printf(" (%s ms total)",
    %%%%%: 3727-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3728:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3728-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3728-block  1
call    4 never executed
    $$$$$: 3728-block  2
call    5 never executed
    $$$$$: 3728-block  3
    $$$$$: 3728-block  4
call    6 never executed
        -: 3729:  }
    #####: 3730:  printf("\n");
    %%%%%: 3730-block  0
call    0 never executed
    #####: 3731:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3732:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3732-block  0
call    6 never executed
    $$$$$: 3732-block  1
call    7 never executed
    $$$$$: 3732-block  2
call    8 never executed
        -: 3733:
    #####: 3734:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3735:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3736:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3736-block  0
call    0 never executed
    #####: 3737:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3737-block  0
call    5 never executed
    $$$$$: 3737-block  1
call    6 never executed
        -: 3738:  }
        -: 3739:
    #####: 3740:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3740-block  0
call    0 never executed
    #####: 3741:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3741-block  0
branch  2 never executed
branch  3 never executed
    #####: 3742:    if (unit_test.Passed()) {
    %%%%%: 3742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3743:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3743-block  0
call    0 never executed
        -: 3744:    }
    #####: 3745:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3745-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3745-block  1
    %%%%%: 3745-block  2
    %%%%%: 3745-block  3
call    2 never executed
        -: 3746:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3747:  }
        -: 3748:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3749:  fflush(stdout);
    %%%%%: 3749-block  0
call    0 never executed
    #####: 3750:}
        -: 3751:
        -: 3752:// End BriefUnitTestResultPrinter
        -: 3753:
        -: 3754:// class TestEventRepeater
        -: 3755://
        -: 3756:// This class forwards events to other event listeners.
        -: 3757:class TestEventRepeater : public TestEventListener {
        -: 3758: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 3759:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3759-block  0
call    0 returned 1
call    1 returned 1
        -: 3760:  ~TestEventRepeater() override;
        -: 3761:  void Append(TestEventListener* listener);
        -: 3762:  TestEventListener* Release(TestEventListener* listener);
        -: 3763:
        -: 3764:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3765:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3766:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3766-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3767:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3768:
        -: 3769:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3770:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3771:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3772:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3773://  Legacy API is deprecated but still available
        -: 3774:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3775:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3776:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3777:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3778:  void OnTestStart(const TestInfo& test_info) override;
        -: 3779:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3780:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3781:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3782://  Legacy API is deprecated but still available
        -: 3783:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3784:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3785:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3786:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3787:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3788:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3789:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3790:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3791:
        -: 3792: private:
        -: 3793:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3794:  // in death test child processes.
        -: 3795:  bool forwarding_enabled_;
        -: 3796:  // The list of listeners that receive events.
        -: 3797:  std::vector<TestEventListener*> listeners_;
        -: 3798:
        -: 3799:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3800:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3801:};
        -: 3802:
        2: 3803:TestEventRepeater::~TestEventRepeater() {
        1: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3805:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 3803:TestEventRepeater::~TestEventRepeater() {
        -: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3805:}
        1: 3805-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        1: 3803:TestEventRepeater::~TestEventRepeater() {
call    0 returned 1
call    1 returned 1
        1: 3804:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3804-block  0
call    0 returned 1
        1: 3805:}
------------------
        -: 3806:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3807:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3808:  listeners_.push_back(listener);
        1: 3808-block  0
call    0 returned 1
        1: 3809:}
        -: 3810:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3811:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3812:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3812-block  0
        1: 3812-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3812-block  2
    #####: 3813:    if (listeners_[i] == listener) {
    %%%%%: 3813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3814:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3814-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3814-block  1
    $$$$$: 3814-block  2
    #####: 3815:      return listener;
    %%%%%: 3815-block  0
        -: 3816:    }
        -: 3817:  }
        -: 3818:
        1: 3819:  return nullptr;
        1: 3819-block  0
        -: 3820:}
        -: 3821:
        -: 3822:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3823:// This defines a member that forwards the call to all listeners.
        -: 3824:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3825:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3826:    if (forwarding_enabled_) {                          \
        -: 3827:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3828:        listeners_[i]->Name(parameter);                 \
        -: 3829:      }                                                 \
        -: 3830:    }                                                   \
        -: 3831:  }
        -: 3832:// This defines a member that forwards the call to all listeners in reverse
        -: 3833:// order.
        -: 3834:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3835:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3836:    if (forwarding_enabled_) {                          \
        -: 3837:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3838:        listeners_[i - 1]->Name(parameter);             \
        -: 3839:      }                                                 \
        -: 3840:    }                                                   \
        -: 3841:  }
        -: 3842:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3843:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3843-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3843-block  1
        2: 3843-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3843-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3844:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3844-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3844-block  1
        2: 3844-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3844-block  3
call    5 returned 1
call    6 returned 1
        -: 3845://  Legacy API is deprecated but still available
        -: 3846:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3847:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3847-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3847-block  1
        2: 3847-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3847-block  3
call    5 returned 1
call    6 returned 1
        -: 3848:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3849:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3849-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3849-block  1
        2: 3849-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3849-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 3 returned 100% blocks executed 100%
        6: 3850:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
        3: 3850-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3850-block  1
        6: 3850-block  2
call    2 returned 6
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3: 3850-block  3
call    5 returned 3
call    6 returned 3
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3851:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3851-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3851-block  1
    %%%%%: 3851-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3851-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3852:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3852-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3852-block  1
    %%%%%: 3852-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3852-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3853:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3853-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3853-block  1
        2: 3853-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3853-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3854:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3854-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3854-block  1
call    2 returned 1
        2: 3854-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3854-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3855:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3855-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3855-block  1
call    2 returned 1
        2: 3855-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3855-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 3 returned 100% blocks executed 100%
        6: 3856:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
        3: 3856-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 3856-block  1
call    2 returned 3
        6: 3856-block  2
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3: 3856-block  3
call    5 returned 3
call    6 returned 3
        -: 3857://  Legacy API is deprecated but still available
        -: 3858:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3859:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3859-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3859-block  1
call    2 returned 1
        2: 3859-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3859-block  3
call    5 returned 1
call    6 returned 1
        -: 3860:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3861:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3861-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3861-block  1
call    2 returned 1
        2: 3861-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3861-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3862:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3862-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3862-block  1
call    2 returned 1
        2: 3862-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3862-block  3
call    5 returned 1
call    6 returned 1
        -: 3863:
        -: 3864:#undef GTEST_REPEATER_METHOD_
        -: 3865:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3866:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3867:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3868:                                             int iteration) {
        1: 3869:  if (forwarding_enabled_) {
        1: 3869-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3870:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3870-block  0
        2: 3870-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3871:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3871-block  0
call    0 returned 1
call    1 returned 1
        -: 3872:    }
        -: 3873:  }
        1: 3874:}
        -: 3875:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3876:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3877:                                           int iteration) {
        1: 3878:  if (forwarding_enabled_) {
        1: 3878-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3879:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3879-block  0
call    0 returned 1
        2: 3879-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3880:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3880-block  0
call    0 returned 1
call    1 returned 1
        -: 3881:    }
        -: 3882:  }
        1: 3883:}
        -: 3884:
        -: 3885:// End TestEventRepeater
        -: 3886:
        -: 3887:// This class generates an XML output file.
        -: 3888:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3889: public:
        -: 3890:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3891:
        -: 3892:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3893:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3894:
        -: 3895:  // Prints an XML summary of all unit tests.
        -: 3896:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3897:                                const std::vector<TestSuite*>& test_suites);
        -: 3898:
        -: 3899: private:
        -: 3900:  // Is c a whitespace character that is normalized to a space character
        -: 3901:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3902:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3903:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3903-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3903-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3903-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3903-block  3
    %%%%%: 3903-block  4
    %%%%%: 3903-block  5
        -: 3904:  }
        -: 3905:
        -: 3906:  // May c appear in a well-formed XML document?
        -: 3907:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3908:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3909:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3909-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3909-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3909-block  2
    %%%%%: 3909-block  3
    %%%%%: 3909-block  4
        -: 3910:  }
        -: 3911:
        -: 3912:  // Returns an XML-escaped copy of the input string str.  If
        -: 3913:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3914:  // value, and normalizable whitespace is preserved by replacing it
        -: 3915:  // with character references.
        -: 3916:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3917:
        -: 3918:  // Returns the given string with all characters invalid in XML removed.
        -: 3919:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3920:
        -: 3921:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3922:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3923:    return EscapeXml(str, true);
    %%%%%: 3923-block  0
call    0 never executed
        -: 3924:  }
        -: 3925:
        -: 3926:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3927:  static std::string EscapeXmlText(const char* str) {
        -: 3928:    return EscapeXml(str, false);
        -: 3929:  }
        -: 3930:
        -: 3931:  // Verifies that the given attribute belongs to the given element and
        -: 3932:  // streams the attribute as XML.
        -: 3933:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3934:                                 const std::string& element_name,
        -: 3935:                                 const std::string& name,
        -: 3936:                                 const std::string& value);
        -: 3937:
        -: 3938:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3939:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3940:
        -: 3941:  // Streams a test suite XML stanza containing the given test result.
        -: 3942:  //
        -: 3943:  // Requires: result.Failed()
        -: 3944:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3945:                                              const TestResult& result);
        -: 3946:
        -: 3947:  // Streams an XML representation of a TestResult object.
        -: 3948:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3949:                                  const TestResult& result);
        -: 3950:
        -: 3951:  // Streams an XML representation of a TestInfo object.
        -: 3952:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3953:                                const char* test_suite_name,
        -: 3954:                                const TestInfo& test_info);
        -: 3955:
        -: 3956:  // Prints an XML representation of a TestSuite object
        -: 3957:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3958:                                const TestSuite& test_suite);
        -: 3959:
        -: 3960:  // Prints an XML summary of unit_test to output stream out.
        -: 3961:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3962:                               const UnitTest& unit_test);
        -: 3963:
        -: 3964:  // Produces a string representing the test properties in a result as space
        -: 3965:  // delimited XML attributes based on the property key="value" pairs.
        -: 3966:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3967:  // to delimit this attribute from prior attributes.
        -: 3968:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3969:
        -: 3970:  // Streams an XML representation of the test properties of a TestResult
        -: 3971:  // object.
        -: 3972:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3973:                                      const TestResult& result);
        -: 3974:
        -: 3975:  // The output file.
        -: 3976:  const std::string output_file_;
        -: 3977:
        -: 3978:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 3979:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 3980:};
        -: 3981:
        -: 3982:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3983:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3984:    : output_file_(output_file) {
    %%%%%: 3984-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3984-block  1
call    5 never executed
    $$$$$: 3984-block  2
call    6 never executed
    $$$$$: 3984-block  3
    $$$$$: 3984-block  4
call    7 never executed
    $$$$$: 3984-block  5
call    8 never executed
    #####: 3985:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3986:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3986-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3986-block  2
call    7 never executed
    $$$$$: 3986-block  3
call    8 never executed
    $$$$$: 3986-block  4
        -: 3987:  }
    #####: 3988:}
    %%%%%: 3988-block  0
        -: 3989:
        -: 3990:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3991:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3992:                                                  int /*iteration*/) {
    #####: 3993:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3994:  std::stringstream stream;
    %%%%%: 3994-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3994-block  1
call    3 never executed
    $$$$$: 3994-block  2
call    4 never executed
    #####: 3995:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3996:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3996-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3996-block  2
call    7 never executed
    $$$$$: 3996-block  3
call    8 never executed
    $$$$$: 3996-block  4
    #####: 3997:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3998:}
        -: 3999:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4000:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4001:    const std::vector<TestSuite*>& test_suites) {
    #####: 4002:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4002-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4003:  std::stringstream stream;
    %%%%%: 4003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4003-block  1
call    3 never executed
    $$$$$: 4003-block  2
call    4 never executed
    #####: 4004:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4004-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4005:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4005-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4005-block  2
call    7 never executed
    $$$$$: 4005-block  3
call    8 never executed
    $$$$$: 4005-block  4
    #####: 4006:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4007:}
        -: 4008:
        -: 4009:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4010:// is true, the text is meant to appear as an attribute value, and
        -: 4011:// normalizable whitespace is preserved by replacing it with character
        -: 4012:// references.
        -: 4013://
        -: 4014:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4015:// It is expected that most, if not all, of the text processed by this
        -: 4016:// module will consist of ordinary English text.
        -: 4017:// If this module is ever modified to produce version 1.1 XML output,
        -: 4018:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4019:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4020:                                                bool is_attribute) {
    #####: 4021:  Message m;
    %%%%%: 4021-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4021-block  1
call    3 never executed
    $$$$$: 4021-block  2
call    4 never executed
        -: 4022:
    #####: 4023:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4023-block  0
    %%%%%: 4023-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4023-block  2
    #####: 4024:    const char ch = str[i];
    %%%%%: 4024-block  0
call    0 never executed
    #####: 4025:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4026:      case '<':
    #####: 4027:        m << "&lt;";
    %%%%%: 4027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4028:        break;
    %%%%%: 4028-block  0
    #####: 4029:      case '>':
    #####: 4030:        m << "&gt;";
    %%%%%: 4030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4031:        break;
    %%%%%: 4031-block  0
    #####: 4032:      case '&':
    #####: 4033:        m << "&amp;";
    %%%%%: 4033-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4034:        break;
    %%%%%: 4034-block  0
    #####: 4035:      case '\'':
    #####: 4036:        if (is_attribute)
    %%%%%: 4036-block  0
branch  0 never executed
branch  1 never executed
    #####: 4037:          m << "&apos;";
    %%%%%: 4037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4038:        else
    #####: 4039:          m << '\'';
    %%%%%: 4039-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4039-block  1
    $$$$$: 4039-block  2
    #####: 4040:        break;
    %%%%%: 4040-block  0
    #####: 4041:      case '"':
    #####: 4042:        if (is_attribute)
    %%%%%: 4042-block  0
branch  0 never executed
branch  1 never executed
    #####: 4043:          m << "&quot;";
    %%%%%: 4043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4044:        else
    #####: 4045:          m << '"';
    %%%%%: 4045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4045-block  1
    $$$$$: 4045-block  2
    #####: 4046:        break;
    %%%%%: 4046-block  0
    #####: 4047:      default:
    #####: 4048:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4048-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4049:          if (is_attribute &&
    %%%%%: 4049-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4049-block  1
    %%%%%: 4049-block  2
    %%%%%: 4049-block  3
branch  4 never executed
branch  5 never executed
    #####: 4050:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4050-block  0
call    0 never executed
    #####: 4051:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4051-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4051-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4051-block  3
call    9 never executed
    $$$$$: 4051-block  4
call   10 never executed
    $$$$$: 4051-block  5
    #####: 4052:              << ";";
    %%%%%: 4052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4053:          else
    #####: 4054:            m << ch;
    %%%%%: 4054-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4055:        }
    #####: 4056:        break;
    %%%%%: 4056-block  0
        -: 4057:    }
        -: 4058:  }
        -: 4059:
    #####: 4060:  return m.GetString();
    %%%%%: 4060-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4060-block  1
        -: 4061:}
        -: 4062:
        -: 4063:// Returns the given string with all characters invalid in XML removed.
        -: 4064:// Currently invalid characters are dropped from the string. An
        -: 4065:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4066:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4067:    const std::string& str) {
    #####: 4068:  std::string output;
    %%%%%: 4068-block  0
call    0 never executed
    #####: 4069:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4070:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4070-block  0
call    0 never executed
    %%%%%: 4070-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4070-block  2
call    5 never executed
    #####: 4071:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4071-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4072:      output.push_back(*it);
    %%%%%: 4072-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4073:
    #####: 4074:  return output;
    %%%%%: 4074-block  0
    %%%%%: 4074-block  1
        -: 4075:}
        -: 4076:
        -: 4077:// The following routines generate an XML representation of a UnitTest
        -: 4078:// object.
        -: 4079://
        -: 4080:// This is how Google Test concepts map to the DTD:
        -: 4081://
        -: 4082:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4083://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4084://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4085://       <failure message="...">...</failure>
        -: 4086://       <failure message="...">...</failure>
        -: 4087://       <failure message="...">...</failure>
        -: 4088://                                     <-- individual assertion failures
        -: 4089://     </testcase>
        -: 4090://   </testsuite>
        -: 4091:// </testsuites>
        -: 4092:
        -: 4093:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4094:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4095:  ::std::stringstream ss;
    %%%%%: 4095-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4095-block  1
call    3 never executed
    $$$$$: 4095-block  2
call    4 never executed
    #####: 4096:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4096-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4097:  return ss.str();
    %%%%%: 4097-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4097-block  1
        -: 4098:}
        -: 4099:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4100:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4101:#if defined(_MSC_VER)
        -: 4102:  return localtime_s(out, &seconds) == 0;
        -: 4103:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4104:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4105:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4106:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4107:  if (tm_ptr == nullptr) return false;
        -: 4108:  *out = *tm_ptr;
        -: 4109:  return true;
        -: 4110:#elif defined(__STDC_LIB_EXT1__)
        -: 4111:  // Uses localtime_s when available as localtime_r is only available from
        -: 4112:  // C23 standard.
        -: 4113:  return localtime_s(&seconds, out) != nullptr;
        -: 4114:#else
    #####: 4115:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4115-block  0
call    0 never executed
        -: 4116:#endif
        -: 4117:}
        -: 4118:
        -: 4119:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4120:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4121:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4122:  struct tm time_struct;
    #####: 4123:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4124:    return "";
    %%%%%: 4124-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4124-block  1
call    4 never executed
    $$$$$: 4124-block  2
call    5 never executed
    $$$$$: 4124-block  3
        -: 4125:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4126:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4126-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4126-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4126-block  3
call   11 never executed
    $$$$$: 4126-block  4
    $$$$$: 4126-block  5
call   12 never executed
    $$$$$: 4126-block  6
    $$$$$: 4126-block  7
call   13 never executed
    $$$$$: 4126-block  8
    $$$$$: 4126-block  9
    #####: 4127:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4127-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4127-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4127-block  3
call   12 never executed
    $$$$$: 4127-block  4
    $$$$$: 4127-block  5
call   13 never executed
    $$$$$: 4127-block  6
    $$$$$: 4127-block  7
call   14 never executed
    $$$$$: 4127-block  8
    #####: 4128:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4128-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4128-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4128-block  3
call   12 never executed
    $$$$$: 4128-block  4
    $$$$$: 4128-block  5
call   13 never executed
    $$$$$: 4128-block  6
    $$$$$: 4128-block  7
call   14 never executed
    $$$$$: 4128-block  8
    #####: 4129:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4129-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4129-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4129-block  3
call   12 never executed
    $$$$$: 4129-block  4
    $$$$$: 4129-block  5
call   13 never executed
    $$$$$: 4129-block  6
    $$$$$: 4129-block  7
call   14 never executed
    $$$$$: 4129-block  8
    #####: 4130:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4130-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4130-block  3
call   12 never executed
    $$$$$: 4130-block  4
    $$$$$: 4130-block  5
call   13 never executed
    $$$$$: 4130-block  6
    $$$$$: 4130-block  7
call   14 never executed
    $$$$$: 4130-block  8
    #####: 4131:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4131-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4131-block  3
call    9 never executed
    $$$$$: 4131-block  4
    $$$$$: 4131-block  5
call   10 never executed
    $$$$$: 4131-block  6
    #####: 4132:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4132-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4132-block  2
call    7 never executed
    $$$$$: 4132-block  3
        -: 4133:}
        -: 4134:
        -: 4135:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4136:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4137:                                                     const char* data) {
    #####: 4138:  const char* segment = data;
    #####: 4139:  *stream << "<![CDATA[";
    %%%%%: 4139-block  0
call    0 never executed
        -: 4140:  for (;;) {
    #####: 4141:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4142:    if (next_segment != nullptr) {
    %%%%%: 4142-block  0
branch  0 never executed
branch  1 never executed
        -: 4143:      stream->write(segment,
    #####: 4144:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4144-block  0
call    0 never executed
    #####: 4145:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4146:      segment = next_segment + strlen("]]>");
        -: 4147:    } else {
    #####: 4148:      *stream << segment;
    %%%%%: 4148-block  0
call    0 never executed
    #####: 4149:      break;
        -: 4150:    }
    #####: 4151:  }
    %%%%%: 4151-block  0
    #####: 4152:  *stream << "]]>";
    %%%%%: 4152-block  0
call    0 never executed
    #####: 4153:}
        -: 4154:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4155:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4156:    std::ostream* stream, const std::string& element_name,
        -: 4157:    const std::string& name, const std::string& value) {
        -: 4158:  const std::vector<std::string>& allowed_names =
    #####: 4159:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4159-block  1
call    3 never executed
        -: 4160:
    #####: 4161:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4161-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4161-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4161-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4161-block  3
call   13 never executed
    %%%%%: 4161-block  4
call   14 never executed
    $$$$$: 4161-block  5
    $$$$$: 4161-block  6
call   15 never executed
    $$$$$: 4161-block  7
        -: 4162:               allowed_names.end())
        -: 4163:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4164:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4164-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4164-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4164-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4164-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4164-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4165:
    #####: 4166:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4166-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4166-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4166-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4166-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4166-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4166-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4166-block  7
call   20 never executed
    $$$$$: 4166-block  8
    #####: 4167:}
        -: 4168:
        -: 4169:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4170:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4171:    ::std::ostream* stream, const TestResult& result) {
        -: 4172:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4173:  *stream << "  <testsuite";
    %%%%%: 4173-block  0
call    0 never executed
    #####: 4174:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4174-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4174-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4174-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4174-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4174-block  4
call   21 never executed
    $$$$$: 4174-block  5
    $$$$$: 4174-block  6
call   22 never executed
    $$$$$: 4174-block  7
    $$$$$: 4174-block  8
call   23 never executed
    $$$$$: 4174-block  9
    $$$$$: 4174-block 10
call   24 never executed
    $$$$$: 4174-block 11
    $$$$$: 4174-block 12
call   25 never executed
    $$$$$: 4174-block 13
    $$$$$: 4174-block 14
call   26 never executed
    $$$$$: 4174-block 15
call   27 never executed
    #####: 4175:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4175-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4175-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4175-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4175-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4175-block  4
call   21 never executed
    $$$$$: 4175-block  5
    $$$$$: 4175-block  6
call   22 never executed
    $$$$$: 4175-block  7
    $$$$$: 4175-block  8
call   23 never executed
    $$$$$: 4175-block  9
    $$$$$: 4175-block 10
call   24 never executed
    $$$$$: 4175-block 11
    $$$$$: 4175-block 12
call   25 never executed
    $$$$$: 4175-block 13
    $$$$$: 4175-block 14
call   26 never executed
    $$$$$: 4175-block 15
call   27 never executed
    #####: 4176:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4176-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4176-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4176-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4176-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4176-block  4
call   21 never executed
    $$$$$: 4176-block  5
    $$$$$: 4176-block  6
call   22 never executed
    $$$$$: 4176-block  7
    $$$$$: 4176-block  8
call   23 never executed
    $$$$$: 4176-block  9
    $$$$$: 4176-block 10
call   24 never executed
    $$$$$: 4176-block 11
    $$$$$: 4176-block 12
call   25 never executed
    $$$$$: 4176-block 13
    $$$$$: 4176-block 14
call   26 never executed
    $$$$$: 4176-block 15
call   27 never executed
    #####: 4177:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4177-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4177-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4177-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4177-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4177-block  4
call   21 never executed
    $$$$$: 4177-block  5
    $$$$$: 4177-block  6
call   22 never executed
    $$$$$: 4177-block  7
    $$$$$: 4177-block  8
call   23 never executed
    $$$$$: 4177-block  9
    $$$$$: 4177-block 10
call   24 never executed
    $$$$$: 4177-block 11
    $$$$$: 4177-block 12
call   25 never executed
    $$$$$: 4177-block 13
    $$$$$: 4177-block 14
call   26 never executed
    $$$$$: 4177-block 15
call   27 never executed
    #####: 4178:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4178-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4178-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4178-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4178-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4178-block  4
call   21 never executed
    $$$$$: 4178-block  5
    $$$$$: 4178-block  6
call   22 never executed
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
call   23 never executed
    $$$$$: 4178-block  9
    $$$$$: 4178-block 10
call   24 never executed
    $$$$$: 4178-block 11
    $$$$$: 4178-block 12
call   25 never executed
    $$$$$: 4178-block 13
    $$$$$: 4178-block 14
call   26 never executed
    $$$$$: 4178-block 15
call   27 never executed
    #####: 4179:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4179-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4179-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4179-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4179-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4179-block  4
call   21 never executed
    $$$$$: 4179-block  5
    $$$$$: 4179-block  6
call   22 never executed
    $$$$$: 4179-block  7
    $$$$$: 4179-block  8
call   23 never executed
    $$$$$: 4179-block  9
    $$$$$: 4179-block 10
call   24 never executed
    $$$$$: 4179-block 11
    $$$$$: 4179-block 12
call   25 never executed
    $$$$$: 4179-block 13
    $$$$$: 4179-block 14
call   26 never executed
    $$$$$: 4179-block 15
call   27 never executed
    #####: 4180:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4180-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4180-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4180-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4180-block  3
call   15 never executed
    $$$$$: 4180-block  4
    $$$$$: 4180-block  5
call   16 never executed
    $$$$$: 4180-block  6
    $$$$$: 4180-block  7
call   17 never executed
    $$$$$: 4180-block  8
    $$$$$: 4180-block  9
call   18 never executed
    $$$$$: 4180-block 10
    #####: 4181:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4181-block  0
call    3 never executed
    $$$$$: 4181-block  1
call    4 never executed
    #####: 4182:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4182-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4182-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4182-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4182-block  3
call   15 never executed
    $$$$$: 4182-block  4
    $$$$$: 4182-block  5
call   16 never executed
    $$$$$: 4182-block  6
    $$$$$: 4182-block  7
call   17 never executed
    $$$$$: 4182-block  8
    $$$$$: 4182-block  9
call   18 never executed
    $$$$$: 4182-block 10
        -: 4183:      stream, "testsuite", "timestamp",
    #####: 4184:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4184-block  0
call    3 never executed
    $$$$$: 4184-block  1
call    4 never executed
    #####: 4185:  *stream << ">";
call    0 never executed
        -: 4186:
        -: 4187:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4188:  *stream << "    <testcase";
call    0 never executed
    #####: 4189:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4189-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4189-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4189-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4189-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4189-block  4
call   21 never executed
    $$$$$: 4189-block  5
    $$$$$: 4189-block  6
call   22 never executed
    $$$$$: 4189-block  7
    $$$$$: 4189-block  8
call   23 never executed
    $$$$$: 4189-block  9
    $$$$$: 4189-block 10
call   24 never executed
    $$$$$: 4189-block 11
    $$$$$: 4189-block 12
call   25 never executed
    $$$$$: 4189-block 13
    $$$$$: 4189-block 14
call   26 never executed
    $$$$$: 4189-block 15
call   27 never executed
    #####: 4190:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4190-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4190-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4190-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4190-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4190-block  4
call   21 never executed
    $$$$$: 4190-block  5
    $$$$$: 4190-block  6
call   22 never executed
    $$$$$: 4190-block  7
    $$$$$: 4190-block  8
call   23 never executed
    $$$$$: 4190-block  9
    $$$$$: 4190-block 10
call   24 never executed
    $$$$$: 4190-block 11
    $$$$$: 4190-block 12
call   25 never executed
    $$$$$: 4190-block 13
    $$$$$: 4190-block 14
call   26 never executed
    $$$$$: 4190-block 15
call   27 never executed
    #####: 4191:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4191-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4191-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4191-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4191-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4191-block  4
call   21 never executed
    $$$$$: 4191-block  5
    $$$$$: 4191-block  6
call   22 never executed
    $$$$$: 4191-block  7
    $$$$$: 4191-block  8
call   23 never executed
    $$$$$: 4191-block  9
    $$$$$: 4191-block 10
call   24 never executed
    $$$$$: 4191-block 11
    $$$$$: 4191-block 12
call   25 never executed
    $$$$$: 4191-block 13
    $$$$$: 4191-block 14
call   26 never executed
    $$$$$: 4191-block 15
call   27 never executed
    #####: 4192:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4192-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4192-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4192-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4192-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4192-block  4
call   21 never executed
    $$$$$: 4192-block  5
    $$$$$: 4192-block  6
call   22 never executed
    $$$$$: 4192-block  7
    $$$$$: 4192-block  8
call   23 never executed
    $$$$$: 4192-block  9
    $$$$$: 4192-block 10
call   24 never executed
    $$$$$: 4192-block 11
    $$$$$: 4192-block 12
call   25 never executed
    $$$$$: 4192-block 13
    $$$$$: 4192-block 14
call   26 never executed
    $$$$$: 4192-block 15
call   27 never executed
    #####: 4193:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4193-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4193-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4193-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4193-block  3
call   15 never executed
    $$$$$: 4193-block  4
    $$$$$: 4193-block  5
call   16 never executed
    $$$$$: 4193-block  6
    $$$$$: 4193-block  7
call   17 never executed
    $$$$$: 4193-block  8
    $$$$$: 4193-block  9
call   18 never executed
    $$$$$: 4193-block 10
    #####: 4194:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4194-block  0
call    3 never executed
    $$$$$: 4194-block  1
call    4 never executed
    #####: 4195:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4195-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4195-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4195-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4195-block  3
call   15 never executed
    $$$$$: 4195-block  4
    $$$$$: 4195-block  5
call   16 never executed
    $$$$$: 4195-block  6
    $$$$$: 4195-block  7
call   17 never executed
    $$$$$: 4195-block  8
    $$$$$: 4195-block  9
call   18 never executed
    $$$$$: 4195-block 10
        -: 4196:      stream, "testcase", "timestamp",
    #####: 4197:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4197-block  0
call    3 never executed
        -: 4198:
        -: 4199:  // Output the actual test result.
    #####: 4200:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4201:
        -: 4202:  // Complete the test suite.
    #####: 4203:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4204:}
        -: 4205:
        -: 4206:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4207:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4208:                                                 const char* test_suite_name,
        -: 4209:                                                 const TestInfo& test_info) {
    #####: 4210:  const TestResult& result = *test_info.result();
    %%%%%: 4210-block  0
call    0 never executed
    #####: 4211:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4211-block  0
    $$$$$: 4211-block  1
call    4 never executed
        -: 4212:
    #####: 4213:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4214:    return;
    %%%%%: 4214-block  0
        -: 4215:  }
        -: 4216:
    #####: 4217:  *stream << "    <testcase";
    %%%%%: 4217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4218:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4218-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4218-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4218-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4218-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4218-block  4
call   16 never executed
    $$$$$: 4218-block  5
    $$$$$: 4218-block  6
call   17 never executed
    $$$$$: 4218-block  7
    $$$$$: 4218-block  8
call   18 never executed
    $$$$$: 4218-block  9
    $$$$$: 4218-block 10
call   19 never executed
    $$$$$: 4218-block 11
        -: 4219:
    #####: 4220:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4221:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4221-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4221-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4221-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4221-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4221-block  4
call   16 never executed
    $$$$$: 4221-block  5
    $$$$$: 4221-block  6
call   17 never executed
    $$$$$: 4221-block  7
    $$$$$: 4221-block  8
call   18 never executed
    $$$$$: 4221-block  9
    $$$$$: 4221-block 10
call   19 never executed
    $$$$$: 4221-block 11
        -: 4222:                       test_info.value_param());
        -: 4223:  }
    #####: 4224:  if (test_info.type_param() != nullptr) {
    %%%%%: 4224-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4225:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4225-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4225-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4225-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4225-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4225-block  4
call   16 never executed
    $$$$$: 4225-block  5
    $$$$$: 4225-block  6
call   17 never executed
    $$$$$: 4225-block  7
    $$$$$: 4225-block  8
call   18 never executed
    $$$$$: 4225-block  9
    $$$$$: 4225-block 10
call   19 never executed
    $$$$$: 4225-block 11
        -: 4226:                       test_info.type_param());
        -: 4227:  }
        -: 4228:
    #####: 4229:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4229-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4229-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4229-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4229-block  4
call   16 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
call   17 never executed
    $$$$$: 4229-block  7
    $$$$$: 4229-block  8
call   18 never executed
    $$$$$: 4229-block  9
    $$$$$: 4229-block 10
call   19 never executed
    $$$$$: 4229-block 11
    #####: 4230:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4230-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4230-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4230-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4230-block  3
call    9 never executed
    $$$$$: 4230-block  4
    $$$$$: 4230-block  5
call   10 never executed
    $$$$$: 4230-block  6
    #####: 4231:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4231-block  0
call    5 never executed
    $$$$$: 4231-block  1
    $$$$$: 4231-block  2
    #####: 4232:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4233:    *stream << " />\n";
    %%%%%: 4233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4234:    return;
    %%%%%: 4234-block  0
        -: 4235:  }
        -: 4236:
    #####: 4237:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4237-block  1
    %%%%%: 4237-block  2
    %%%%%: 4237-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4237-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4237-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4237-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4237-block  7
call   17 never executed
    $$$$$: 4237-block  8
    $$$$$: 4237-block  9
call   18 never executed
    $$$$$: 4237-block 10
    $$$$$: 4237-block 11
call   19 never executed
    $$$$$: 4237-block 12
    $$$$$: 4237-block 13
call   20 never executed
    $$$$$: 4237-block 14
    #####: 4238:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4239:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4239-block  0
    %%%%%: 4239-block  1
    %%%%%: 4239-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4239-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4239-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4239-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4239-block  6
call   17 never executed
    $$$$$: 4239-block  7
    $$$$$: 4239-block  8
call   18 never executed
    $$$$$: 4239-block  9
    $$$$$: 4239-block 10
call   19 never executed
    $$$$$: 4239-block 11
    $$$$$: 4239-block 12
call   20 never executed
    $$$$$: 4239-block 13
    #####: 4240:                     test_info.should_run()
call    0 never executed
    #####: 4241:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4241-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4241-block  2
    %%%%%: 4241-block  3
        -: 4242:                         : "suppressed");
    #####: 4243:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4243-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4243-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4243-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4243-block  3
call    9 never executed
    $$$$$: 4243-block  4
    $$$$$: 4243-block  5
call   10 never executed
    $$$$$: 4243-block  6
    #####: 4244:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4244-block  0
call    5 never executed
    $$$$$: 4244-block  1
    #####: 4245:  OutputXmlAttribute(
    %%%%%: 4245-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4245-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4245-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4245-block  3
call    9 never executed
    $$$$$: 4245-block  4
    $$$$$: 4245-block  5
call   10 never executed
    $$$$$: 4245-block  6
        -: 4246:      stream, kTestsuite, "timestamp",
    #####: 4247:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4247-block  0
call    5 never executed
    $$$$$: 4247-block  1
    #####: 4248:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4248-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4248-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4248-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4248-block  3
call   15 never executed
    $$$$$: 4248-block  4
    $$$$$: 4248-block  5
call   16 never executed
    $$$$$: 4248-block  6
    $$$$$: 4248-block  7
call   17 never executed
    $$$$$: 4248-block  8
    $$$$$: 4248-block  9
call   18 never executed
    $$$$$: 4248-block 10
        -: 4249:
    #####: 4250:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4251:}
        -: 4252:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4253:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4254:                                                   const TestResult& result) {
    #####: 4255:  int failures = 0;
    #####: 4256:  int skips = 0;
    #####: 4257:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4257-block  0
    %%%%%: 4257-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4257-block  2
    #####: 4258:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4258-block  0
call    0 never executed
    #####: 4259:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4260:      if (++failures == 1 && skips == 0) {
    %%%%%: 4260-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4260-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4260-block  2
    %%%%%: 4260-block  3
    %%%%%: 4260-block  4
branch  4 never executed
branch  5 never executed
    #####: 4261:        *stream << ">\n";
    %%%%%: 4261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4262:      }
        -: 4263:      const std::string location =
        -: 4264:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4265:                                                          part.line_number());
    %%%%%: 4265-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4265-block  1
call    6 never executed
    #####: 4266:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4266-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4266-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4266-block  2
    $$$$$: 4266-block  3
call    8 never executed
    #####: 4267:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4267-block  0
call    0 never executed
    $$$$$: 4267-block  1
call    1 never executed
    $$$$$: 4267-block  2
    #####: 4268:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4268-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4268-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4268-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4269:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4269-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4269-block  1
call    7 never executed
    $$$$$: 4269-block  2
    $$$$$: 4269-block  3
call    8 never executed
    #####: 4270:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4270-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4270-block  1
call    7 never executed
    $$$$$: 4270-block  2
call    8 never executed
    $$$$$: 4270-block  3
    #####: 4271:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4272:    } else if (part.skipped()) {
    %%%%%: 4272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4273:      if (++skips == 1 && failures == 0) {
    %%%%%: 4273-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4273-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4273-block  2
    %%%%%: 4273-block  3
    %%%%%: 4273-block  4
branch  4 never executed
branch  5 never executed
    #####: 4274:        *stream << ">\n";
    %%%%%: 4274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4275:      }
        -: 4276:      const std::string location =
        -: 4277:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4278:                                                          part.line_number());
    %%%%%: 4278-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4278-block  1
call    6 never executed
    #####: 4279:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4279-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4279-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4279-block  2
    $$$$$: 4279-block  3
call    8 never executed
        -: 4280:      *stream << "      <skipped message=\""
    #####: 4281:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4281-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4281-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4281-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4281-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4281-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4281-block  5
call   20 never executed
    $$$$$: 4281-block  6
    $$$$$: 4281-block  7
call   21 never executed
    $$$$$: 4281-block  8
    $$$$$: 4281-block  9
call   22 never executed
    $$$$$: 4281-block 10
    #####: 4282:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4282-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4282-block  1
call    7 never executed
    $$$$$: 4282-block  2
    $$$$$: 4282-block  3
call    8 never executed
    #####: 4283:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4283-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4283-block  1
call    7 never executed
    $$$$$: 4283-block  2
call    8 never executed
    $$$$$: 4283-block  3
    #####: 4284:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4285:    }
        -: 4286:  }
        -: 4287:
    #####: 4288:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4288-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4288-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4288-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4288-block  3
    %%%%%: 4288-block  4
    %%%%%: 4288-block  5
branch  7 never executed
branch  8 never executed
    #####: 4289:    *stream << " />\n";
    %%%%%: 4289-block  0
call    0 never executed
        -: 4290:  } else {
    #####: 4291:    if (failures == 0 && skips == 0) {
    %%%%%: 4291-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4291-block  1
branch  2 never executed
branch  3 never executed
    #####: 4292:      *stream << ">\n";
    %%%%%: 4292-block  0
call    0 never executed
        -: 4293:    }
    #####: 4294:    OutputXmlTestProperties(stream, result);
    %%%%%: 4294-block  0
call    0 never executed
    #####: 4295:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4296:  }
    #####: 4297:}
    %%%%%: 4297-block  0
        -: 4298:
        -: 4299:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4300:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4301:                                                 const TestSuite& test_suite) {
    #####: 4302:  const std::string kTestsuite = "testsuite";
    %%%%%: 4302-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4302-block  1
call    4 never executed
    $$$$$: 4302-block  2
    $$$$$: 4302-block  3
call    5 never executed
    #####: 4303:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4303-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4304:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4304-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4304-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4304-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4304-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4304-block  4
call   16 never executed
    $$$$$: 4304-block  5
    $$$$$: 4304-block  6
call   17 never executed
    $$$$$: 4304-block  7
    $$$$$: 4304-block  8
call   18 never executed
    $$$$$: 4304-block  9
    $$$$$: 4304-block 10
call   19 never executed
    $$$$$: 4304-block 11
    #####: 4305:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4305-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4305-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4305-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4305-block  3
call    9 never executed
    $$$$$: 4305-block  4
    $$$$$: 4305-block  5
call   10 never executed
    $$$$$: 4305-block  6
    #####: 4306:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4306-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4306-block  1
call    7 never executed
    $$$$$: 4306-block  2
    $$$$$: 4306-block  3
    #####: 4307:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4308:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4308-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4308-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4308-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4308-block  3
call    9 never executed
    $$$$$: 4308-block  4
    $$$$$: 4308-block  5
call   10 never executed
    $$$$$: 4308-block  6
    #####: 4309:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4309-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4309-block  2
call    7 never executed
    $$$$$: 4309-block  3
    $$$$$: 4309-block  4
    #####: 4310:    OutputXmlAttribute(
    %%%%%: 4310-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4310-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4310-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4310-block  3
call    9 never executed
    $$$$$: 4310-block  4
    $$$$$: 4310-block  5
call   10 never executed
    $$$$$: 4310-block  6
        -: 4311:        stream, kTestsuite, "disabled",
    #####: 4312:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4312-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4312-block  1
call    7 never executed
    $$$$$: 4312-block  2
    $$$$$: 4312-block  3
    #####: 4313:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4313-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4313-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4313-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4313-block  3
call    9 never executed
    $$$$$: 4313-block  4
    $$$$$: 4313-block  5
call   10 never executed
    $$$$$: 4313-block  6
    #####: 4314:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4314-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4314-block  1
call    7 never executed
    $$$$$: 4314-block  2
    $$$$$: 4314-block  3
        -: 4315:
    #####: 4316:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4316-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4316-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4316-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4316-block  3
call   15 never executed
    $$$$$: 4316-block  4
    $$$$$: 4316-block  5
call   16 never executed
    $$$$$: 4316-block  6
    $$$$$: 4316-block  7
call   17 never executed
    $$$$$: 4316-block  8
    $$$$$: 4316-block  9
call   18 never executed
    $$$$$: 4316-block 10
        -: 4317:
    #####: 4318:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4318-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4318-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4318-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4318-block  3
call    9 never executed
    $$$$$: 4318-block  4
    $$$$$: 4318-block  5
call   10 never executed
    $$$$$: 4318-block  6
    #####: 4319:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4319-block  0
call    5 never executed
    $$$$$: 4319-block  1
    #####: 4320:    OutputXmlAttribute(
    %%%%%: 4320-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4320-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4320-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4320-block  3
call    9 never executed
    $$$$$: 4320-block  4
    $$$$$: 4320-block  5
call   10 never executed
    $$$$$: 4320-block  6
        -: 4321:        stream, kTestsuite, "timestamp",
    #####: 4322:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4322-block  0
call    5 never executed
    $$$$$: 4322-block  1
    #####: 4323:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4323-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4323-block  1
call    7 never executed
    $$$$$: 4323-block  2
call    8 never executed
    $$$$$: 4323-block  3
        -: 4324:  }
    #####: 4325:  *stream << ">\n";
    %%%%%: 4325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4326:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4326-block  0
    %%%%%: 4326-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4326-block  2
    #####: 4327:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4327-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4328:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4328-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4329:  }
    #####: 4330:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4330-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4330-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4331:}
        -: 4332:
        -: 4333:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4334:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4335:                                                const UnitTest& unit_test) {
    #####: 4336:  const std::string kTestsuites = "testsuites";
    %%%%%: 4336-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4336-block  1
call    4 never executed
    $$$$$: 4336-block  2
    $$$$$: 4336-block  3
call    5 never executed
        -: 4337:
    #####: 4338:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4339:  *stream << "<" << kTestsuites;
    %%%%%: 4339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4340:
    #####: 4341:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4341-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4341-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4341-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4341-block  3
call    9 never executed
    $$$$$: 4341-block  4
    $$$$$: 4341-block  5
call   10 never executed
    $$$$$: 4341-block  6
    #####: 4342:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4342-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4342-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4342-block  2
call    7 never executed
    $$$$$: 4342-block  3
    $$$$$: 4342-block  4
    #####: 4343:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4343-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4343-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4343-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4343-block  3
call    9 never executed
    $$$$$: 4343-block  4
    $$$$$: 4343-block  5
call   10 never executed
    $$$$$: 4343-block  6
    #####: 4344:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4344-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4344-block  1
call    7 never executed
    $$$$$: 4344-block  2
    $$$$$: 4344-block  3
    #####: 4345:  OutputXmlAttribute(
    %%%%%: 4345-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4345-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4345-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4345-block  3
call    9 never executed
    $$$$$: 4345-block  4
    $$$$$: 4345-block  5
call   10 never executed
    $$$$$: 4345-block  6
        -: 4346:      stream, kTestsuites, "disabled",
    #####: 4347:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4347-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4347-block  1
call    7 never executed
    $$$$$: 4347-block  2
    $$$$$: 4347-block  3
    #####: 4348:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4348-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4348-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4348-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4348-block  3
call   15 never executed
    $$$$$: 4348-block  4
    $$$$$: 4348-block  5
call   16 never executed
    $$$$$: 4348-block  6
    $$$$$: 4348-block  7
call   17 never executed
    $$$$$: 4348-block  8
    $$$$$: 4348-block  9
call   18 never executed
    $$$$$: 4348-block 10
    #####: 4349:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4349-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4349-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4349-block  3
call    9 never executed
    $$$$$: 4349-block  4
    $$$$$: 4349-block  5
call   10 never executed
    $$$$$: 4349-block  6
    #####: 4350:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4350-block  0
call    5 never executed
    $$$$$: 4350-block  1
    #####: 4351:  OutputXmlAttribute(
    %%%%%: 4351-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4351-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4351-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4351-block  3
call    9 never executed
    $$$$$: 4351-block  4
    $$$$$: 4351-block  5
call   10 never executed
    $$$$$: 4351-block  6
        -: 4352:      stream, kTestsuites, "timestamp",
    #####: 4353:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4353-block  0
call    5 never executed
    $$$$$: 4353-block  1
        -: 4354:
    #####: 4355:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4356:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4356-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4356-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4356-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4356-block  3
call    9 never executed
    $$$$$: 4356-block  4
    $$$$$: 4356-block  5
call   10 never executed
    $$$$$: 4356-block  6
    #####: 4357:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4357-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4357-block  1
call    5 never executed
    $$$$$: 4357-block  2
    $$$$$: 4357-block  3
        -: 4358:  }
    #####: 4359:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4359-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4359-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4359-block  2
call    7 never executed
    $$$$$: 4359-block  3
call    8 never executed
    $$$$$: 4359-block  4
        -: 4360:
    #####: 4361:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4361-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4361-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4361-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4361-block  3
call   15 never executed
    $$$$$: 4361-block  4
    $$$$$: 4361-block  5
call   16 never executed
    $$$$$: 4361-block  6
    $$$$$: 4361-block  7
call   17 never executed
    $$$$$: 4361-block  8
    $$$$$: 4361-block  9
call   18 never executed
    $$$$$: 4361-block 10
    #####: 4362:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4363:
    #####: 4364:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4364-block  0
    %%%%%: 4364-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4364-block  2
    #####: 4365:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4365-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4365-block  2
branch  6 never executed
branch  7 never executed
    #####: 4366:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4366-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4367:  }
        -: 4368:
        -: 4369:  // If there was a test failure outside of one of the test suites (like in a
        -: 4370:  // test environment) include that in the output.
    #####: 4371:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4371-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4371-block  1
branch  4 never executed
branch  5 never executed
    #####: 4372:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4372-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4373:  }
        -: 4374:
    #####: 4375:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4375-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4375-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4375-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4376:}
        -: 4377:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4378:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4379:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4380:  const std::string kTestsuites = "testsuites";
    %%%%%: 4380-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4380-block  1
call    4 never executed
    $$$$$: 4380-block  2
    $$$$$: 4380-block  3
call    5 never executed
        -: 4381:
    #####: 4382:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4383:  *stream << "<" << kTestsuites;
    %%%%%: 4383-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4383-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4384:
    #####: 4385:  int total_tests = 0;
    #####: 4386:  for (auto test_suite : test_suites) {
    %%%%%: 4386-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4386-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4386-block  2
call    5 never executed
    #####: 4387:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4388:  }
    #####: 4389:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4389-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4389-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4389-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4389-block  3
call    9 never executed
    $$$$$: 4389-block  4
    $$$$$: 4389-block  5
call   10 never executed
    $$$$$: 4389-block  6
    #####: 4390:                     StreamableToString(total_tests));
    %%%%%: 4390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4390-block  1
call    4 never executed
    $$$$$: 4390-block  2
    #####: 4391:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4391-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4391-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4391-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4391-block  3
call   15 never executed
    $$$$$: 4391-block  4
    $$$$$: 4391-block  5
call   16 never executed
    $$$$$: 4391-block  6
    $$$$$: 4391-block  7
call   17 never executed
    $$$$$: 4391-block  8
    $$$$$: 4391-block  9
call   18 never executed
    $$$$$: 4391-block 10
    #####: 4392:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4393:
    #####: 4394:  for (auto test_suite : test_suites) {
    %%%%%: 4394-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4394-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4394-block  2
call    5 never executed
    %%%%%: 4394-block  3
call    6 never executed
    #####: 4395:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4396:  }
    #####: 4397:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4397-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4397-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4397-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4398:}
        -: 4399:
        -: 4400:// Produces a string representing the test properties in a result as space
        -: 4401:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4402:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4403:    const TestResult& result) {
    #####: 4404:  Message attributes;
    %%%%%: 4404-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4404-block  1
call    3 never executed
    $$$$$: 4404-block  2
call    4 never executed
    #####: 4405:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4405-block  0
    %%%%%: 4405-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4406:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4406-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4407:    attributes << " " << property.key() << "="
    %%%%%: 4407-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4407-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4407-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4407-block  3
    #####: 4408:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4408-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4408-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4408-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4408-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4408-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4408-block  6
call   20 never executed
    $$$$$: 4408-block  7
    $$$$$: 4408-block  8
call   21 never executed
    $$$$$: 4408-block  9
    $$$$$: 4408-block 10
call   22 never executed
    $$$$$: 4408-block 11
        -: 4409:  }
    #####: 4410:  return attributes.GetString();
    %%%%%: 4410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4410-block  1
        -: 4411:}
        -: 4412:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4413:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4414:    std::ostream* stream, const TestResult& result) {
    #####: 4415:  const std::string kProperties = "properties";
    %%%%%: 4415-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4415-block  1
    $$$$$: 4415-block  2
call    4 never executed
    #####: 4416:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4416-block  0
    $$$$$: 4416-block  1
call    4 never executed
        -: 4417:
    #####: 4418:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4419:    return;
    %%%%%: 4419-block  0
        -: 4420:  }
        -: 4421:
    #####: 4422:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4422-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4422-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4422-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4423:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4423-block  0
    %%%%%: 4423-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4423-block  2
    #####: 4424:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4425:    *stream << "        <" << kProperty;
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4425-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4426:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4426-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4426-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4426-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4426-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4426-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4426-block  6
call   20 never executed
    $$$$$: 4426-block  7
    $$$$$: 4426-block  8
call   21 never executed
    $$$$$: 4426-block  9
    $$$$$: 4426-block 10
call   22 never executed
    $$$$$: 4426-block 11
    #####: 4427:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4427-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4427-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4427-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4427-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4427-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4427-block  5
call   20 never executed
    $$$$$: 4427-block  6
    $$$$$: 4427-block  7
call   21 never executed
    $$$$$: 4427-block  8
    $$$$$: 4427-block  9
call   22 never executed
    $$$$$: 4427-block 10
    #####: 4428:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4429:  }
    #####: 4430:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4430-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4430-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4431:}
        -: 4432:
        -: 4433:// End XmlUnitTestResultPrinter
        -: 4434:
        -: 4435:// This class generates an JSON output file.
        -: 4436:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4437: public:
        -: 4438:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4439:
        -: 4440:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4441:
        -: 4442:  // Prints an JSON summary of all unit tests.
        -: 4443:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4444:                                const std::vector<TestSuite*>& test_suites);
        -: 4445:
        -: 4446: private:
        -: 4447:  // Returns an JSON-escaped copy of the input string str.
        -: 4448:  static std::string EscapeJson(const std::string& str);
        -: 4449:
        -: 4450:  //// Verifies that the given attribute belongs to the given element and
        -: 4451:  //// streams the attribute as JSON.
        -: 4452:  static void OutputJsonKey(std::ostream* stream,
        -: 4453:                            const std::string& element_name,
        -: 4454:                            const std::string& name, const std::string& value,
        -: 4455:                            const std::string& indent, bool comma = true);
        -: 4456:  static void OutputJsonKey(std::ostream* stream,
        -: 4457:                            const std::string& element_name,
        -: 4458:                            const std::string& name, int value,
        -: 4459:                            const std::string& indent, bool comma = true);
        -: 4460:
        -: 4461:  // Streams a test suite JSON stanza containing the given test result.
        -: 4462:  //
        -: 4463:  // Requires: result.Failed()
        -: 4464:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4465:                                               const TestResult& result);
        -: 4466:
        -: 4467:  // Streams a JSON representation of a TestResult object.
        -: 4468:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4469:                                   const TestResult& result);
        -: 4470:
        -: 4471:  // Streams a JSON representation of a TestInfo object.
        -: 4472:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4473:                                 const char* test_suite_name,
        -: 4474:                                 const TestInfo& test_info);
        -: 4475:
        -: 4476:  // Prints a JSON representation of a TestSuite object
        -: 4477:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4478:                                 const TestSuite& test_suite);
        -: 4479:
        -: 4480:  // Prints a JSON summary of unit_test to output stream out.
        -: 4481:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4482:                                const UnitTest& unit_test);
        -: 4483:
        -: 4484:  // Produces a string representing the test properties in a result as
        -: 4485:  // a JSON dictionary.
        -: 4486:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4487:                                          const std::string& indent);
        -: 4488:
        -: 4489:  // The output file.
        -: 4490:  const std::string output_file_;
        -: 4491:
        -: 4492:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4493:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4494:      delete;
        -: 4495:};
        -: 4496:
        -: 4497:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4498:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4499:    : output_file_(output_file) {
    %%%%%: 4499-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4499-block  1
call    5 never executed
    $$$$$: 4499-block  2
call    6 never executed
    $$$$$: 4499-block  3
    $$$$$: 4499-block  4
call    7 never executed
    $$$$$: 4499-block  5
call    8 never executed
    #####: 4500:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4501:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4501-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4501-block  2
call    7 never executed
    $$$$$: 4501-block  3
call    8 never executed
    $$$$$: 4501-block  4
        -: 4502:  }
    #####: 4503:}
    %%%%%: 4503-block  0
        -: 4504:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4505:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4506:                                                   int /*iteration*/) {
    #####: 4507:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4508:  std::stringstream stream;
    %%%%%: 4508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4508-block  1
call    3 never executed
    $$$$$: 4508-block  2
call    4 never executed
    #####: 4509:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4510:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4510-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4510-block  2
call    7 never executed
    $$$$$: 4510-block  3
call    8 never executed
    $$$$$: 4510-block  4
    #####: 4511:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4512:}
        -: 4513:
        -: 4514:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4515:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4516:  Message m;
    %%%%%: 4516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4516-block  1
call    3 never executed
    $$$$$: 4516-block  2
call    4 never executed
        -: 4517:
    #####: 4518:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4518-block  0
    %%%%%: 4518-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4518-block  2
    #####: 4519:    const char ch = str[i];
    %%%%%: 4519-block  0
call    0 never executed
    #####: 4520:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4521:      case '\\':
        -: 4522:      case '"':
        -: 4523:      case '/':
    #####: 4524:        m << '\\' << ch;
    %%%%%: 4524-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4524-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4524-block  2
    #####: 4525:        break;
    %%%%%: 4525-block  0
    #####: 4526:      case '\b':
    #####: 4527:        m << "\\b";
    %%%%%: 4527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4528:        break;
    %%%%%: 4528-block  0
    #####: 4529:      case '\t':
    #####: 4530:        m << "\\t";
    %%%%%: 4530-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4531:        break;
    %%%%%: 4531-block  0
    #####: 4532:      case '\n':
    #####: 4533:        m << "\\n";
    %%%%%: 4533-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4534:        break;
    %%%%%: 4534-block  0
    #####: 4535:      case '\f':
    #####: 4536:        m << "\\f";
    %%%%%: 4536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4537:        break;
    %%%%%: 4537-block  0
    #####: 4538:      case '\r':
    #####: 4539:        m << "\\r";
    %%%%%: 4539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4540:        break;
    %%%%%: 4540-block  0
    #####: 4541:      default:
    #####: 4542:        if (ch < ' ') {
    %%%%%: 4542-block  0
branch  0 never executed
branch  1 never executed
    #####: 4543:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4543-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4543-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4543-block  3
call    9 never executed
    $$$$$: 4543-block  4
call   10 never executed
    $$$$$: 4543-block  5
        -: 4544:        } else {
    #####: 4545:          m << ch;
    %%%%%: 4545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4546:        }
    #####: 4547:        break;
    %%%%%: 4547-block  0
        -: 4548:    }
        -: 4549:  }
        -: 4550:
    #####: 4551:  return m.GetString();
    %%%%%: 4551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4551-block  1
        -: 4552:}
        -: 4553:
        -: 4554:// The following routines generate an JSON representation of a UnitTest
        -: 4555:// object.
        -: 4556:
        -: 4557:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4558:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4559:  ::std::stringstream ss;
    %%%%%: 4559-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4559-block  1
call    3 never executed
    $$$$$: 4559-block  2
call    4 never executed
    #####: 4560:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4560-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4561:  return ss.str();
    %%%%%: 4561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4561-block  1
        -: 4562:}
        -: 4563:
        -: 4564:// Converts the given epoch time in milliseconds to a date string in the
        -: 4565:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4566:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4567:  struct tm time_struct;
    #####: 4568:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4569:    return "";
    %%%%%: 4569-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4569-block  1
call    4 never executed
    $$$$$: 4569-block  2
call    5 never executed
    $$$$$: 4569-block  3
        -: 4570:  // YYYY-MM-DDThh:mm:ss
    #####: 4571:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4571-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4571-block  3
call   11 never executed
    $$$$$: 4571-block  4
    $$$$$: 4571-block  5
call   12 never executed
    $$$$$: 4571-block  6
    $$$$$: 4571-block  7
call   13 never executed
    $$$$$: 4571-block  8
    $$$$$: 4571-block  9
    #####: 4572:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4572-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4572-block  3
call   12 never executed
    $$$$$: 4572-block  4
    $$$$$: 4572-block  5
call   13 never executed
    $$$$$: 4572-block  6
    $$$$$: 4572-block  7
call   14 never executed
    $$$$$: 4572-block  8
    #####: 4573:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4573-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4573-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4573-block  3
call   12 never executed
    $$$$$: 4573-block  4
    $$$$$: 4573-block  5
call   13 never executed
    $$$$$: 4573-block  6
    $$$$$: 4573-block  7
call   14 never executed
    $$$$$: 4573-block  8
    #####: 4574:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4574-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4574-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4574-block  3
call   12 never executed
    $$$$$: 4574-block  4
    $$$$$: 4574-block  5
call   13 never executed
    $$$$$: 4574-block  6
    $$$$$: 4574-block  7
call   14 never executed
    $$$$$: 4574-block  8
    #####: 4575:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4575-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4575-block  4
call   13 never executed
    $$$$$: 4575-block  5
    $$$$$: 4575-block  6
call   14 never executed
    $$$$$: 4575-block  7
    $$$$$: 4575-block  8
call   15 never executed
    $$$$$: 4575-block  9
    #####: 4576:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4576-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4576-block  2
call    7 never executed
    $$$$$: 4576-block  3
        -: 4577:}
        -: 4578:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4579:static inline std::string Indent(size_t width) {
    #####: 4580:  return std::string(width, ' ');
    %%%%%: 4580-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4580-block  1
call    4 never executed
    %%%%%: 4580-block  2
    $$$$$: 4580-block  3
call    5 never executed
        -: 4581:}
        -: 4582:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4583:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4584:                                              const std::string& element_name,
        -: 4585:                                              const std::string& name,
        -: 4586:                                              const std::string& value,
        -: 4587:                                              const std::string& indent,
        -: 4588:                                              bool comma) {
        -: 4589:  const std::vector<std::string>& allowed_names =
    #####: 4590:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4590-block  1
call    3 never executed
    $$$$$: 4590-block  2
call    4 never executed
        -: 4591:
    #####: 4592:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4592-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4592-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4592-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4592-block  3
call   13 never executed
    %%%%%: 4592-block  4
call   14 never executed
    $$$$$: 4592-block  5
    $$$$$: 4592-block  6
call   15 never executed
    $$$$$: 4592-block  7
        -: 4593:               allowed_names.end())
        -: 4594:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4595:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4595-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4595-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4595-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4595-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4595-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4596:
    #####: 4597:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4597-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4597-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4597-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4597-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4597-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4597-block  7
call   21 never executed
    $$$$$: 4597-block  8
call   22 never executed
    $$$$$: 4597-block  9
    #####: 4598:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4598-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4599:}
        -: 4600:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4601:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4602:    std::ostream* stream, const std::string& element_name,
        -: 4603:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4604:  const std::vector<std::string>& allowed_names =
    #####: 4605:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4605-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4605-block  1
call    3 never executed
    $$$$$: 4605-block  2
call    4 never executed
        -: 4606:
    #####: 4607:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4607-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4607-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4607-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4607-block  3
call   13 never executed
    %%%%%: 4607-block  4
call   14 never executed
    $$$$$: 4607-block  5
    $$$$$: 4607-block  6
call   15 never executed
    $$$$$: 4607-block  7
        -: 4608:               allowed_names.end())
        -: 4609:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4610:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4610-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4610-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4610-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4610-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4610-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4611:
    #####: 4612:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4612-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4612-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4612-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4612-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4612-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4612-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4612-block  6
call   18 never executed
    $$$$$: 4612-block  7
call   19 never executed
    $$$$$: 4612-block  8
    #####: 4613:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4613-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4614:}
        -: 4615:
        -: 4616:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4617:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4618:    ::std::ostream* stream, const TestResult& result) {
        -: 4619:  // Output the boilerplate for a new test suite.
    #####: 4620:  *stream << Indent(4) << "{\n";
    %%%%%: 4620-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4620-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4620-block  2
call    7 never executed
    $$$$$: 4620-block  3
call    8 never executed
    $$$$$: 4620-block  4
call    9 never executed
    #####: 4621:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4621-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4621-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4621-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4621-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4621-block  4
call   23 never executed
    $$$$$: 4621-block  5
    $$$$$: 4621-block  6
call   24 never executed
    $$$$$: 4621-block  7
    $$$$$: 4621-block  8
call   25 never executed
    $$$$$: 4621-block  9
    $$$$$: 4621-block 10
call   26 never executed
    $$$$$: 4621-block 11
    $$$$$: 4621-block 12
call   27 never executed
    $$$$$: 4621-block 13
    $$$$$: 4621-block 14
call   28 never executed
    $$$$$: 4621-block 15
    $$$$$: 4621-block 16
call   29 never executed
    $$$$$: 4621-block 17
call   30 never executed
    #####: 4622:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4622-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4622-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4622-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4622-block  3
call   17 never executed
    $$$$$: 4622-block  4
    $$$$$: 4622-block  5
call   18 never executed
    $$$$$: 4622-block  6
    $$$$$: 4622-block  7
call   19 never executed
    $$$$$: 4622-block  8
    $$$$$: 4622-block  9
call   20 never executed
    $$$$$: 4622-block 10
    $$$$$: 4622-block 11
call   21 never executed
    $$$$$: 4622-block 12
call   22 never executed
    #####: 4623:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4624:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4624-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4624-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4624-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4624-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4624-block  4
call   17 never executed
    $$$$$: 4624-block  5
    $$$$$: 4624-block  6
call   18 never executed
    $$$$$: 4624-block  7
    $$$$$: 4624-block  8
call   19 never executed
    $$$$$: 4624-block  9
    $$$$$: 4624-block 10
call   20 never executed
    $$$$$: 4624-block 11
    $$$$$: 4624-block 12
call   21 never executed
    $$$$$: 4624-block 13
call   22 never executed
    #####: 4625:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4625-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4625-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4625-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4625-block  3
call   17 never executed
    $$$$$: 4625-block  4
    $$$$$: 4625-block  5
call   18 never executed
    $$$$$: 4625-block  6
    $$$$$: 4625-block  7
call   19 never executed
    $$$$$: 4625-block  8
    $$$$$: 4625-block  9
call   20 never executed
    $$$$$: 4625-block 10
    $$$$$: 4625-block 11
call   21 never executed
    $$$$$: 4625-block 12
call   22 never executed
    #####: 4626:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4626-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4626-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4626-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4626-block  3
call   17 never executed
    $$$$$: 4626-block  4
    $$$$$: 4626-block  5
call   18 never executed
    $$$$$: 4626-block  6
    $$$$$: 4626-block  7
call   19 never executed
    $$$$$: 4626-block  8
    $$$$$: 4626-block  9
call   20 never executed
    $$$$$: 4626-block 10
    $$$$$: 4626-block 11
call   21 never executed
    $$$$$: 4626-block 12
call   22 never executed
    #####: 4627:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4627-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4627-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4627-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4627-block  3
call   17 never executed
    $$$$$: 4627-block  4
    $$$$$: 4627-block  5
call   18 never executed
    $$$$$: 4627-block  6
    $$$$$: 4627-block  7
call   19 never executed
    $$$$$: 4627-block  8
    $$$$$: 4627-block  9
call   20 never executed
    $$$$$: 4627-block 10
    $$$$$: 4627-block 11
call   21 never executed
    $$$$$: 4627-block 12
call   22 never executed
    #####: 4628:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4628-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4628-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4628-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4628-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4628-block  4
call   15 never executed
    $$$$$: 4628-block  5
    $$$$$: 4628-block  6
call   16 never executed
    $$$$$: 4628-block  7
    $$$$$: 4628-block  8
call   17 never executed
    $$$$$: 4628-block  9
    $$$$$: 4628-block 10
call   18 never executed
    $$$$$: 4628-block 11
    #####: 4629:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4629-block  0
call    5 never executed
    $$$$$: 4629-block  1
    #####: 4630:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4630-block  0
call    2 never executed
    $$$$$: 4630-block  1
call    3 never executed
    #####: 4631:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4631-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4631-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4631-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4631-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4631-block  4
call   15 never executed
    $$$$$: 4631-block  5
    $$$$$: 4631-block  6
call   16 never executed
    $$$$$: 4631-block  7
    $$$$$: 4631-block  8
call   17 never executed
    $$$$$: 4631-block  9
    $$$$$: 4631-block 10
call   18 never executed
    $$$$$: 4631-block 11
    #####: 4632:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4632-block  0
call    5 never executed
    $$$$$: 4632-block  1
    #####: 4633:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4633-block  0
call    2 never executed
    $$$$$: 4633-block  1
call    3 never executed
        -: 4634:  }
    #####: 4635:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4635-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4635-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4635-block  2
call    7 never executed
    $$$$$: 4635-block  3
call    8 never executed
    $$$$$: 4635-block  4
call    9 never executed
        -: 4636:
        -: 4637:  // Output the boilerplate for a new test case.
    #####: 4638:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4638-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4638-block  1
call    7 never executed
    $$$$$: 4638-block  2
call    8 never executed
    $$$$$: 4638-block  3
call    9 never executed
    #####: 4639:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4639-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4639-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4639-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4639-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4639-block  4
call   23 never executed
    $$$$$: 4639-block  5
    $$$$$: 4639-block  6
call   24 never executed
    $$$$$: 4639-block  7
    $$$$$: 4639-block  8
call   25 never executed
    $$$$$: 4639-block  9
    $$$$$: 4639-block 10
call   26 never executed
    $$$$$: 4639-block 11
    $$$$$: 4639-block 12
call   27 never executed
    $$$$$: 4639-block 13
    $$$$$: 4639-block 14
call   28 never executed
    $$$$$: 4639-block 15
    $$$$$: 4639-block 16
call   29 never executed
    $$$$$: 4639-block 17
call   30 never executed
    #####: 4640:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4640-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4640-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4640-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4640-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4640-block  4
call   23 never executed
    $$$$$: 4640-block  5
    $$$$$: 4640-block  6
call   24 never executed
    $$$$$: 4640-block  7
    $$$$$: 4640-block  8
call   25 never executed
    $$$$$: 4640-block  9
    $$$$$: 4640-block 10
call   26 never executed
    $$$$$: 4640-block 11
    $$$$$: 4640-block 12
call   27 never executed
    $$$$$: 4640-block 13
    $$$$$: 4640-block 14
call   28 never executed
    $$$$$: 4640-block 15
    $$$$$: 4640-block 16
call   29 never executed
    $$$$$: 4640-block 17
call   30 never executed
    #####: 4641:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4641-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4641-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4641-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4641-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4641-block  4
call   23 never executed
    $$$$$: 4641-block  5
    $$$$$: 4641-block  6
call   24 never executed
    $$$$$: 4641-block  7
    $$$$$: 4641-block  8
call   25 never executed
    $$$$$: 4641-block  9
    $$$$$: 4641-block 10
call   26 never executed
    $$$$$: 4641-block 11
    $$$$$: 4641-block 12
call   27 never executed
    $$$$$: 4641-block 13
    $$$$$: 4641-block 14
call   28 never executed
    $$$$$: 4641-block 15
    $$$$$: 4641-block 16
call   29 never executed
    $$$$$: 4641-block 17
call   30 never executed
    #####: 4642:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4642-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4642-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4642-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4642-block  4
call   15 never executed
    $$$$$: 4642-block  5
    $$$$$: 4642-block  6
call   16 never executed
    $$$$$: 4642-block  7
    $$$$$: 4642-block  8
call   17 never executed
    $$$$$: 4642-block  9
    $$$$$: 4642-block 10
call   18 never executed
    $$$$$: 4642-block 11
    #####: 4643:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4643-block  0
call    5 never executed
    $$$$$: 4643-block  1
    #####: 4644:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4644-block  0
call    2 never executed
    $$$$$: 4644-block  1
call    3 never executed
    #####: 4645:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4645-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4645-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4645-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4645-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4645-block  4
call   15 never executed
    $$$$$: 4645-block  5
    $$$$$: 4645-block  6
call   16 never executed
    $$$$$: 4645-block  7
    $$$$$: 4645-block  8
call   17 never executed
    $$$$$: 4645-block  9
    $$$$$: 4645-block 10
call   18 never executed
    $$$$$: 4645-block 11
    #####: 4646:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4646-block  0
call    5 never executed
    $$$$$: 4646-block  1
    #####: 4647:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4647-block  0
call    2 never executed
    $$$$$: 4647-block  1
call    3 never executed
    #####: 4648:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4648-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4648-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4648-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4648-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4648-block  4
call   23 never executed
    $$$$$: 4648-block  5
    $$$$$: 4648-block  6
call   24 never executed
    $$$$$: 4648-block  7
    $$$$$: 4648-block  8
call   25 never executed
    $$$$$: 4648-block  9
    $$$$$: 4648-block 10
call   26 never executed
    $$$$$: 4648-block 11
    $$$$$: 4648-block 12
call   27 never executed
    $$$$$: 4648-block 13
    $$$$$: 4648-block 14
call   28 never executed
    $$$$$: 4648-block 15
    $$$$$: 4648-block 16
call   29 never executed
    $$$$$: 4648-block 17
call   30 never executed
    #####: 4649:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4649-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4649-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4649-block  2
call    9 never executed
    $$$$$: 4649-block  3
    $$$$$: 4649-block  4
call   10 never executed
    $$$$$: 4649-block  5
call   11 never executed
        -: 4650:
        -: 4651:  // Output the actual test result.
    #####: 4652:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4653:
        -: 4654:  // Finish the test suite.
    #####: 4655:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4655-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4655-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4655-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4655-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4655-block  4
call   17 never executed
call   18 never executed
    $$$$$: 4655-block  5
call   19 never executed
    $$$$$: 4655-block  6
    $$$$$: 4655-block  7
call   20 never executed
    #####: 4656:}
        -: 4657:
        -: 4658:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4659:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4660:                                                   const char* test_suite_name,
        -: 4661:                                                   const TestInfo& test_info) {
    #####: 4662:  const TestResult& result = *test_info.result();
    %%%%%: 4662-block  0
call    0 never executed
    #####: 4663:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4663-block  0
    $$$$$: 4663-block  1
call    4 never executed
    #####: 4664:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4664-block  0
call    3 never executed
        -: 4665:
    #####: 4666:  *stream << Indent(8) << "{\n";
    %%%%%: 4666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4666-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4666-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4666-block  3
call    9 never executed
    $$$$$: 4666-block  4
call   10 never executed
    $$$$$: 4666-block  5
    #####: 4667:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4667-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4667-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4667-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4667-block  3
call   16 never executed
    $$$$$: 4667-block  4
    $$$$$: 4667-block  5
call   17 never executed
    $$$$$: 4667-block  6
    $$$$$: 4667-block  7
call   18 never executed
    $$$$$: 4667-block  8
    $$$$$: 4667-block  9
call   19 never executed
    $$$$$: 4667-block 10
        -: 4668:
    #####: 4669:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4670:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4670-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4670-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4670-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4670-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4670-block  4
call   16 never executed
    $$$$$: 4670-block  5
    $$$$$: 4670-block  6
call   17 never executed
    $$$$$: 4670-block  7
    $$$$$: 4670-block  8
call   18 never executed
    $$$$$: 4670-block  9
    $$$$$: 4670-block 10
call   19 never executed
    $$$$$: 4670-block 11
        -: 4671:                  kIndent);
        -: 4672:  }
    #####: 4673:  if (test_info.type_param() != nullptr) {
    %%%%%: 4673-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4674:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4674-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4674-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4674-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4674-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4674-block  4
call   16 never executed
    $$$$$: 4674-block  5
    $$$$$: 4674-block  6
call   17 never executed
    $$$$$: 4674-block  7
    $$$$$: 4674-block  8
call   18 never executed
    $$$$$: 4674-block  9
    $$$$$: 4674-block 10
call   19 never executed
    $$$$$: 4674-block 11
        -: 4675:                  kIndent);
        -: 4676:  }
        -: 4677:
    #####: 4678:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4678-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4678-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4678-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4678-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4678-block  4
call   16 never executed
    $$$$$: 4678-block  5
    $$$$$: 4678-block  6
call   17 never executed
    $$$$$: 4678-block  7
    $$$$$: 4678-block  8
call   18 never executed
    $$$$$: 4678-block  9
    $$$$$: 4678-block 10
call   19 never executed
    $$$$$: 4678-block 11
    #####: 4679:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4679-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4679-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4679-block  2
call   10 never executed
    $$$$$: 4679-block  3
    $$$$$: 4679-block  4
call   11 never executed
    $$$$$: 4679-block  5
    #####: 4680:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4681:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4681-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4681-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4681-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4681-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4681-block  4
call   12 never executed
    $$$$$: 4681-block  5
call   13 never executed
    $$$$$: 4681-block  6
    #####: 4682:    return;
        -: 4683:  } else {
    #####: 4684:    *stream << ",\n";
    %%%%%: 4684-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4685:  }
        -: 4686:
    #####: 4687:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4687-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4687-block  1
    %%%%%: 4687-block  2
    %%%%%: 4687-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4687-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4687-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4687-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4687-block  7
call   17 never executed
    $$$$$: 4687-block  8
    $$$$$: 4687-block  9
call   18 never executed
    $$$$$: 4687-block 10
    $$$$$: 4687-block 11
call   19 never executed
    $$$$$: 4687-block 12
    $$$$$: 4687-block 13
call   20 never executed
    $$$$$: 4687-block 14
    #####: 4688:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4689:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4689-block  0
    %%%%%: 4689-block  1
    %%%%%: 4689-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4689-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4689-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4689-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4689-block  6
call   17 never executed
    $$$$$: 4689-block  7
    $$$$$: 4689-block  8
call   18 never executed
    $$$$$: 4689-block  9
    $$$$$: 4689-block 10
call   19 never executed
    $$$$$: 4689-block 11
    $$$$$: 4689-block 12
call   20 never executed
    $$$$$: 4689-block 13
    #####: 4690:                test_info.should_run()
call    0 never executed
    #####: 4691:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4691-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4691-block  2
    %%%%%: 4691-block  3
        -: 4692:                    : "SUPPRESSED",
        -: 4693:                kIndent);
    #####: 4694:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4694-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4694-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4694-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4694-block  3
call    9 never executed
    $$$$$: 4694-block  4
    $$$$$: 4694-block  5
call   10 never executed
    $$$$$: 4694-block  6
    #####: 4695:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4695-block  0
call    5 never executed
    $$$$$: 4695-block  1
        -: 4696:                kIndent);
    #####: 4697:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4697-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4697-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4697-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4697-block  3
call    9 never executed
    $$$$$: 4697-block  4
    $$$$$: 4697-block  5
call   10 never executed
    $$$$$: 4697-block  6
    #####: 4698:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4698-block  0
call    5 never executed
    $$$$$: 4698-block  1
    #####: 4699:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4699-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4699-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4699-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4699-block  3
call   15 never executed
    $$$$$: 4699-block  4
    $$$$$: 4699-block  5
call   16 never executed
    $$$$$: 4699-block  6
    $$$$$: 4699-block  7
call   17 never executed
    $$$$$: 4699-block  8
    $$$$$: 4699-block  9
call   18 never executed
    $$$$$: 4699-block 10
        -: 4700:                false);
    #####: 4701:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4701-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4701-block  1
call    6 never executed
    $$$$$: 4701-block  2
call    7 never executed
    $$$$$: 4701-block  3
        -: 4702:
    #####: 4703:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4704:}
        -: 4705:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4706:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4707:                                                     const TestResult& result) {
    #####: 4708:  const std::string kIndent = Indent(10);
    %%%%%: 4708-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4708-block  1
call    3 never executed
        -: 4709:
    #####: 4710:  int failures = 0;
    #####: 4711:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4711-block  0
    %%%%%: 4711-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4711-block  2
    #####: 4712:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4713:    if (part.failed()) {
    %%%%%: 4713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4714:      *stream << ",\n";
    %%%%%: 4714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4715:      if (++failures == 1) {
    %%%%%: 4715-block  0
branch  0 never executed
branch  1 never executed
        -: 4716:        *stream << kIndent << "\""
        -: 4717:                << "failures"
    #####: 4718:                << "\": [\n";
    %%%%%: 4718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4718-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4718-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4718-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4719:      }
        -: 4720:      const std::string location =
        -: 4721:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4722:                                                          part.line_number());
    %%%%%: 4722-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4722-block  1
call    6 never executed
    #####: 4723:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4723-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4723-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4723-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 4723-block  3
call   11 never executed
    $$$$$: 4723-block  4
    $$$$$: 4723-block  5
    $$$$$: 4723-block  6
call   12 never executed
        -: 4724:      *stream << kIndent << "  {\n"
        -: 4725:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4726:              << kIndent << "    \"type\": \"\"\n"
    #####: 4727:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4727-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4727-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4727-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4727-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4727-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4727-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4727-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4727-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4727-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4728:    }
        -: 4729:  }
        -: 4730:
    #####: 4731:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4731-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4731-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4731-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4731-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4732:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4732-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4732-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4732-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4732-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4732-block  4
call   12 never executed
call   13 never executed
    $$$$$: 4732-block  5
call   14 never executed
    $$$$$: 4732-block  6
    #####: 4733:}
        -: 4734:
        -: 4735:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4736:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4737:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4738:  const std::string kTestsuite = "testsuite";
    %%%%%: 4738-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4738-block  1
    $$$$$: 4738-block  2
call    5 never executed
    #####: 4739:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4739-block  0
call    3 never executed
        -: 4740:
    #####: 4741:  *stream << Indent(4) << "{\n";
    %%%%%: 4741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4741-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4741-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4741-block  3
call    9 never executed
    $$$$$: 4741-block  4
call   10 never executed
    $$$$$: 4741-block  5
    #####: 4742:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4742-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4742-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4742-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4742-block  3
call   16 never executed
    $$$$$: 4742-block  4
    $$$$$: 4742-block  5
call   17 never executed
    $$$$$: 4742-block  6
    $$$$$: 4742-block  7
call   18 never executed
    $$$$$: 4742-block  8
    $$$$$: 4742-block  9
call   19 never executed
    $$$$$: 4742-block 10
    #####: 4743:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4743-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4743-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4743-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4743-block  3
call   12 never executed
    $$$$$: 4743-block  4
    $$$$$: 4743-block  5
call   13 never executed
    $$$$$: 4743-block  6
        -: 4744:                kIndent);
    #####: 4745:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4746:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4746-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4746-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4746-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4746-block  4
call   12 never executed
    $$$$$: 4746-block  5
    $$$$$: 4746-block  6
call   13 never executed
    $$$$$: 4746-block  7
        -: 4747:                  test_suite.failed_test_count(), kIndent);
    #####: 4748:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4748-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4748-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4748-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4748-block  3
call   12 never executed
    $$$$$: 4748-block  4
    $$$$$: 4748-block  5
call   13 never executed
    $$$$$: 4748-block  6
        -: 4749:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4750:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4750-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4750-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4750-block  2
call    9 never executed
    $$$$$: 4750-block  3
    $$$$$: 4750-block  4
call   10 never executed
    $$$$$: 4750-block  5
    #####: 4751:    OutputJsonKey(
    %%%%%: 4751-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4751-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4751-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4751-block  3
call    9 never executed
    $$$$$: 4751-block  4
    $$$$$: 4751-block  5
call   10 never executed
    $$$$$: 4751-block  6
        -: 4752:        stream, kTestsuite, "timestamp",
    #####: 4753:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4753-block  0
call    5 never executed
    $$$$$: 4753-block  1
        -: 4754:        kIndent);
    #####: 4755:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4755-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4755-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4755-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4755-block  3
call    9 never executed
    $$$$$: 4755-block  4
    $$$$$: 4755-block  5
call   10 never executed
    $$$$$: 4755-block  6
    #####: 4756:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4756-block  0
call    5 never executed
    $$$$$: 4756-block  1
        -: 4757:                  kIndent, false);
    #####: 4758:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4758-block  0
call    4 never executed
    $$$$$: 4758-block  1
call    5 never executed
    $$$$$: 4758-block  2
    #####: 4759:            << ",\n";
    %%%%%: 4759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4759-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4760:  }
        -: 4761:
    #####: 4762:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4762-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4762-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4762-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4763:
    #####: 4764:  bool comma = false;
    #####: 4765:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4765-block  0
    %%%%%: 4765-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4765-block  2
    #####: 4766:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4766-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4766-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4767:      if (comma) {
    %%%%%: 4767-block  0
branch  0 never executed
branch  1 never executed
    #####: 4768:        *stream << ",\n";
    %%%%%: 4768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4769:      } else {
    #####: 4770:        comma = true;
    %%%%%: 4770-block  0
        -: 4771:      }
    #####: 4772:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4772-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4773:    }
        -: 4774:  }
    #####: 4775:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4775-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4775-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4775-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4775-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4775-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4775-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4775-block  7
call   20 never executed
    $$$$$: 4775-block  8
    #####: 4776:}
        -: 4777:
        -: 4778:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4779:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4780:                                                  const UnitTest& unit_test) {
    #####: 4781:  const std::string kTestsuites = "testsuites";
    %%%%%: 4781-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4781-block  1
    $$$$$: 4781-block  2
call    5 never executed
    #####: 4782:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4782-block  0
call    3 never executed
    $$$$$: 4782-block  1
call    4 never executed
    #####: 4783:  *stream << "{\n";
    %%%%%: 4783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4784:
    #####: 4785:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4785-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4785-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4785-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4785-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4785-block  4
call   12 never executed
    $$$$$: 4785-block  5
    $$$$$: 4785-block  6
call   13 never executed
    $$$$$: 4785-block  7
        -: 4786:                kIndent);
    #####: 4787:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4787-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4787-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4787-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4787-block  3
call   12 never executed
    $$$$$: 4787-block  4
    $$$$$: 4787-block  5
call   13 never executed
    $$$$$: 4787-block  6
        -: 4788:                kIndent);
    #####: 4789:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4789-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4789-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4789-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4789-block  3
call   12 never executed
    $$$$$: 4789-block  4
    $$$$$: 4789-block  5
call   13 never executed
    $$$$$: 4789-block  6
        -: 4790:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4791:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4791-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4791-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4791-block  2
call    9 never executed
    $$$$$: 4791-block  3
    $$$$$: 4791-block  4
call   10 never executed
    $$$$$: 4791-block  5
    #####: 4792:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4793:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4793-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4793-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4793-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4793-block  3
call   10 never executed
    $$$$$: 4793-block  4
    $$$$$: 4793-block  5
call   11 never executed
    $$$$$: 4793-block  6
        -: 4794:                  kIndent);
        -: 4795:  }
    #####: 4796:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4796-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4796-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4796-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4796-block  3
call    9 never executed
    $$$$$: 4796-block  4
    $$$$$: 4796-block  5
call   10 never executed
    $$$$$: 4796-block  6
    #####: 4797:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4797-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4797-block  1
call    5 never executed
    $$$$$: 4797-block  2
        -: 4798:                kIndent);
    #####: 4799:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4799-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4799-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4799-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4799-block  3
call    9 never executed
    $$$$$: 4799-block  4
    $$$$$: 4799-block  5
call   10 never executed
    $$$$$: 4799-block  6
    #####: 4800:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4800-block  0
call    5 never executed
    $$$$$: 4800-block  1
        -: 4801:                false);
        -: 4802:
    #####: 4803:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4803-block  0
call    4 never executed
    $$$$$: 4803-block  1
call    5 never executed
    $$$$$: 4803-block  2
    #####: 4804:          << ",\n";
    %%%%%: 4804-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4804-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4805:
    #####: 4806:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4806-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4806-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4806-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4806-block  3
call   15 never executed
    $$$$$: 4806-block  4
    $$$$$: 4806-block  5
call   16 never executed
    $$$$$: 4806-block  6
    $$$$$: 4806-block  7
call   17 never executed
    $$$$$: 4806-block  8
    $$$$$: 4806-block  9
call   18 never executed
    $$$$$: 4806-block 10
    #####: 4807:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4807-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4807-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4807-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4808:
    #####: 4809:  bool comma = false;
    #####: 4810:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4810-block  0
    %%%%%: 4810-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4810-block  2
    #####: 4811:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4811-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4811-block  2
branch  6 never executed
branch  7 never executed
    #####: 4812:      if (comma) {
    %%%%%: 4812-block  0
branch  0 never executed
branch  1 never executed
    #####: 4813:        *stream << ",\n";
    %%%%%: 4813-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4814:      } else {
    #####: 4815:        comma = true;
    %%%%%: 4815-block  0
        -: 4816:      }
    #####: 4817:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4817-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4818:    }
        -: 4819:  }
        -: 4820:
        -: 4821:  // If there was a test failure outside of one of the test suites (like in a
        -: 4822:  // test environment) include that in the output.
    #####: 4823:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4823-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4823-block  1
branch  4 never executed
branch  5 never executed
    #####: 4824:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4824-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4825:  }
        -: 4826:
        -: 4827:  *stream << "\n"
        -: 4828:          << kIndent << "]\n"
    #####: 4829:          << "}\n";
    %%%%%: 4829-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4829-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4829-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4829-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4830:}
        -: 4831:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4832:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4833:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4834:  const std::string kTestsuites = "testsuites";
    %%%%%: 4834-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4834-block  1
    $$$$$: 4834-block  2
call    5 never executed
    #####: 4835:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4835-block  0
call    3 never executed
    $$$$$: 4835-block  1
call    4 never executed
    #####: 4836:  *stream << "{\n";
    %%%%%: 4836-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4837:  int total_tests = 0;
    #####: 4838:  for (auto test_suite : test_suites) {
    %%%%%: 4838-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4838-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4838-block  2
call    5 never executed
    #####: 4839:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4840:  }
    #####: 4841:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4841-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4841-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4841-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4841-block  3
call    9 never executed
    $$$$$: 4841-block  4
    $$$$$: 4841-block  5
call   10 never executed
    $$$$$: 4841-block  6
        -: 4842:
    #####: 4843:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4843-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4843-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4843-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4843-block  3
call   15 never executed
    $$$$$: 4843-block  4
    $$$$$: 4843-block  5
call   16 never executed
    $$$$$: 4843-block  6
    $$$$$: 4843-block  7
call   17 never executed
    $$$$$: 4843-block  8
    $$$$$: 4843-block  9
call   18 never executed
    $$$$$: 4843-block 10
    #####: 4844:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4844-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4844-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4844-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4845:
    #####: 4846:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4846-block  0
    %%%%%: 4846-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4846-block  2
    #####: 4847:    if (i != 0) {
    %%%%%: 4847-block  0
branch  0 never executed
branch  1 never executed
    #####: 4848:      *stream << ",\n";
    %%%%%: 4848-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4849:    }
    #####: 4850:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4850-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4851:  }
        -: 4852:
        -: 4853:  *stream << "\n"
        -: 4854:          << kIndent << "]\n"
    #####: 4855:          << "}\n";
    %%%%%: 4855-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4855-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4855-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4855-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4856:}
        -: 4857:// Produces a string representing the test properties in a result as
        -: 4858:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4859:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4860:    const TestResult& result, const std::string& indent) {
    #####: 4861:  Message attributes;
    %%%%%: 4861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4861-block  1
call    3 never executed
    $$$$$: 4861-block  2
call    4 never executed
    #####: 4862:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4862-block  0
    %%%%%: 4862-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4863:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4863-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4864:    attributes << ",\n"
    %%%%%: 4864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4865:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4865-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4865-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4865-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4865-block  4
    #####: 4866:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4866-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4866-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4866-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4866-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4866-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4866-block  6
call   20 never executed
    $$$$$: 4866-block  7
    $$$$$: 4866-block  8
call   21 never executed
    $$$$$: 4866-block  9
    $$$$$: 4866-block 10
call   22 never executed
    $$$$$: 4866-block 11
        -: 4867:  }
    #####: 4868:  return attributes.GetString();
    %%%%%: 4868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4868-block  1
        -: 4869:}
        -: 4870:
        -: 4871:// End JsonUnitTestResultPrinter
        -: 4872:
        -: 4873:#if GTEST_CAN_STREAM_RESULTS_
        -: 4874:
        -: 4875:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4876:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4877:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4878:// in both time and space -- important as the input str may contain an
        -: 4879:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4880:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4881:  std::string result;
    %%%%%: 4881-block  0
call    0 never executed
    #####: 4882:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4883:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4883-block  0
    %%%%%: 4883-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4883-block  2
    #####: 4884:    switch (ch) {
    %%%%%: 4884-block  0
branch  0 never executed
branch  1 never executed
    #####: 4885:      case '%':
        -: 4886:      case '=':
        -: 4887:      case '&':
        -: 4888:      case '\n':
    #####: 4889:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4889-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4889-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4889-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4889-block  4
call   11 never executed
    $$$$$: 4889-block  5
    $$$$$: 4889-block  6
call   12 never executed
    $$$$$: 4889-block  7
    #####: 4890:        break;
    #####: 4891:      default:
    #####: 4892:        result.push_back(ch);
    %%%%%: 4892-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4893:        break;
    %%%%%: 4893-block  0
        -: 4894:    }
        -: 4895:  }
    #####: 4896:  return result;
    %%%%%: 4896-block  0
    %%%%%: 4896-block  1
        -: 4897:}
        -: 4898:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4899:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4900:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4900-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4900-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4900-block  2
call    6 never executed
    %%%%%: 4900-block  3
call    7 never executed
    $$$$$: 4900-block  4
call    8 never executed
    $$$$$: 4900-block  5
    #####: 4901:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4901-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4902:
        -: 4903:  addrinfo hints;
    #####: 4904:  memset(&hints, 0, sizeof(hints));
    #####: 4905:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
    #####: 4906:  hints.ai_socktype = SOCK_STREAM;
    #####: 4907:  addrinfo* servinfo = nullptr;
        -: 4908:
        -: 4909:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4910:  // the given host name.
        -: 4911:  const int error_num =
    #####: 4912:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    %%%%%: 4912-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4913:  if (error_num != 0) {
    %%%%%: 4913-block  0
branch  0 never executed
branch  1 never executed
    #####: 4914:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4914-block  1
call    3 never executed
    %%%%%: 4914-block  2
call    4 never executed
    $$$$$: 4914-block  3
call    5 never executed
    $$$$$: 4914-block  4
    #####: 4915:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4915-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4916:  }
        -: 4917:
        -: 4918:  // Loop through all the results and connect to the first we can.
    #####: 4919:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4919-block  0
    %%%%%: 4919-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4919-block  2
branch  2 never executed
branch  3 never executed
    #####: 4920:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4920-block  0
    #####: 4921:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
    %%%%%: 4921-block  0
call    0 never executed
        -: 4922:                     cur_addr->ai_protocol);
    #####: 4923:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 4924:      // Connect the client socket to the server socket.
    #####: 4925:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4925-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4925-block  1
branch  3 never executed
branch  4 never executed
    #####: 4926:        close(sockfd_);
    %%%%%: 4926-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4927:        sockfd_ = -1;
    %%%%%: 4927-block  0
        -: 4928:      }
        -: 4929:    }
        -: 4930:  }
        -: 4931:
    #####: 4932:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4932-block  0
call    0 never executed
        -: 4933:
    #####: 4934:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 4935:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4935-block  1
call    3 never executed
    %%%%%: 4935-block  2
call    4 never executed
    $$$$$: 4935-block  3
call    5 never executed
    $$$$$: 4935-block  4
    #####: 4936:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4936-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4936-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4936-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4937:  }
    #####: 4938:}
    %%%%%: 4938-block  0
        -: 4939:
        -: 4940:// End of class Streaming Listener
        -: 4941:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4942:
        -: 4943:// class OsStackTraceGetter
        -: 4944:
        -: 4945:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4946:    "... " GTEST_NAME_ " internal frames ...";
        -: 4947:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4948:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4949:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4950:#if GTEST_HAS_ABSL
        -: 4951:  std::string result;
        -: 4952:
        -: 4953:  if (max_depth <= 0) {
        -: 4954:    return result;
        -: 4955:  }
        -: 4956:
        -: 4957:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4958:
        -: 4959:  std::vector<void*> raw_stack(max_depth);
        -: 4960:  // Skips the frames requested by the caller, plus this function.
        -: 4961:  const int raw_stack_size =
        -: 4962:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4963:
        -: 4964:  void* caller_frame = nullptr;
        -: 4965:  {
        -: 4966:    MutexLock lock(&mutex_);
        -: 4967:    caller_frame = caller_frame_;
        -: 4968:  }
        -: 4969:
        -: 4970:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4971:    if (raw_stack[i] == caller_frame &&
        -: 4972:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4973:      // Add a marker to the trace and stop adding frames.
        -: 4974:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4975:      break;
        -: 4976:    }
        -: 4977:
        -: 4978:    char tmp[1024];
        -: 4979:    const char* symbol = "(unknown)";
        -: 4980:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4981:      symbol = tmp;
        -: 4982:    }
        -: 4983:
        -: 4984:    char line[1024];
        -: 4985:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4986:    result += line;
        -: 4987:  }
        -: 4988:
        -: 4989:  return result;
        -: 4990:
        -: 4991:#else   // !GTEST_HAS_ABSL
        -: 4992:  static_cast<void>(max_depth);
        -: 4993:  static_cast<void>(skip_count);
    #####: 4994:  return "";
    %%%%%: 4994-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4994-block  1
call    4 never executed
    %%%%%: 4994-block  2
    $$$$$: 4994-block  3
call    5 never executed
        -: 4995:#endif  // GTEST_HAS_ABSL
        -: 4996:}
        -: 4997:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 17 returned 100% blocks executed 100%
       17: 4998:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4999:#if GTEST_HAS_ABSL
        -: 5000:  void* caller_frame = nullptr;
        -: 5001:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5002:    caller_frame = nullptr;
        -: 5003:  }
        -: 5004:
        -: 5005:  MutexLock lock(&mutex_);
        -: 5006:  caller_frame_ = caller_frame;
        -: 5007:#endif  // GTEST_HAS_ABSL
       17: 5008:}
        -: 5009:
        -: 5010:// A helper class that creates the premature-exit file in its
        -: 5011:// constructor and deletes the file in its destructor.
        -: 5012:class ScopedPrematureExitFile {
        -: 5013: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 50%
        1: 5014:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5015:      : premature_exit_filepath_(
       1*: 5016:            premature_exit_filepath ? premature_exit_filepath : "") {
        1: 5016-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5016-block  1
        1: 5016-block  2
        1: 5016-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5016-block  4
call    6 returned 1
    $$$$$: 5016-block  5
call    7 never executed
    $$$$$: 5016-block  6
call    8 never executed
    $$$$$: 5016-block  7
call    9 never executed
        -: 5017:    // If a path to the premature-exit file is specified...
        1: 5018:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5019:      // create the file with a single "0" character in it.  I/O
        -: 5020:      // errors are ignored as there's nothing better we can do and we
        -: 5021:      // don't want to fail the test because of this.
    #####: 5022:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5022-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5023:      fwrite("0", 1, 1, pfile);
    %%%%%: 5023-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5024:      fclose(pfile);
    %%%%%: 5024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5025:    }
        1: 5026:  }
        1: 5026-block  0
        -: 5027:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 27%
        1: 5028:  ~ScopedPrematureExitFile() {
        1: 5028-block  0
call    0 returned 1
        -: 5029:#if !defined GTEST_OS_ESP8266
        1: 5030:    if (!premature_exit_filepath_.empty()) {
        1: 5030-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5031:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5031-block  0
call    0 never executed
call    1 never executed
    #####: 5032:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5033:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5033-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5034:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5035:                          << retval;
call    0 never executed
        -: 5036:      }
        -: 5037:    }
        -: 5038:#endif
        1: 5039:  }
        -: 5040:
        -: 5041: private:
        -: 5042:  const std::string premature_exit_filepath_;
        -: 5043:
        -: 5044:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5045:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5046:};
        -: 5047:
        -: 5048:}  // namespace internal
        -: 5049:
        -: 5050:// class TestEventListeners
        -: 5051:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5052:TestEventListeners::TestEventListeners()
        1: 5053:    : repeater_(new internal::TestEventRepeater()),
        1: 5053-block  0
call    0 returned 1
call    1 returned 1
        -: 5054:      default_result_printer_(nullptr),
        1: 5055:      default_xml_generator_(nullptr) {}
        -: 5056:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 5057:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 5057-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5057-block  1
call    2 returned 1
        -: 5058:
        -: 5059:// Returns the standard listener responsible for the default console
        -: 5060:// output.  Can be removed from the listeners list to shut down default
        -: 5061:// console output.  Note that removing this object from the listener list
        -: 5062:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5063:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5064:  repeater_->Append(listener);
        1: 5064-block  0
call    0 returned 1
        1: 5065:}
        -: 5066:
        -: 5067:// Removes the given event listener from the list and returns it.  It then
        -: 5068:// becomes the caller's responsibility to delete the listener. Returns
        -: 5069:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5070:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5071:  if (listener == default_result_printer_)
        1: 5071-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5072:    default_result_printer_ = nullptr;
        1: 5072-block  0
    #####: 5073:  else if (listener == default_xml_generator_)
    %%%%%: 5073-block  0
branch  0 never executed
branch  1 never executed
    #####: 5074:    default_xml_generator_ = nullptr;
    %%%%%: 5074-block  0
        1: 5075:  return repeater_->Release(listener);
        1: 5075-block  0
call    0 returned 1
        -: 5076:}
        -: 5077:
        -: 5078:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5079:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 5 returned 100% blocks executed 100%
        5: 5080:TestEventListener* TestEventListeners::repeater() { return repeater_; }
        5: 5080-block  0
        -: 5081:
        -: 5082:// Sets the default_result_printer attribute to the provided listener.
        -: 5083:// The listener is also added to the listener list and previous
        -: 5084:// default_result_printer is removed from it and deleted. The listener can
        -: 5085:// also be NULL in which case it will not be added to the list. Does
        -: 5086:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5087:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5088:  if (default_result_printer_ != listener) {
        1: 5088-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5089:    // It is an error to pass this method a listener that is already in the
        -: 5090:    // list.
       1*: 5091:    delete Release(default_result_printer_);
        1: 5091-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5091-block  1
call    3 never executed
        1: 5092:    default_result_printer_ = listener;
        1: 5093:    if (listener != nullptr) Append(listener);
        1: 5093-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5093-block  1
call    2 returned 1
        -: 5094:  }
        1: 5095:}
        -: 5096:
        -: 5097:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5098:// listener is also added to the listener list and previous
        -: 5099:// default_xml_generator is removed from it and deleted. The listener can
        -: 5100:// also be NULL in which case it will not be added to the list. Does
        -: 5101:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5102:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5103:  if (default_xml_generator_ != listener) {
    %%%%%: 5103-block  0
branch  0 never executed
branch  1 never executed
        -: 5104:    // It is an error to pass this method a listener that is already in the
        -: 5105:    // list.
    #####: 5106:    delete Release(default_xml_generator_);
    %%%%%: 5106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5106-block  1
call    3 never executed
    #####: 5107:    default_xml_generator_ = listener;
    #####: 5108:    if (listener != nullptr) Append(listener);
    %%%%%: 5108-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5108-block  1
call    2 never executed
        -: 5109:  }
    #####: 5110:}
        -: 5111:
        -: 5112:// Controls whether events will be forwarded by the repeater to the
        -: 5113:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5114:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5115:  return repeater_->forwarding_enabled();
    %%%%%: 5115-block  0
call    0 never executed
        -: 5116:}
        -: 5117:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5118:void TestEventListeners::SuppressEventForwarding() {
    #####: 5119:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5119-block  0
call    0 never executed
    #####: 5120:}
        -: 5121:
        -: 5122:// class UnitTest
        -: 5123:
        -: 5124:// Gets the singleton UnitTest object.  The first time this method is
        -: 5125:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5126:// calls will return the same object.
        -: 5127://
        -: 5128:// We don't protect this under mutex_ as a user is not supposed to
        -: 5129:// call this before main() starts, from which point on the return
        -: 5130:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 52 returned 100% blocks executed 82%
       52: 5131:UnitTest* UnitTest::GetInstance() {
        -: 5132:  // CodeGear C++Builder insists on a public destructor for the
        -: 5133:  // default implementation.  Use this implementation to keep good OO
        -: 5134:  // design with private destructor.
        -: 5135:
        -: 5136:#if defined(__BORLANDC__)
        -: 5137:  static UnitTest* const instance = new UnitTest;
        -: 5138:  return instance;
        -: 5139:#else
       52: 5140:  static UnitTest instance;
       52: 5140-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 51
        1: 5140-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5140-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5140-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5140-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5140-block  5
call   12 never executed
       52: 5141:  return &instance;
       52: 5141-block  0
       52: 5141-block  1
        -: 5142:#endif  // defined(__BORLANDC__)
        -: 5143:}
        -: 5144:
        -: 5145:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5146:int UnitTest::successful_test_suite_count() const {
    #####: 5147:  return impl()->successful_test_suite_count();
    %%%%%: 5147-block  0
call    0 never executed
call    1 never executed
        -: 5148:}
        -: 5149:
        -: 5150:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5151:int UnitTest::failed_test_suite_count() const {
    #####: 5152:  return impl()->failed_test_suite_count();
    %%%%%: 5152-block  0
call    0 never executed
call    1 never executed
        -: 5153:}
        -: 5154:
        -: 5155:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5156:int UnitTest::total_test_suite_count() const {
    #####: 5157:  return impl()->total_test_suite_count();
    %%%%%: 5157-block  0
call    0 never executed
call    1 never executed
        -: 5158:}
        -: 5159:
        -: 5160:// Gets the number of all test suites that contain at least one test
        -: 5161:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5162:int UnitTest::test_suite_to_run_count() const {
        2: 5163:  return impl()->test_suite_to_run_count();
        2: 5163-block  0
call    0 returned 2
call    1 returned 2
        -: 5164:}
        -: 5165:
        -: 5166://  Legacy API is deprecated but still available
        -: 5167:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5168:int UnitTest::successful_test_case_count() const {
    #####: 5169:  return impl()->successful_test_suite_count();
    %%%%%: 5169-block  0
call    0 never executed
call    1 never executed
        -: 5170:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5171:int UnitTest::failed_test_case_count() const {
    #####: 5172:  return impl()->failed_test_suite_count();
    %%%%%: 5172-block  0
call    0 never executed
call    1 never executed
        -: 5173:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5174:int UnitTest::total_test_case_count() const {
    #####: 5175:  return impl()->total_test_suite_count();
    %%%%%: 5175-block  0
call    0 never executed
call    1 never executed
        -: 5176:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5177:int UnitTest::test_case_to_run_count() const {
    #####: 5178:  return impl()->test_suite_to_run_count();
    %%%%%: 5178-block  0
call    0 never executed
call    1 never executed
        -: 5179:}
        -: 5180:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5181:
        -: 5182:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5183:int UnitTest::successful_test_count() const {
        1: 5184:  return impl()->successful_test_count();
        1: 5184-block  0
call    0 returned 1
call    1 returned 1
        -: 5185:}
        -: 5186:
        -: 5187:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5188:int UnitTest::skipped_test_count() const {
        1: 5189:  return impl()->skipped_test_count();
        1: 5189-block  0
call    0 returned 1
call    1 returned 1
        -: 5190:}
        -: 5191:
        -: 5192:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5193:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5193-block  0
call    0 never executed
call    1 never executed
        -: 5194:
        -: 5195:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5196:int UnitTest::reportable_disabled_test_count() const {
        1: 5197:  return impl()->reportable_disabled_test_count();
        1: 5197-block  0
call    0 returned 1
call    1 returned 1
        -: 5198:}
        -: 5199:
        -: 5200:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5201:int UnitTest::disabled_test_count() const {
    #####: 5202:  return impl()->disabled_test_count();
    %%%%%: 5202-block  0
call    0 never executed
call    1 never executed
        -: 5203:}
        -: 5204:
        -: 5205:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5206:int UnitTest::reportable_test_count() const {
    #####: 5207:  return impl()->reportable_test_count();
    %%%%%: 5207-block  0
call    0 never executed
call    1 never executed
        -: 5208:}
        -: 5209:
        -: 5210:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5211:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5211-block  0
call    0 never executed
call    1 never executed
        -: 5212:
        -: 5213:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5214:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5214-block  0
call    0 returned 2
call    1 returned 2
        -: 5215:
        -: 5216:// Gets the time of the test program start, in ms from the start of the
        -: 5217:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5218:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5219:  return impl()->start_timestamp();
    %%%%%: 5219-block  0
call    0 never executed
call    1 never executed
        -: 5220:}
        -: 5221:
        -: 5222:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5223:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5224:  return impl()->elapsed_time();
        1: 5224-block  0
call    0 returned 1
call    1 returned 1
        -: 5225:}
        -: 5226:
        -: 5227:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5228:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5229:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5229-block  0
call    0 returned 1
call    1 returned 1
        -: 5230:
        -: 5231:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5232:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5233:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5233-block  0
call    0 never executed
call    1 never executed
        -: 5234:
        -: 5235:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5236:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5237:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5238:  return impl()->GetTestSuite(i);
    %%%%%: 5238-block  0
call    0 never executed
call    1 never executed
        -: 5239:}
        -: 5240:
        -: 5241://  Legacy API is deprecated but still available
        -: 5242:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5243:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5244:  return impl()->GetTestCase(i);
    %%%%%: 5244-block  0
call    0 never executed
call    1 never executed
        -: 5245:}
        -: 5246:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5247:
        -: 5248:// Returns the TestResult containing information on test failures and
        -: 5249:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5250:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5251:  return *impl()->ad_hoc_test_result();
    %%%%%: 5251-block  0
call    0 never executed
call    1 never executed
        -: 5252:}
        -: 5253:
        -: 5254:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5255:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5256:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5257:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5257-block  0
call    0 never executed
call    1 never executed
        -: 5258:}
        -: 5259:
        -: 5260:// Returns the list of event listeners that can be used to track events
        -: 5261:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 4 returned 100% blocks executed 100%
        4: 5262:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
        4: 5262-block  0
call    0 returned 4
call    1 returned 4
        -: 5263:
        -: 5264:// Registers and returns a global test environment.  When a test
        -: 5265:// program is run, all global test environments will be set-up in the
        -: 5266:// order they were registered.  After all tests in the program have
        -: 5267:// finished, all global test environments will be torn-down in the
        -: 5268:// *reverse* order they were registered.
        -: 5269://
        -: 5270:// The UnitTest object takes ownership of the given environment.
        -: 5271://
        -: 5272:// We don't protect this under mutex_, as we only support calling it
        -: 5273:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5274:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5275:  if (env == nullptr) {
    %%%%%: 5275-block  0
branch  0 never executed
branch  1 never executed
    #####: 5276:    return nullptr;
    %%%%%: 5276-block  0
        -: 5277:  }
        -: 5278:
    #####: 5279:  impl_->environments().push_back(env);
    %%%%%: 5279-block  0
call    0 never executed
call    1 never executed
    #####: 5280:  return env;
        -: 5281:}
        -: 5282:
        -: 5283:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5284:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5285:// this to report their results.  The user code should use the
        -: 5286:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5287:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5288:                                 const char* file_name, int line_number,
        -: 5289:                                 const std::string& message,
        -: 5290:                                 const std::string& os_stack_trace)
        -: 5291:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5292:  Message msg;
    %%%%%: 5292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5292-block  1
call    4 never executed
    #####: 5293:  msg << message;
    %%%%%: 5293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5294:
    #####: 5295:  internal::MutexLock lock(&mutex_);
    %%%%%: 5295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5295-block  1
call    4 never executed
    #####: 5296:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5296-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5297:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5297-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5297-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5298:
    #####: 5299:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5299-block  1
call    3 never executed
    %%%%%: 5299-block  2
branch  4 never executed
branch  5 never executed
    #####: 5300:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5300-block  1
call    3 never executed
    #####: 5301:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5302:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5302-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5302-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5302-block  3
call    9 never executed
    $$$$$: 5302-block  4
call   10 never executed
    $$$$$: 5302-block  5
    #####: 5303:          << trace.message;
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5304:    }
        -: 5305:  }
        -: 5306:
    #####: 5307:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5307-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5307-block  2
    %%%%%: 5307-block  3
    %%%%%: 5307-block  4
branch  6 never executed
branch  7 never executed
    #####: 5308:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5308-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5309:  }
        -: 5310:
        -: 5311:  const TestPartResult result = TestPartResult(
    #####: 5312:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5312-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5312-block  2
call    7 never executed
    $$$$$: 5312-block  3
    $$$$$: 5312-block  4
call    8 never executed
    #####: 5313:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5314:      result);
    %%%%%: 5314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5315:
    #####: 5316:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5316-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5316-block  1
branch  2 never executed
branch  3 never executed
        -: 5317:      result_type != TestPartResult::kSkip) {
        -: 5318:    // gtest_break_on_failure takes precedence over
        -: 5319:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5320:    // in the code (perhaps in order to use Google Test assertions
        -: 5321:    // with another testing framework) and specify the former on the
        -: 5322:    // command line for debugging.
    #####: 5323:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5323-block  0
branch  0 never executed
branch  1 never executed
        -: 5324:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5325:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5326:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5327:      // the --gtest_catch_exceptions flags are specified.
        -: 5328:      DebugBreak();
        -: 5329:#elif (!defined(__native_client__)) &&            \
        -: 5330:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5331:     (defined(__x86_64__) || defined(__i386__)))
        -: 5332:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5333:      asm("int3");
    %%%%%: 5333-block  0
call    0 never executed
        -: 5334:#else
        -: 5335:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5336:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5337:      // portability: some debuggers don't correctly trap abort().
        -: 5338:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5339:#endif  // GTEST_OS_WINDOWS
    #####: 5340:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5340-block  0
branch  0 never executed
branch  1 never executed
        -: 5341:#if GTEST_HAS_EXCEPTIONS
    #####: 5342:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5342-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5342-block  1
call    4 never executed
    $$$$$: 5342-block  2
call    5 never executed
        -: 5343:#else
        -: 5344:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5345:      // that cannot be suppressed in VC 7.1 or below.
        -: 5346:      exit(1);
        -: 5347:#endif
        -: 5348:    }
        -: 5349:  }
    #####: 5350:}
        -: 5351:
        -: 5352:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5353:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5354:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5355:// when invoked elsewhere.  If the result already contains a property with
        -: 5356:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5357:void UnitTest::RecordProperty(const std::string& key,
        -: 5358:                              const std::string& value) {
    #####: 5359:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5359-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5359-block  1
call    4 never executed
    $$$$$: 5359-block  2
call    5 never executed
    #####: 5360:}
        -: 5361:
        -: 5362:// Runs all tests in this UnitTest object and prints the result.
        -: 5363:// Returns 0 if successful, or 1 otherwise.
        -: 5364://
        -: 5365:// We don't protect this under mutex_, as we only support calling it
        -: 5366:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5367:int UnitTest::Run() {
        -: 5368:  const bool in_death_test_child_process =
        1: 5369:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5369-block  0
call    0 returned 1
        -: 5370:
        -: 5371:  // Google Test implements this protocol for catching that a test
        -: 5372:  // program exits before returning control to Google Test:
        -: 5373:  //
        -: 5374:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5375:  //      is specified by the environment variable
        -: 5376:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5377:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5378:  //
        -: 5379:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5380:  // running a Google-Test-based test program and check the existence
        -: 5381:  // of the file at the end of the test execution to see if it has
        -: 5382:  // exited prematurely.
        -: 5383:
        -: 5384:  // If we are in the child process of a death test, don't
        -: 5385:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5386:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5387:  // the file upon entering/leaving this function.  If the program
        -: 5388:  // somehow exits before this function has a chance to return, the
        -: 5389:  // premature-exit file will be left undeleted, causing a test runner
        -: 5390:  // that understands the premature-exit-file protocol to report the
        -: 5391:  // test as having failed.
        -: 5392:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5393:      in_death_test_child_process
        -: 5394:          ? nullptr
       1*: 5395:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5395-block  0
        1: 5395-block  1
call    2 returned 1
        1: 5395-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5395-block  3
call    6 never executed
        -: 5396:
        -: 5397:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5398:  // used for the duration of the program.
        1: 5399:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5399-block  0
call    0 returned 1
call    1 returned 1
        -: 5400:
        -: 5401:#if GTEST_OS_WINDOWS
        -: 5402:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5403:  // tests or this is executing in the context of death test child
        -: 5404:  // process. In either case the user does not want to see pop-up dialogs
        -: 5405:  // about crashes - they are expected.
        -: 5406:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5407:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5408:    // SetErrorMode doesn't exist on CE.
        -: 5409:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5410:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5411:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5412:
        -: 5413:#if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5414:    // Death test children can be terminated with _abort().  On Windows,
        -: 5415:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5416:    // abort message to go to stderr instead.
        -: 5417:    _set_error_mode(_OUT_TO_STDERR);
        -: 5418:#endif
        -: 5419:
        -: 5420:#if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5421:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5422:    // offering a choice to debug the aborted program. We need to suppress
        -: 5423:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5424:    // executed. Google Test will notify the user of any unexpected
        -: 5425:    // failure via stderr.
        -: 5426:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5427:      _set_abort_behavior(
        -: 5428:          0x0,                                    // Clear the following flags:
        -: 5429:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5430:
        -: 5431:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5432:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5433:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5434:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5435:    if (!IsDebuggerPresent()) {
        -: 5436:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5437:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5438:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5439:    }
        -: 5440:#endif
        -: 5441:  }
        -: 5442:#endif  // GTEST_OS_WINDOWS
        -: 5443:
        1: 5444:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5445:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5446:             "auxiliary test code (environments or event listeners)")
       1*: 5447:             ? 0
        1: 5447-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5447-block  1
    %%%%%: 5447-block  2
        2: 5448:             : 1;
        1: 5448-block  0
call    0 returned 1
        1: 5448-block  1
        -: 5449:}
        -: 5450:
        -: 5451:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5452:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5453:const char* UnitTest::original_working_dir() const {
    #####: 5454:  return impl_->original_working_dir_.c_str();
    %%%%%: 5454-block  0
call    0 never executed
        -: 5455:}
        -: 5456:
        -: 5457:// Returns the TestSuite object for the test that's currently running,
        -: 5458:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5459:const TestSuite* UnitTest::current_test_suite() const
        -: 5460:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5461:  internal::MutexLock lock(&mutex_);
    %%%%%: 5461-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5462:  return impl_->current_test_suite();
    %%%%%: 5462-block  0
call    0 never executed
    %%%%%: 5462-block  1
        -: 5463:}
        -: 5464:
        -: 5465:// Legacy API is still available but deprecated
        -: 5466:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5467:const TestCase* UnitTest::current_test_case() const
        -: 5468:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5469:  internal::MutexLock lock(&mutex_);
    %%%%%: 5469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5470:  return impl_->current_test_suite();
    %%%%%: 5470-block  0
call    0 never executed
    %%%%%: 5470-block  1
        -: 5471:}
        -: 5472:#endif
        -: 5473:
        -: 5474:// Returns the TestInfo object for the test that's currently running,
        -: 5475:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5476:const TestInfo* UnitTest::current_test_info() const
        -: 5477:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5478:  internal::MutexLock lock(&mutex_);
    %%%%%: 5478-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5479:  return impl_->current_test_info();
    %%%%%: 5479-block  0
call    0 never executed
    %%%%%: 5479-block  1
        -: 5480:}
        -: 5481:
        -: 5482:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5483:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5483-block  0
call    0 never executed
        -: 5484:
        -: 5485:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5486:// value-parameterized tests and instantiate and register them.
        -: 5487:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5488:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5489:  return impl_->parameterized_test_registry();
    %%%%%: 5489-block  0
call    0 never executed
        -: 5490:}
        -: 5491:
        -: 5492:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 5493:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5493-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5493-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5493-block  2
    $$$$$: 5493-block  3
call    7 never executed
    $$$$$: 5493-block  4
call    8 never executed
        -: 5494:
        -: 5495:// Destructor of UnitTest.
       1*: 5496:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5496:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5496-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        1: 5496:UnitTest::~UnitTest() { delete impl_; }
        1: 5496-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5496-block  1
call    2 returned 1
        1: 5496-block  2
call    3 returned 1
------------------
        -: 5497:
        -: 5498:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5499:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5500:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5501:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5502:  internal::MutexLock lock(&mutex_);
    %%%%%: 5502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5502-block  1
call    3 never executed
    $$$$$: 5502-block  2
call    4 never executed
    #####: 5503:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5503-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5504:}
        -: 5505:
        -: 5506:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5507:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5508:  internal::MutexLock lock(&mutex_);
    %%%%%: 5508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5508-block  1
call    4 never executed
    #####: 5509:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5509-block  1
call    3 never executed
    #####: 5510:}
        -: 5511:
        -: 5512:namespace internal {
        -: 5513:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5514:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5515:    : parent_(parent),
        -: 5516:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5517:          default_global_test_part_result_reporter_(this),
        -: 5518:      default_per_thread_test_part_result_reporter_(this),
        -: 5519:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5520:          &default_global_test_part_result_reporter_),
        -: 5521:      per_thread_test_part_result_reporter_(
        -: 5522:          &default_per_thread_test_part_result_reporter_),
        -: 5523:      parameterized_test_registry_(),
        -: 5524:      parameterized_tests_registered_(false),
        -: 5525:      last_death_test_suite_(-1),
        -: 5526:      current_test_suite_(nullptr),
        -: 5527:      current_test_info_(nullptr),
        -: 5528:      ad_hoc_test_result_(),
        -: 5529:      os_stack_trace_getter_(nullptr),
        -: 5530:      post_flag_parse_init_performed_(false),
        -: 5531:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5532:      random_(0),       // Will be reseeded before first use.
        -: 5533:      start_timestamp_(0),
        -: 5534:      elapsed_time_(0),
        -: 5535:#if GTEST_HAS_DEATH_TEST
        1: 5536:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5536-block  0
call    0 returned 1
        -: 5537:#endif
        -: 5538:      // Will be overridden by the flag before first use.
        2: 5539:      catch_exceptions_(false) {
        1: 5539-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5539-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5539-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5539-block  3
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1: 5539-block  4
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
    $$$$$: 5539-block  5
    $$$$$: 5539-block  6
call   30 never executed
    $$$$$: 5539-block  7
call   31 never executed
    $$$$$: 5539-block  8
call   32 never executed
    $$$$$: 5539-block  9
call   33 never executed
    $$$$$: 5539-block 10
call   34 never executed
    $$$$$: 5539-block 11
call   35 never executed
    $$$$$: 5539-block 12
call   36 never executed
    $$$$$: 5539-block 13
call   37 never executed
    $$$$$: 5539-block 14
call   38 never executed
    $$$$$: 5539-block 15
call   39 never executed
    $$$$$: 5539-block 16
call   40 never executed
    $$$$$: 5539-block 17
call   41 never executed
    $$$$$: 5539-block 18
call   42 never executed
    $$$$$: 5539-block 19
call   43 never executed
    $$$$$: 5539-block 20
call   44 never executed
    $$$$$: 5539-block 21
call   45 never executed
        1: 5540:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5540-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5540-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5541:}
        1: 5541-block  0
        -: 5542:
        2: 5543:UnitTestImpl::~UnitTestImpl() {
        -: 5544:  // Deletes every TestSuite.
        1: 5545:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5546:
        -: 5547:  // Deletes every Environment.
        1: 5548:  ForEach(environments_, internal::Delete<Environment>);
        -: 5549:
        1: 5550:  delete os_stack_trace_getter_;
        2: 5551:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 5543:UnitTestImpl::~UnitTestImpl() {
        -: 5544:  // Deletes every TestSuite.
        -: 5545:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5546:
        -: 5547:  // Deletes every Environment.
        -: 5548:  ForEach(environments_, internal::Delete<Environment>);
        -: 5549:
        -: 5550:  delete os_stack_trace_getter_;
        1: 5551:}
        1: 5551-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        1: 5543:UnitTestImpl::~UnitTestImpl() {
        1: 5543-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5544:  // Deletes every TestSuite.
        1: 5545:  ForEach(test_suites_, internal::Delete<TestSuite>);
        1: 5545-block  0
call    0 returned 1
        -: 5546:
        -: 5547:  // Deletes every Environment.
        1: 5548:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 5549:
        1: 5550:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5550-block  0
call    2 returned 1
        1: 5551:}
------------------
        -: 5552:
        -: 5553:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5554:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5555:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5556:// otherwise.  If the result already contains a property with the same key,
        -: 5557:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5558:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5559:  std::string xml_element;
    %%%%%: 5559-block  0
call    0 never executed
    %%%%%: 5559-block  1
call    1 never executed
    $$$$$: 5559-block  2
call    2 never executed
        -: 5560:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5561:
    #####: 5562:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5563:    xml_element = "testcase";
    %%%%%: 5563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5564:    test_result = &(current_test_info_->result_);
    %%%%%: 5564-block  0
    #####: 5565:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5565-block  0
branch  0 never executed
branch  1 never executed
    #####: 5566:    xml_element = "testsuite";
    %%%%%: 5566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5567:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5567-block  0
        -: 5568:  } else {
    #####: 5569:    xml_element = "testsuites";
    %%%%%: 5569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5570:    test_result = &ad_hoc_test_result_;
    %%%%%: 5570-block  0
        -: 5571:  }
    #####: 5572:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5573:}
        -: 5574:
        -: 5575:#if GTEST_HAS_DEATH_TEST
        -: 5576:// Disables event forwarding if the control is currently in a death test
        -: 5577:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5578:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5579:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5579-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5580:    listeners()->SuppressEventForwarding();
    %%%%%: 5580-block  0
call    0 never executed
call    1 never executed
        1: 5581:}
        -: 5582:#endif  // GTEST_HAS_DEATH_TEST
        -: 5583:
        -: 5584:// Initializes event listeners performing XML output as specified by
        -: 5585:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5586:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5587:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5587-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5587-block  1
call    3 returned 1
    $$$$$: 5587-block  2
call    4 never executed
        1: 5588:  if (output_format == "xml") {
        1: 5588-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5589:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5589-block  0
call    0 never executed
    %%%%%: 5589-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5590:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5590-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5590-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5590-block  2
call   10 never executed
    $$$$$: 5590-block  3
call   11 never executed
    $$$$$: 5590-block  4
call   12 never executed
    $$$$$: 5590-block  5
        1: 5591:  } else if (output_format == "json") {
        1: 5591-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5592:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5592-block  0
call    0 never executed
    %%%%%: 5592-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5593:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5593-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5593-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5593-block  2
call   10 never executed
    $$$$$: 5593-block  3
call   11 never executed
    $$$$$: 5593-block  4
call   12 never executed
    $$$$$: 5593-block  5
        1: 5594:  } else if (output_format != "") {
        1: 5594-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5595:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5595-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5595-block  1
call    3 never executed
    %%%%%: 5595-block  2
call    4 never executed
    $$$$$: 5595-block  3
call    5 never executed
    $$$$$: 5595-block  4
    #####: 5596:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5596-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5596-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5597:  }
        1: 5598:}
        -: 5599:
        -: 5600:#if GTEST_CAN_STREAM_RESULTS_
        -: 5601:// Initializes event listeners for streaming test results in string form.
        -: 5602:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 5603:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5604:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        1: 5605:  if (!target.empty()) {
        1: 5605-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5606:    const size_t pos = target.find(':');
    %%%%%: 5606-block  0
call    0 never executed
    #####: 5607:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5608:      listeners()->Append(
    %%%%%: 5608-block  0
call    0 never executed
    %%%%%: 5608-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5609:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5609-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5609-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5609-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5609-block  3
call   12 never executed
    $$$$$: 5609-block  4
call   13 never executed
    $$$$$: 5609-block  5
    $$$$$: 5609-block  6
call   14 never executed
    $$$$$: 5609-block  7
call   15 never executed
        -: 5610:    } else {
    #####: 5611:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5611-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5611-block  1
call    2 never executed
    $$$$$: 5611-block  2
call    3 never executed
    #####: 5612:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5612-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5612-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5613:    }
        -: 5614:  }
        1: 5615:}
        1: 5615-block  0
        -: 5616:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5617:
        -: 5618:// Performs initialization dependent upon flag values obtained in
        -: 5619:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5620:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5621:// this function is also called from RunAllTests.  Since this function can be
        -: 5622:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 67%
        2: 5623:void UnitTestImpl::PostFlagParsingInit() {
        -: 5624:  // Ensures that this function does not execute more than once.
        2: 5625:  if (!post_flag_parse_init_performed_) {
        2: 5625-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5626:    post_flag_parse_init_performed_ = true;
        -: 5627:
        -: 5628:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5629:    // Register to send notifications about key process state changes.
        -: 5630:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5631:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5632:
        -: 5633:#if GTEST_HAS_DEATH_TEST
        1: 5634:    InitDeathTestSubprocessControlInfo();
        1: 5634-block  0
call    0 returned 1
        1: 5635:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5636:#endif  // GTEST_HAS_DEATH_TEST
        -: 5637:
        -: 5638:    // Registers parameterized tests. This makes parameterized tests
        -: 5639:    // available to the UnitTest reflection API without running
        -: 5640:    // RUN_ALL_TESTS.
        1: 5641:    RegisterParameterizedTests();
call    0 returned 1
        -: 5642:
        -: 5643:    // Configures listeners for XML output. This makes it possible for users
        -: 5644:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5645:    ConfigureXmlOutput();
call    0 returned 1
        -: 5646:
        1: 5647:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5648:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5648-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5649:    }
        -: 5650:
        -: 5651:#if GTEST_CAN_STREAM_RESULTS_
        -: 5652:    // Configures listeners for streaming test results to the specified server.
        1: 5653:    ConfigureStreamingOutput();
        1: 5653-block  0
call    0 returned 1
        -: 5654:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5655:
        -: 5656:#if GTEST_HAS_ABSL
        -: 5657:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5658:      absl::FailureSignalHandlerOptions options;
        -: 5659:      absl::InstallFailureSignalHandler(options);
        -: 5660:    }
        -: 5661:#endif  // GTEST_HAS_ABSL
        -: 5662:  }
        2: 5663:}
        -: 5664:
        -: 5665:// A predicate that checks the name of a TestSuite against a known
        -: 5666:// value.
        -: 5667://
        -: 5668:// This is used for implementation of the UnitTest class only.  We put
        -: 5669:// it in the anonymous namespace to prevent polluting the outer
        -: 5670:// namespace.
        -: 5671://
        -: 5672:// TestSuiteNameIs is copyable.
        -: 5673:class TestSuiteNameIs {
        -: 5674: public:
        -: 5675:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 100%
        3: 5676:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
        3: 5676-block  0
call    0 returned 3
        -: 5677:
        -: 5678:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2: 5679:  bool operator()(const TestSuite* test_suite) const {
       4*: 5680:    return test_suite != nullptr &&
        2: 5680-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5680-block  1
    %%%%%: 5680-block  2
        4: 5681:           strcmp(test_suite->name(), name_.c_str()) == 0;
        2: 5681-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5681-block  1
        -: 5682:  }
        -: 5683:
        -: 5684: private:
        -: 5685:  std::string name_;
        -: 5686:};
        -: 5687:
        -: 5688:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5689:// exist, creates one and returns it.  It's the CALLER'S
        -: 5690:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5691:// TESTS ARE NOT SHUFFLED.
        -: 5692://
        -: 5693:// Arguments:
        -: 5694://
        -: 5695://   test_suite_name: name of the test suite
        -: 5696://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5697://                    this is not a typed or a type-parameterized test suite.
        -: 5698://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5699://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 3 returned 100% blocks executed 48%
        3: 5700:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5701:    const char* test_suite_name, const char* type_param,
        -: 5702:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5703:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5704:  // Can we find a TestSuite with the given name?
        -: 5705:  const auto test_suite =
        3: 5706:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
        3: 5706-block  0
call    0 returned 3
call    1 returned 3
    $$$$$: 5706-block  1
    $$$$$: 5706-block  2
        6: 5707:                   TestSuiteNameIs(test_suite_name));
        3: 5707-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 5707-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3: 5707-block  2
call   10 returned 3
call   11 returned 3
call   12 returned 3
    $$$$$: 5707-block  3
call   13 never executed
    $$$$$: 5707-block  4
    $$$$$: 5707-block  5
call   14 never executed
    $$$$$: 5707-block  6
    $$$$$: 5707-block  7
call   15 never executed
    $$$$$: 5707-block  8
        -: 5708:
        3: 5709:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3: 5709-block  0
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        2: 5709-block  1
call    6 returned 2
    $$$$$: 5709-block  2
        -: 5710:
        -: 5711:  // No.  Let's create one.
        -: 5712:  auto* const new_test_suite =
        1: 5713:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5713-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5713-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5713-block  2
call    6 never executed
        -: 5714:
        2: 5715:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        1: 5715-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5715-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 5715-block  2
    $$$$$: 5715-block  3
    $$$$$: 5715-block  4
call    8 never executed
        -: 5716:  // Is this a death test suite?
        1: 5717:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5717-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5717-block  1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$: 5717-block  2
call   11 never executed
    $$$$$: 5717-block  3
    $$$$$: 5717-block  4
call   12 never executed
    $$$$$: 5717-block  5
        -: 5718:    // Yes.  Inserts the test suite after the last death test suite
        -: 5719:    // defined so far.  This only works when the test suites haven't
        -: 5720:    // been shuffled.  Otherwise we may end up running a death test
        -: 5721:    // after a non-death test.
    #####: 5722:    ++last_death_test_suite_;
    #####: 5723:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
    $$$$$: 5723-block  0
    $$$$$: 5723-block  1
    #####: 5724:                        new_test_suite);
    %%%%%: 5724-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5724-block  1
    $$$$$: 5724-block  2
        -: 5725:  } else {
        -: 5726:    // No.  Appends to the end of the list.
        1: 5727:    test_suites_.push_back(new_test_suite);
        1: 5727-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5728:  }
        -: 5729:
        1: 5730:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5730-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5730-block  1
        1: 5731:  return new_test_suite;
        1: 5731-block  0
call    0 returned 1
        -: 5732:}
        -: 5733:
        -: 5734:// Helpers for setting up / tearing down the given environment.  They
        -: 5735:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5736:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5736-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5737:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5737-block  0
call    0 never executed
        -: 5738:
        -: 5739:// Runs all tests in this UnitTest object, prints the result, and
        -: 5740:// returns true if all tests are successful.  If any exception is
        -: 5741:// thrown during a test, the test is considered to be failed, but the
        -: 5742:// rest of the tests will still be run.
        -: 5743://
        -: 5744:// When parameterized tests are enabled, it expands and registers
        -: 5745:// parameterized tests first in RegisterParameterizedTests().
        -: 5746:// All other functions called from RunAllTests() may safely assume that
        -: 5747:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 52%
        1: 5748:bool UnitTestImpl::RunAllTests() {
        -: 5749:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5750:  // called.
        1: 5751:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5751-block  0
call    0 returned 1
        -: 5752:
        -: 5753:  // Do not run any test if the --help flag was specified.
       1*: 5754:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5754-block  0
        -: 5755:
        -: 5756:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5757:  // user didn't call InitGoogleTest.
        1: 5758:  PostFlagParsingInit();
        1: 5758-block  0
call    0 returned 1
        -: 5759:
        -: 5760:  // Even if sharding is not on, test runners may want to use the
        -: 5761:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5762:  // protocol.
        1: 5763:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5764:
        -: 5765:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5766:  // death test.
        1: 5767:  bool in_subprocess_for_death_test = false;
        -: 5768:
        -: 5769:#if GTEST_HAS_DEATH_TEST
        1: 5770:  in_subprocess_for_death_test =
        1: 5771:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5772:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5773:  if (in_subprocess_for_death_test) {
        -: 5774:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5775:  }
        -: 5776:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5777:#endif  // GTEST_HAS_DEATH_TEST
        -: 5778:
        1: 5779:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5780:                                        in_subprocess_for_death_test);
        -: 5781:
        -: 5782:  // Compares the full test names with the filter to decide which
        -: 5783:  // tests to run.
        -: 5784:  const bool has_tests_to_run =
       1*: 5785:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5785-block  0
        1: 5785-block  1
        1: 5785-block  2
call    2 returned 1
        1: 5786:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5787:
        -: 5788:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5789:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5790:    // This must be called *after* FilterTests() has been called.
    #####: 5791:    ListTestsMatchingFilter();
    %%%%%: 5791-block  0
call    0 never executed
    #####: 5792:    return true;
        -: 5793:  }
        -: 5794:
        1: 5795:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5795-block  0
call    0 returned 1
        -: 5796:
        -: 5797:  // True if and only if at least one test has failed.
        1: 5798:  bool failed = false;
        -: 5799:
        1: 5800:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5801:
        1: 5802:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5803:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5804:
        -: 5805:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5806:  // when we are inside the subprocess of a death test.
       1*: 5807:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5807-block  0
        1: 5807-block  1
        -: 5808:
        -: 5809:  // Repeats forever if the repeat count is negative.
        1: 5810:  const bool gtest_repeat_forever = repeat < 0;
        -: 5811:
        -: 5812:  // Should test environments be set up and torn down for each repeat, or only
        -: 5813:  // set up on the first and torn down on the last iteration? If there is no
        -: 5814:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5815:  // environments to avoid leaks in case one of the environments is using
        -: 5816:  // resources that are external to this process. Without this check there would
        -: 5817:  // be no way to clean up those external resources automatically.
        1: 5818:  const bool recreate_environments_when_repeating =
       1*: 5819:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5819-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5819-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5819-block  2
        1: 5819-block  3
        -: 5820:      gtest_repeat_forever;
        -: 5821:
        2: 5822:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5822-block  0
        2: 5822-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5822-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5822-block  3
        -: 5823:    // We want to preserve failures generated by ad-hoc test
        -: 5824:    // assertions executed before RUN_ALL_TESTS().
        1: 5825:    ClearNonAdHocTestResult();
        1: 5825-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5826:
        1: 5827:    Timer timer;
        1: 5827-block  0
call    0 returned 1
        -: 5828:
        -: 5829:    // Shuffles test suites and tests if requested.
        1: 5830:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5830-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5831:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5831-block  0
call    0 never executed
call    1 never executed
        -: 5832:      // This should be done before calling OnTestIterationStart(),
        -: 5833:      // such that a test event listener can see the actual test order
        -: 5834:      // in the event.
    #####: 5835:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5836:    }
        -: 5837:
        -: 5838:    // Tells the unit test event listeners that the tests are about to start.
        1: 5839:    repeater->OnTestIterationStart(*parent_, i);
        1: 5839-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5840:
        -: 5841:    // Runs each test suite if there is at least one test to run.
        1: 5842:    if (has_tests_to_run) {
        1: 5842-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5843:      // Sets up all environments beforehand. If test environments aren't
        -: 5844:      // recreated for each iteration, only do so on the first iteration.
       1*: 5845:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5845-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5845-block  1
branch  2 never executed
branch  3 never executed
        1: 5846:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5846-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5847:        ForEach(environments_, SetUpEnvironment);
        1: 5847-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5848:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5848-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5849:      }
        -: 5850:
        -: 5851:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5852:      // during global set-up.
        1: 5853:      if (Test::IsSkipped()) {
        1: 5853-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5853-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5854:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5855:        // emitted by default.
        -: 5856:        TestResult& test_result =
    #####: 5857:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5857-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5857-block  1
call    3 never executed
    #####: 5858:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5858-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5858-block  1
        -: 5859:          const TestPartResult& test_part_result =
    #####: 5860:              test_result.GetTestPartResult(j);
    %%%%%: 5860-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5861:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5862:            const std::string& result = test_part_result.message();
    %%%%%: 5862-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5862-block  1
call    5 never executed
    %%%%%: 5862-block  2
call    6 never executed
    $$$$$: 5862-block  3
call    7 never executed
    $$$$$: 5862-block  4
    $$$$$: 5862-block  5
call    8 never executed
    #####: 5863:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5864:          }
        -: 5865:        }
    #####: 5866:        fflush(stdout);
    %%%%%: 5866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5867:      } else if (!Test::HasFatalFailure()) {
        1: 5867-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5867-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5868:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5868-block  0
        2: 5868-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 5868-block  2
        -: 5869:             test_index++) {
        1: 5870:          GetMutableSuiteCase(test_index)->Run();
        1: 5870-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5870-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*: 5871:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5871-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5871-block  1
        1: 5871-block  2
        1: 5871-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5872:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5872-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5872-block  2
branch  6 never executed
branch  7 never executed
    #####: 5873:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5873-block  0
    %%%%%: 5873-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5873-block  2
    #####: 5874:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5874-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5875:            }
    #####: 5876:            break;
    %%%%%: 5876-block  0
        -: 5877:          }
        -: 5878:        }
    #####: 5879:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5879-block  1
branch  3 never executed
branch  4 never executed
        -: 5880:        // If there was a fatal failure during the global setup then we know we
        -: 5881:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5882:        // skipped to make this obvious in the output.
    #####: 5883:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5883-block  0
    %%%%%: 5883-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5883-block  2
        -: 5884:             test_index++) {
    #####: 5885:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5885-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5886:        }
        -: 5887:      }
        -: 5888:
        -: 5889:      // Tears down all environments in reverse order afterwards. If test
        -: 5890:      // environments aren't recreated for each iteration, only do so on the
        -: 5891:      // last iteration.
       1*: 5892:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5892-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5892-block  1
branch  2 never executed
branch  3 never executed
        1: 5893:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5893-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5894:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5894-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5894-block  1
    $$$$$: 5894-block  2
        -: 5895:                      TearDownEnvironment);
        1: 5896:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5896-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5897:      }
        -: 5898:    }
        -: 5899:
        1: 5900:    elapsed_time_ = timer.Elapsed();
        1: 5900-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5901:
        -: 5902:    // Tells the unit test event listener that the tests have just finished.
        1: 5903:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5903-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5904:
        -: 5905:    // Gets the result and clears it.
        1: 5906:    if (!Passed()) {
        1: 5906-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5906-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5907:      failed = true;
    %%%%%: 5907-block  0
        -: 5908:    }
        -: 5909:
        -: 5910:    // Restores the original test order after the iteration.  This
        -: 5911:    // allows the user to quickly repro a failure that happens in the
        -: 5912:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5913:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5914:    // case the user somehow changes the value of the flag somewhere
        -: 5915:    // (it's always safe to unshuffle the tests).
        1: 5916:    UnshuffleTests();
        1: 5916-block  0
call    0 returned 1
        -: 5917:
        1: 5918:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5919:      // Picks a new random seed for each iteration.
    #####: 5920:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5920-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5920-block  1
        -: 5921:    }
        -: 5922:  }
        -: 5923:
        1: 5924:  repeater->OnTestProgramEnd(*parent_);
        1: 5924-block  0
call    0 returned 1
        -: 5925:
        1: 5926:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5927:    ColoredPrintf(
    %%%%%: 5927-block  0
call    0 never executed
        -: 5928:        GTestColor::kRed,
        -: 5929:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5930:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5931:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5932:        " will start to enforce the valid usage. "
        -: 5933:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5934:#if GTEST_FOR_GOOGLE_
        -: 5935:    ColoredPrintf(GTestColor::kRed,
        -: 5936:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5937:#endif  // GTEST_FOR_GOOGLE_
        -: 5938:  }
        -: 5939:
        1: 5940:  return !failed;
        1: 5940-block  0
        -: 5941:}
        -: 5942:
        -: 5943:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5944:// if the variable is present. If a file already exists at this location, this
        -: 5945:// function will write over it. If the variable is present, but the file cannot
        -: 5946:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5947:void WriteToShardStatusFileIfNeeded() {
        1: 5948:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5948-block  0
call    0 returned 1
        1: 5949:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5950:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5950-block  0
call    0 never executed
    #####: 5951:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5952:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5952-block  0
call    0 never executed
        -: 5953:                    "Could not write to the test shard status file \"%s\" "
        -: 5954:                    "specified by the %s environment variable.\n",
        -: 5955:                    test_shard_file, kTestShardStatusFile);
    #####: 5956:      fflush(stdout);
call    0 never executed
    #####: 5957:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5958:    }
    #####: 5959:    fclose(file);
    %%%%%: 5959-block  0
call    0 never executed
        -: 5960:  }
        1: 5961:}
        -: 5962:
        -: 5963:// Checks whether sharding is enabled by examining the relevant
        -: 5964:// environment variable values. If the variables are present,
        -: 5965:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5966:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5967:// disabled because it must only be applied to the original test
        -: 5968:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 5969:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 5970:                 bool in_subprocess_for_death_test) {
        2: 5971:  if (in_subprocess_for_death_test) {
        2: 5971-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5972:    return false;
    %%%%%: 5972-block  0
        -: 5973:  }
        -: 5974:
        2: 5975:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5975-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5976:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5976-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5977:
        2: 5978:  if (total_shards == -1 && shard_index == -1) {
        2: 5978-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5978-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5979:    return false;
        2: 5979-block  0
    #####: 5980:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5980-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5980-block  1
branch  2 never executed
branch  3 never executed
    #####: 5981:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 5981-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5981-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5981-block  2
    #####: 5982:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 5982-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5982-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5982-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5983:                                  << ", but have left " << kTestTotalShards
    %%%%%: 5983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5983-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5984:                                  << " unset.\n";
    %%%%%: 5984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5984-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5984-block  2
call    6 never executed
    #####: 5985:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5985-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5985-block  1
call    7 never executed
    $$$$$: 5985-block  2
call    8 never executed
    $$$$$: 5985-block  3
    #####: 5986:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5987:    exit(EXIT_FAILURE);
    %%%%%: 5987-block  0
call    0 never executed
    #####: 5988:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5988-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5988-block  1
branch  2 never executed
branch  3 never executed
    #####: 5989:    const Message msg = Message()
    %%%%%: 5989-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5989-block  1
    #####: 5990:                        << "Invalid environment variables: you have "
    %%%%%: 5990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5991:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 5991-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5991-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5991-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5992:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5992-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5992-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5992-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5992-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5992-block  4
call   12 never executed
    #####: 5993:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5993-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5993-block  1
call    7 never executed
    $$$$$: 5993-block  2
call    8 never executed
    $$$$$: 5993-block  3
    #####: 5994:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5995:    exit(EXIT_FAILURE);
    %%%%%: 5995-block  0
call    0 never executed
    #####: 5996:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 5996-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5996-block  1
branch  2 never executed
branch  3 never executed
        -: 5997:    const Message msg =
    #####: 5998:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 5998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5998-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5998-block  2
    #####: 5999:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 5999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5999-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5999-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6000:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6000-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6000-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6000-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6000-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6001:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6001-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6001-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6001-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6001-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6001-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6001-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 6001-block  6
call   18 never executed
    #####: 6002:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6002-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6002-block  1
call    7 never executed
    $$$$$: 6002-block  2
call    8 never executed
    $$$$$: 6002-block  3
    #####: 6003:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6004:    exit(EXIT_FAILURE);
    %%%%%: 6004-block  0
call    0 never executed
        -: 6005:  }
        -: 6006:
    #####: 6007:  return total_shards > 1;
    %%%%%: 6007-block  0
        -: 6008:}
        -: 6009:
        -: 6010:// Parses the environment variable var as an Int32. If it is unset,
        -: 6011:// returns default_val. If it is not an Int32, prints an error
        -: 6012:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6013:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6014:  const char* str_val = posix::GetEnv(var);
        4: 6014-block  0
call    0 returned 4
        4: 6015:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6016:    return default_val;
        4: 6016-block  0
        -: 6017:  }
        -: 6018:
        -: 6019:  int32_t result;
    #####: 6020:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6020-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6020-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6020-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6020-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6020-block  5
call   15 never executed
    $$$$$: 6020-block  6
        -: 6021:                  str_val, &result)) {
    #####: 6022:    exit(EXIT_FAILURE);
    %%%%%: 6022-block  0
call    0 never executed
        -: 6023:  }
    #####: 6024:  return result;
    %%%%%: 6024-block  0
        -: 6025:}
        -: 6026:
        -: 6027:// Given the total number of shards, the shard index, and the test id,
        -: 6028:// returns true if and only if the test should be run on this shard. The test id
        -: 6029:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6030:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6031:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6032:  return (test_id % total_shards) == shard_index;
    %%%%%: 6032-block  0
        -: 6033:}
        -: 6034:
        -: 6035:// Compares the name of each test with the user-specified filter to
        -: 6036:// decide whether the test should be run, then records the result in
        -: 6037:// each TestSuite and TestInfo object.
        -: 6038:// If shard_tests == true, further filters tests based on sharding
        -: 6039:// variables in the environment - see
        -: 6040:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6041:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 63%
        1: 6042:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6043:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6044:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6044-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6044-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6044-block  2
        1: 6044-block  3
        1: 6045:                                   : -1;
        -: 6046:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6047:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6047-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6047-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6047-block  2
        1: 6047-block  3
        1: 6048:                                  : -1;
        -: 6049:
        -: 6050:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        2: 6051:      GTEST_FLAG_GET(filter));
        1: 6051-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 6051-block  1
call    4 never executed
        2: 6052:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6052-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6052-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 6052-block  2
    $$$$$: 6052-block  3
    $$$$$: 6052-block  4
call    8 never executed
        -: 6053:  // num_runnable_tests are the number of tests that will
        -: 6054:  // run across all shards (i.e., match filter and are not disabled).
        -: 6055:  // num_selected_tests are the number of tests to be run on
        -: 6056:  // this shard.
        1: 6057:  int num_runnable_tests = 0;
        1: 6058:  int num_selected_tests = 0;
        2: 6059:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        2: 6059-block  0
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 6059-block  1
call    5 returned 1
call    6 returned 1
        2: 6060:    const std::string& test_suite_name = test_suite->name();
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 6060-block  0
call    5 returned 1
        1: 6060-block  1
call    6 returned 1
    $$$$$: 6060-block  2
call    7 never executed
    $$$$$: 6060-block  3
    $$$$$: 6060-block  4
call    8 never executed
        1: 6061:    test_suite->set_should_run(false);
call    0 returned 1
        -: 6062:
        4: 6063:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
        4: 6063-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 3 (fallthrough)
branch  3 taken 1
        3: 6064:      TestInfo* const test_info = test_suite->test_info_list()[j];
        3: 6064-block  0
call    0 returned 3
call    1 returned 3
        6: 6065:      const std::string test_name(test_info->name());
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 3
    $$$$$: 6065-block  0
    $$$$$: 6065-block  1
call    6 never executed
        -: 6066:      // A test is disabled if test suite name or test name matches
        -: 6067:      // kDisableTestFilter.
        -: 6068:      const bool is_disabled =
       6*: 6069:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6069-block  0
branch  3 taken 3 (fallthrough)
branch  4 taken 0
    %%%%%: 6069-block  1
        3: 6069-block  2
        3: 6070:          disable_test_filter.MatchesName(test_name);
        3: 6070-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6070-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3
        3: 6071:      test_info->is_disabled_ = is_disabled;
        -: 6072:
        -: 6073:      const bool matches_filter =
        3: 6074:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
        3: 6074-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 6075:      test_info->matches_filter_ = matches_filter;
        -: 6076:
        3: 6077:      const bool is_runnable =
       3*: 6078:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
        3: 6078-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6078-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 6078-block  2
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3: 6078-block  3
    %%%%%: 6078-block  4
        -: 6079:          matches_filter;
        -: 6080:
        -: 6081:      const bool is_in_another_shard =
       3*: 6082:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
        3: 6082-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 6082-block  1
        3: 6082-block  2
    #####: 6083:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6083-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        3: 6084:      test_info->is_in_another_shard_ = is_in_another_shard;
       3*: 6085:      const bool is_selected = is_runnable && !is_in_another_shard;
        3: 6085-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6085-block  1
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3: 6085-block  2
    %%%%%: 6085-block  3
        -: 6086:
        3: 6087:      num_runnable_tests += is_runnable;
        3: 6088:      num_selected_tests += is_selected;
        -: 6089:
        3: 6090:      test_info->should_run_ = is_selected;
       3*: 6091:      test_suite->set_should_run(test_suite->should_run() || is_selected);
        3: 6091-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1: 6091-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        3: 6091-block  2
    %%%%%: 6091-block  3
        3: 6091-block  4
call    5 returned 3
        -: 6092:    }
        -: 6093:  }
        2: 6094:  return num_selected_tests;
        1: 6094-block  0
call    0 returned 1
        1: 6094-block  1
        -: 6095:}
        -: 6096:
        -: 6097:// Prints the given C-string on a single line by replacing all '\n'
        -: 6098:// characters with string "\\n".  If the output takes more than
        -: 6099:// max_length characters, only prints the first max_length characters
        -: 6100:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6101:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6102:  if (str != nullptr) {
    %%%%%: 6102-block  0
branch  0 never executed
branch  1 never executed
    #####: 6103:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6103-block  0
    %%%%%: 6103-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 6103-block  2
    #####: 6104:      if (i >= max_length) {
    %%%%%: 6104-block  0
branch  0 never executed
branch  1 never executed
    #####: 6105:        printf("...");
    %%%%%: 6105-block  0
call    0 never executed
    #####: 6106:        break;
        -: 6107:      }
    #####: 6108:      if (*str == '\n') {
    %%%%%: 6108-block  0
branch  0 never executed
branch  1 never executed
    #####: 6109:        printf("\\n");
    %%%%%: 6109-block  0
call    0 never executed
    #####: 6110:        i += 2;
        -: 6111:      } else {
    #####: 6112:        printf("%c", *str);
    %%%%%: 6112-block  0
call    0 never executed
    #####: 6113:        ++i;
        -: 6114:      }
        -: 6115:    }
        -: 6116:  }
    #####: 6117:}
        -: 6118:
        -: 6119:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6120:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6121:  // Print at most this many characters for each type/value parameter.
    #####: 6122:  const int kMaxParamLength = 250;
        -: 6123:
    #####: 6124:  for (auto* test_suite : test_suites_) {
    %%%%%: 6124-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6124-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6124-block  2
call    5 never executed
    %%%%%: 6124-block  3
call    6 never executed
    #####: 6125:    bool printed_test_suite_name = false;
        -: 6126:
    #####: 6127:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6127-block  1
    #####: 6128:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6128-block  0
call    0 never executed
call    1 never executed
    #####: 6129:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6130:        if (!printed_test_suite_name) {
    %%%%%: 6130-block  0
branch  0 never executed
branch  1 never executed
    #####: 6131:          printed_test_suite_name = true;
    #####: 6132:          printf("%s.", test_suite->name());
    %%%%%: 6132-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6133:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6134:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6135:            // We print the type parameter on a single line to make
        -: 6136:            // the output easy to parse by a program.
    #####: 6137:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6137-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6138:          }
    #####: 6139:          printf("\n");
    %%%%%: 6139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6140:        }
    #####: 6141:        printf("  %s", test_info->name());
    %%%%%: 6141-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6142:        if (test_info->value_param() != nullptr) {
    %%%%%: 6142-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6143:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6144:          // We print the value parameter on a single line to make the
        -: 6145:          // output easy to parse by a program.
    #####: 6146:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6146-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6147:        }
    #####: 6148:        printf("\n");
    %%%%%: 6148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6149:      }
        -: 6150:    }
        -: 6151:  }
    #####: 6152:  fflush(stdout);
    %%%%%: 6152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6153:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6153-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6153-block  1
call    3 never executed
    $$$$$: 6153-block  2
call    4 never executed
    #####: 6154:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6154-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6154-block  2
    %%%%%: 6154-block  3
    %%%%%: 6154-block  4
branch  6 never executed
branch  7 never executed
    #####: 6155:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6155-block  0
call    0 never executed
    %%%%%: 6155-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6155-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6155-block  3
call    8 never executed
    $$$$$: 6155-block  4
call    9 never executed
    $$$$$: 6155-block  5
    $$$$$: 6155-block  6
call   10 never executed
    $$$$$: 6155-block  7
    #####: 6156:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6156-block  0
call    5 never executed
    $$$$$: 6156-block  1
    #####: 6157:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6157-block  0
call    3 never executed
    $$$$$: 6157-block  1
call    4 never executed
    #####: 6158:    if (output_format == "xml") {
    %%%%%: 6158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6159:      XmlUnitTestResultPrinter(
    %%%%%: 6159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6159-block  1
call    4 never executed
    $$$$$: 6159-block  2
call    5 never executed
    $$$$$: 6159-block  3
    #####: 6160:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6160-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6160-block  1
call    4 never executed
    $$$$$: 6160-block  2
    #####: 6161:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6162:    } else if (output_format == "json") {
    %%%%%: 6162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6163:      JsonUnitTestResultPrinter(
    %%%%%: 6163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6163-block  1
call    4 never executed
    $$$$$: 6163-block  2
call    5 never executed
    $$$$$: 6163-block  3
    #####: 6164:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6164-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6164-block  1
call    4 never executed
    $$$$$: 6164-block  2
    #####: 6165:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6166:    }
    #####: 6167:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6167-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6167-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6167-block  2
call    7 never executed
    $$$$$: 6167-block  3
call    8 never executed
    $$$$$: 6167-block  4
    #####: 6168:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6169:  }
    #####: 6170:}
        -: 6171:
        -: 6172:// Sets the OS stack trace getter.
        -: 6173://
        -: 6174:// Does nothing if the input and the current OS stack trace getter are
        -: 6175:// the same; otherwise, deletes the old getter and makes the input the
        -: 6176:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6177:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6178:    OsStackTraceGetterInterface* getter) {
    #####: 6179:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6179-block  0
branch  0 never executed
branch  1 never executed
    #####: 6180:    delete os_stack_trace_getter_;
    %%%%%: 6180-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6180-block  1
call    2 never executed
    #####: 6181:    os_stack_trace_getter_ = getter;
    %%%%%: 6181-block  0
        -: 6182:  }
    #####: 6183:}
        -: 6184:
        -: 6185:// Returns the current OS stack trace getter if it is not NULL;
        -: 6186:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6187:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 17 returned 100% blocks executed 100%
       17: 6188:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       17: 6189:  if (os_stack_trace_getter_ == nullptr) {
       17: 6189-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 16
        -: 6190:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6191:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6192:#else
        1: 6193:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6193-block  0
call    0 returned 1
call    1 returned 1
        -: 6194:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6195:  }
        -: 6196:
       17: 6197:  return os_stack_trace_getter_;
       17: 6197-block  0
        -: 6198:}
        -: 6199:
        -: 6200:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 14 returned 100% blocks executed 83%
       14: 6201:TestResult* UnitTestImpl::current_test_result() {
       14: 6202:  if (current_test_info_ != nullptr) {
       14: 6202-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 2
       12: 6203:    return &current_test_info_->result_;
       12: 6203-block  0
        -: 6204:  }
        2: 6205:  if (current_test_suite_ != nullptr) {
        2: 6205-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6206:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6206-block  0
        -: 6207:  }
        2: 6208:  return &ad_hoc_test_result_;
        2: 6208-block  0
        -: 6209:}
        -: 6210:
        -: 6211:// Shuffles all test suites, and the tests within each test suite,
        -: 6212:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6213:void UnitTestImpl::ShuffleTests() {
        -: 6214:  // Shuffles the death test suites.
    #####: 6215:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6215-block  0
call    0 never executed
call    1 never executed
        -: 6216:
        -: 6217:  // Shuffles the non-death test suites.
    #####: 6218:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6219:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6220:
        -: 6221:  // Shuffles the tests inside each test suite.
    #####: 6222:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6222-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6222-block  1
call    5 never executed
    %%%%%: 6222-block  2
call    6 never executed
    #####: 6223:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6224:  }
    #####: 6225:}
    %%%%%: 6225-block  0
        -: 6226:
        -: 6227:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6228:void UnitTestImpl::UnshuffleTests() {
        2: 6229:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6229-block  0
        2: 6229-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -: 6230:    // Unshuffles the tests in each test suite.
        1: 6231:    test_suites_[i]->UnshuffleTests();
        1: 6231-block  0
call    0 returned 1
call    1 returned 1
        -: 6232:    // Resets the index of each test suite.
        1: 6233:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6234:  }
        1: 6235:}
        -: 6236:
        -: 6237:// Returns the current OS stack trace as an std::string.
        -: 6238://
        -: 6239:// The maximum number of stack frames to be included is specified by
        -: 6240:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6241:// specifies the number of top frames to be skipped, which doesn't
        -: 6242:// count against the number of frames to be included.
        -: 6243://
        -: 6244:// For example, if Foo() calls Bar(), which in turn calls
        -: 6245:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6246:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6247:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6248:GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/, int skip_count) {
        -: 6249:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6250:  // to what the user really wants to skip.
    #####: 6251:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6251-block  0
call    0 never executed
call    1 never executed
        -: 6252:}
        -: 6253:
        -: 6254:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6255:// suppress unreachable code warnings.
        -: 6256:namespace {
        -: 6257:class ClassUniqueToAlwaysTrue {};
        -: 6258:}  // namespace
        -: 6259:
function _ZN7testing8internal6IsTrueEb called 13 returned 100% blocks executed 100%
       13: 6260:bool IsTrue(bool condition) { return condition; }
       13: 6260-block  0
        -: 6261:
function _ZN7testing8internal10AlwaysTrueEv called 6 returned 100% blocks executed 67%
        6: 6262:bool AlwaysTrue() {
        -: 6263:#if GTEST_HAS_EXCEPTIONS
        -: 6264:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6265:  // but it makes the compiler think that it may throw.
       6*: 6266:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
        6: 6266-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    %%%%%: 6266-block  1
call    3 never executed
call    4 never executed
        -: 6267:#endif  // GTEST_HAS_EXCEPTIONS
        6: 6268:  return true;
        6: 6268-block  0
        -: 6269:}
        -: 6270:
        -: 6271:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6272:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6273:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6274:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6275:  const size_t prefix_len = strlen(prefix);
    #####: 6276:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6276-block  0
branch  0 never executed
branch  1 never executed
    #####: 6277:    *pstr += prefix_len;
    #####: 6278:    return true;
    %%%%%: 6278-block  0
        -: 6279:  }
    #####: 6280:  return false;
    %%%%%: 6280-block  0
        -: 6281:}
        -: 6282:
        -: 6283:// Parses a string as a command line flag.  The string should have
        -: 6284:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6285:// part can be omitted.
        -: 6286://
        -: 6287:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 6288:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6289:                                  bool def_optional) {
        -: 6290:  // str and flag must not be NULL.
       4*: 6291:  if (str == nullptr || flag_name == nullptr) return nullptr;
        4: 6291-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6291-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6291-block  2
        -: 6292:
        -: 6293:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6294:  const std::string flag_str =
       12: 6295:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
        4: 6295-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 6295-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 6295-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
        4: 6295-block  3
call   12 returned 4
    $$$$$: 6295-block  4
    $$$$$: 6295-block  5
    $$$$$: 6295-block  6
        4: 6296:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 6297:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6297-block  0
        -: 6298:
        -: 6299:  // Skips the flag name.
        1: 6300:  const char* flag_end = str + flag_len;
        -: 6301:
        -: 6302:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6303:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6303-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6303-block  1
branch  2 never executed
branch  3 never executed
    #####: 6304:    return flag_end;
    %%%%%: 6304-block  0
        -: 6305:  }
        -: 6306:
        -: 6307:  // If def_optional is true and there are more characters after the
        -: 6308:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6309:  // the flag name.
       1*: 6310:  if (flag_end[0] != '=') return nullptr;
        1: 6310-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6310-block  1
        -: 6311:
        -: 6312:  // Returns the string after "=".
        1: 6313:  return flag_end + 1;
        1: 6313-block  0
        -: 6314:}
        -: 6315:
        -: 6316:// Parses a string for a bool flag, in the form of either
        -: 6317:// "--flag=value" or "--flag".
        -: 6318://
        -: 6319:// In the former case, the value is taken as true as long as it does
        -: 6320:// not start with '0', 'f', or 'F'.
        -: 6321://
        -: 6322:// In the latter case, the value is taken as true.
        -: 6323://
        -: 6324:// On success, stores the value of the flag in *value, and returns
        -: 6325:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6326:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6327:  // Gets the value of the flag as a string.
        3: 6328:  const char* const value_str = ParseFlagValue(str, flag_name, true);
        3: 6328-block  0
call    0 returned 3
        -: 6329:
        -: 6330:  // Aborts if the parsing failed.
        3: 6331:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6331-block  0
        -: 6332:
        -: 6333:  // Converts the string value to a bool.
    #####: 6334:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6334-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6334-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6334-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6334-block  3
    %%%%%: 6334-block  4
    #####: 6335:  return true;
    %%%%%: 6335-block  0
        -: 6336:}
        -: 6337:
        -: 6338:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6339://
        -: 6340:// On success, stores the value of the flag in *value, and returns
        -: 6341:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6342:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6343:  // Gets the value of the flag as a string.
    #####: 6344:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6344-block  0
call    0 never executed
        -: 6345:
        -: 6346:  // Aborts if the parsing failed.
    #####: 6347:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6347-block  0
        -: 6348:
        -: 6349:  // Sets *value to the value of the flag.
    #####: 6350:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6350-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6350-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6350-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6350-block  3
call   10 never executed
    $$$$$: 6350-block  4
call   11 never executed
    #####: 6351:                    value);
    %%%%%: 6351-block  0
        -: 6352:}
        -: 6353:
        -: 6354:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6355://
        -: 6356:// On success, stores the value of the flag in *value, and returns
        -: 6357:// true.  On failure, returns false without changing *value.
        -: 6358:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6359:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6360:  // Gets the value of the flag as a string.
        1: 6361:  const char* const value_str = ParseFlagValue(str, flag_name, false);
        1: 6361-block  0
call    0 returned 1
        -: 6362:
        -: 6363:  // Aborts if the parsing failed.
       1*: 6364:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6364-block  0
        -: 6365:
        -: 6366:  // Sets *value to the value of the flag.
        1: 6367:  *value = value_str;
        1: 6367-block  0
call    0 returned 1
        1: 6368:  return true;
        -: 6369:}
        -: 6370:
        -: 6371:// Determines whether a string has a prefix that Google Test uses for its
        -: 6372:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6373:// If Google Test detects that a command line flag has its prefix but is not
        -: 6374:// recognized, it will print its help message. Flags starting with
        -: 6375:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6376:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6377:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6378:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6378-block  0
call    0 never executed
    %%%%%: 6378-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6379:          SkipPrefix("/", &str)) &&
    %%%%%: 6379-block  0
call    0 never executed
    #####: 6380:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6380-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6380-block  1
    %%%%%: 6380-block  2
    #####: 6381:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6381-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6382:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6382-block  0
call    0 never executed
    %%%%%: 6382-block  1
        -: 6383:}
        -: 6384:
        -: 6385:// Prints a string containing code-encoded text.  The following escape
        -: 6386:// sequences can be used in the string to control the text color:
        -: 6387://
        -: 6388://   @@    prints a single '@' character.
        -: 6389://   @R    changes the color to red.
        -: 6390://   @G    changes the color to green.
        -: 6391://   @Y    changes the color to yellow.
        -: 6392://   @D    changes to the default terminal text color.
        -: 6393://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6394:static void PrintColorEncoded(const char* str) {
    #####: 6395:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6395-block  0
        -: 6396:
        -: 6397:  // Conceptually, we split the string into segments divided by escape
        -: 6398:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6399:  // each iteration, the str pointer advances to the beginning of the
        -: 6400:  // next segment.
        -: 6401:  for (;;) {
    #####: 6402:    const char* p = strchr(str, '@');
    #####: 6403:    if (p == nullptr) {
    %%%%%: 6403-block  0
branch  0 never executed
branch  1 never executed
    #####: 6404:      ColoredPrintf(color, "%s", str);
    %%%%%: 6404-block  0
call    0 never executed
    #####: 6405:      return;
    %%%%%: 6405-block  0
        -: 6406:    }
        -: 6407:
    #####: 6408:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6408-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6408-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6408-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6408-block  3
call   10 never executed
    $$$$$: 6408-block  4
    $$$$$: 6408-block  5
call   11 never executed
        -: 6409:
    #####: 6410:    const char ch = p[1];
    #####: 6411:    str = p + 2;
    #####: 6412:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6413:      ColoredPrintf(color, "@");
    %%%%%: 6413-block  0
call    0 never executed
    #####: 6414:    } else if (ch == 'D') {
    %%%%%: 6414-block  0
branch  0 never executed
branch  1 never executed
    #####: 6415:      color = GTestColor::kDefault;
    %%%%%: 6415-block  0
    #####: 6416:    } else if (ch == 'R') {
    %%%%%: 6416-block  0
branch  0 never executed
branch  1 never executed
    #####: 6417:      color = GTestColor::kRed;
    %%%%%: 6417-block  0
    #####: 6418:    } else if (ch == 'G') {
    %%%%%: 6418-block  0
branch  0 never executed
branch  1 never executed
    #####: 6419:      color = GTestColor::kGreen;
    %%%%%: 6419-block  0
    #####: 6420:    } else if (ch == 'Y') {
    %%%%%: 6420-block  0
branch  0 never executed
branch  1 never executed
    #####: 6421:      color = GTestColor::kYellow;
    %%%%%: 6421-block  0
        -: 6422:    } else {
    #####: 6423:      --str;
    %%%%%: 6423-block  0
        -: 6424:    }
    #####: 6425:  }
    %%%%%: 6425-block  0
        -: 6426:}
        -: 6427:
        -: 6428:static const char kColorEncodedHelpMessage[] =
        -: 6429:    "This program contains tests written using " GTEST_NAME_
        -: 6430:    ". You can use the\n"
        -: 6431:    "following command line flags to control its behavior:\n"
        -: 6432:    "\n"
        -: 6433:    "Test Selection:\n"
        -: 6434:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6435:    "list_tests@D\n"
        -: 6436:    "      List the names of all tests instead of running them. The name of\n"
        -: 6437:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6438:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6439:    "filter=@YPOSITIVE_PATTERNS"
        -: 6440:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6441:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6442:    "but\n"
        -: 6443:    "      none of the negative patterns. '?' matches any single character; "
        -: 6444:    "'*'\n"
        -: 6445:    "      matches any substring; ':' separates two patterns.\n"
        -: 6446:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6447:    "also_run_disabled_tests@D\n"
        -: 6448:    "      Run all disabled tests too.\n"
        -: 6449:    "\n"
        -: 6450:    "Test Execution:\n"
        -: 6451:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6452:    "repeat=@Y[COUNT]@D\n"
        -: 6453:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6454:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6455:    "shuffle@D\n"
        -: 6456:    "      Randomize tests' orders on every iteration.\n"
        -: 6457:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6458:    "random_seed=@Y[NUMBER]@D\n"
        -: 6459:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6460:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6461:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6462:    "recreate_environments_when_repeating@D\n"
        -: 6463:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6464:    "      of the test.\n"
        -: 6465:    "\n"
        -: 6466:    "Test Output:\n"
        -: 6467:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6468:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6469:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6470:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6471:    "brief=1@D\n"
        -: 6472:    "      Only print test failures.\n"
        -: 6473:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6474:    "print_time=0@D\n"
        -: 6475:    "      Don't print the elapsed time of each test.\n"
        -: 6476:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6477:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6478:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6479:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6480:    "given\n"
        -: 6481:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6482:#if GTEST_CAN_STREAM_RESULTS_
        -: 6483:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6484:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6485:    "      Stream test results to the given server.\n"
        -: 6486:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6487:    "\n"
        -: 6488:    "Assertion Behavior:\n"
        -: 6489:#if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6490:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6491:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6492:    "      Set the default death test style.\n"
        -: 6493:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6494:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6495:    "break_on_failure@D\n"
        -: 6496:    "      Turn assertion failures into debugger break-points.\n"
        -: 6497:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6498:    "throw_on_failure@D\n"
        -: 6499:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6500:    "      test framework.\n"
        -: 6501:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6502:    "catch_exceptions=0@D\n"
        -: 6503:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6504:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6505:    "\n"
        -: 6506:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6507:    "list_tests@D, you can alternatively set "
        -: 6508:    "the corresponding\n"
        -: 6509:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6510:    "to\n"
        -: 6511:    "disable colored text output, you can either specify "
        -: 6512:    "@G--" GTEST_FLAG_PREFIX_
        -: 6513:    "color=no@D or set\n"
        -: 6514:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6515:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6516:    "\n"
        -: 6517:    "For more information, please read the " GTEST_NAME_
        -: 6518:    " documentation at\n"
        -: 6519:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6520:    "\n"
        -: 6521:    "(not one in your own code or tests), please report it to\n"
        -: 6522:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6523:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 12%
        1: 6524:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6525:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6526:  do {                                        \
        -: 6527:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6528:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6529:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6530:      return true;                            \
        -: 6531:    }                                         \
        -: 6532:  } while (false)
        -: 6533:
       1*: 6534:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
        1: 6534-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6534-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6534-block  2
       1*: 6535:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
        1: 6535-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6535-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6535-block  2
       1*: 6536:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
        1: 6536-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6536-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 6536-block  2
        1: 6537:  GTEST_INTERNAL_PARSE_FLAG(color);
        1: 6537-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6537-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 6537-block  2
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1: 6537-block  3
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1: 6537-block  4
    $$$$$: 6537-block  5
call   11 never executed
    #####: 6538:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6538-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6538-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6538-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6538-block  4
    $$$$$: 6538-block  5
call   11 never executed
    #####: 6539:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6539-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6539-block  2
    #####: 6540:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6540-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6540-block  2
    #####: 6541:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6541-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6541-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6541-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6541-block  4
    $$$$$: 6541-block  5
call   11 never executed
    #####: 6542:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6542-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6542-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6542-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6542-block  4
    $$$$$: 6542-block  5
call   11 never executed
    #####: 6543:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6543-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6543-block  2
    #####: 6544:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6544-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6544-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6544-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6544-block  4
    $$$$$: 6544-block  5
call   11 never executed
    #####: 6545:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6545-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6545-block  2
    #####: 6546:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6546-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6546-block  2
    #####: 6547:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6547-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6547-block  2
    #####: 6548:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6548-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6548-block  2
    #####: 6549:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6549-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6549-block  2
    #####: 6550:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6550-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6550-block  2
    #####: 6551:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6551-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6551-block  2
    #####: 6552:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6552-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6552-block  2
    #####: 6553:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6553-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6553-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6553-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6553-block  4
    $$$$$: 6553-block  5
call   11 never executed
    #####: 6554:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6554-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6554-block  2
    #####: 6555:  return false;
    %%%%%: 6555-block  0
        -: 6556:}
        -: 6557:
        -: 6558:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6559:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6560:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6560-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6561:  if (!flagfile) {
    %%%%%: 6561-block  0
branch  0 never executed
branch  1 never executed
    #####: 6562:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6562-block  1
call    3 never executed
    %%%%%: 6562-block  2
call    4 never executed
    $$$$$: 6562-block  3
call    5 never executed
    $$$$$: 6562-block  4
    #####: 6563:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6563-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6563-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6564:  }
    #####: 6565:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6565-block  1
call    4 never executed
    #####: 6566:  posix::FClose(flagfile);
    %%%%%: 6566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6567:  std::vector<std::string> lines;
    %%%%%: 6567-block  0
call    0 never executed
    %%%%%: 6567-block  1
call    1 never executed
    $$$$$: 6567-block  2
call    2 never executed
    #####: 6568:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6569:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6569-block  0
    %%%%%: 6569-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6569-block  2
    #####: 6570:    if (lines[i].empty()) continue;
    %%%%%: 6570-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6570-block  1
    #####: 6571:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6571-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6571-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6571-block  2
        -: 6572:  }
    #####: 6573:}
        -: 6574:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6575:
        -: 6576:// Parses the command line for Google Test flags, without initializing
        -: 6577:// other parts of Google Test.  The type parameter CharType can be
        -: 6578:// instantiated to either char or wchar_t.
        -: 6579:template <typename CharType>
       1*: 6580:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6581:  std::string flagfile_value;
       2*: 6582:  for (int i = 1; i < *argc; i++) {
       2*: 6583:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6584:    const char* const arg = arg_string.c_str();
        -: 6585:
        -: 6586:    using internal::ParseFlag;
        -: 6587:
       1*: 6588:    bool remove_flag = false;
       1*: 6589:    if (ParseGoogleTestFlag(arg)) {
       1*: 6590:      remove_flag = true;
        -: 6591:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6592:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6593:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6594:      LoadFlagsFromFile(flagfile_value);
    #####: 6595:      remove_flag = true;
        -: 6596:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6597:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6598:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6599:      // internal ones) trigger help display.
    #####: 6600:      g_help_flag = true;
        -: 6601:    }
        -: 6602:
       1*: 6603:    if (remove_flag) {
        -: 6604:      // Shift the remainder of the argv list left by one.  Note
        -: 6605:      // that argv has (*argc + 1) elements, the last one always being
        -: 6606:      // NULL.  The following loop moves the trailing NULL element as
        -: 6607:      // well.
       2*: 6608:      for (int j = i; j != *argc; j++) {
       1*: 6609:        argv[j] = argv[j + 1];
        -: 6610:      }
        -: 6611:
        -: 6612:      // Decrements the argument count.
       1*: 6613:      (*argc)--;
        -: 6614:
        -: 6615:      // We also need to decrement the iterator as we just removed
        -: 6616:      // an element.
       1*: 6617:      i--;
        -: 6618:    }
        -: 6619:  }
        -: 6620:
       1*: 6621:  if (g_help_flag) {
        -: 6622:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6623:    // latter may not be called at all if the user is using Google
        -: 6624:    // Test with another testing framework.
    #####: 6625:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6626:  }
       1*: 6627:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6580:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6581:  std::string flagfile_value;
    %%%%%: 6581-block  0
call    0 never executed
    %%%%%: 6581-block  1
call    1 never executed
    $$$$$: 6581-block  2
call    2 never executed
    #####: 6582:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6582-block  0
branch  0 never executed
branch  1 never executed
    #####: 6583:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6583-block  1
call    3 never executed
    $$$$$: 6583-block  2
call    4 never executed
    #####: 6584:    const char* const arg = arg_string.c_str();
    %%%%%: 6584-block  0
call    0 never executed
        -: 6585:
        -: 6586:    using internal::ParseFlag;
        -: 6587:
    #####: 6588:    bool remove_flag = false;
    #####: 6589:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6589-block  0
branch  3 never executed
branch  4 never executed
    #####: 6590:      remove_flag = true;
    %%%%%: 6590-block  0
        -: 6591:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6592:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6592-block  1
branch  3 never executed
branch  4 never executed
    #####: 6593:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6594:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6595:      remove_flag = true;
    %%%%%: 6595-block  0
        -: 6596:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6597:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6597-block  2
    %%%%%: 6597-block  3
    %%%%%: 6597-block  4
branch  6 never executed
branch  7 never executed
        -: 6598:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6599:      // internal ones) trigger help display.
    #####: 6600:      g_help_flag = true;
    %%%%%: 6600-block  0
        -: 6601:    }
        -: 6602:
    #####: 6603:    if (remove_flag) {
    %%%%%: 6603-block  0
branch  0 never executed
branch  1 never executed
        -: 6604:      // Shift the remainder of the argv list left by one.  Note
        -: 6605:      // that argv has (*argc + 1) elements, the last one always being
        -: 6606:      // NULL.  The following loop moves the trailing NULL element as
        -: 6607:      // well.
    #####: 6608:      for (int j = i; j != *argc; j++) {
    %%%%%: 6608-block  0
    %%%%%: 6608-block  1
branch  0 never executed
branch  1 never executed
    #####: 6609:        argv[j] = argv[j + 1];
    %%%%%: 6609-block  0
        -: 6610:      }
        -: 6611:
        -: 6612:      // Decrements the argument count.
    #####: 6613:      (*argc)--;
        -: 6614:
        -: 6615:      // We also need to decrement the iterator as we just removed
        -: 6616:      // an element.
    #####: 6617:      i--;
    %%%%%: 6617-block  0
        -: 6618:    }
        -: 6619:  }
        -: 6620:
    #####: 6621:  if (g_help_flag) {
    %%%%%: 6621-block  0
branch  0 never executed
branch  1 never executed
        -: 6622:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6623:    // latter may not be called at all if the user is using Google
        -: 6624:    // Test with another testing framework.
    #####: 6625:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6626:  }
    #####: 6627:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 50%
        1: 6580:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6581:  std::string flagfile_value;
        1: 6581-block  0
call    0 returned 1
        1: 6581-block  1
call    1 returned 1
    $$$$$: 6581-block  2
call    2 never executed
        2: 6582:  for (int i = 1; i < *argc; i++) {
        2: 6582-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        2: 6583:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6583-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6583-block  1
call    3 returned 1
    $$$$$: 6583-block  2
call    4 never executed
        1: 6584:    const char* const arg = arg_string.c_str();
        1: 6584-block  0
call    0 returned 1
        -: 6585:
        -: 6586:    using internal::ParseFlag;
        -: 6587:
        1: 6588:    bool remove_flag = false;
        1: 6589:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6589-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6590:      remove_flag = true;
        1: 6590-block  0
        -: 6591:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6592:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6592-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6592-block  1
branch  3 never executed
branch  4 never executed
    #####: 6593:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6593-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6594:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6595:      remove_flag = true;
    %%%%%: 6595-block  0
        -: 6596:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6597:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6597-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6597-block  2
    %%%%%: 6597-block  3
    %%%%%: 6597-block  4
branch  6 never executed
branch  7 never executed
        -: 6598:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6599:      // internal ones) trigger help display.
    #####: 6600:      g_help_flag = true;
    %%%%%: 6600-block  0
        -: 6601:    }
        -: 6602:
        1: 6603:    if (remove_flag) {
        1: 6603-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6604:      // Shift the remainder of the argv list left by one.  Note
        -: 6605:      // that argv has (*argc + 1) elements, the last one always being
        -: 6606:      // NULL.  The following loop moves the trailing NULL element as
        -: 6607:      // well.
        2: 6608:      for (int j = i; j != *argc; j++) {
        1: 6608-block  0
        2: 6608-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 6609:        argv[j] = argv[j + 1];
        1: 6609-block  0
        -: 6610:      }
        -: 6611:
        -: 6612:      // Decrements the argument count.
        1: 6613:      (*argc)--;
        -: 6614:
        -: 6615:      // We also need to decrement the iterator as we just removed
        -: 6616:      // an element.
        1: 6617:      i--;
        1: 6617-block  0
        -: 6618:    }
        -: 6619:  }
        -: 6620:
        1: 6621:  if (g_help_flag) {
        1: 6621-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6622:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6623:    // latter may not be called at all if the user is using Google
        -: 6624:    // Test with another testing framework.
    #####: 6625:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6625-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6626:  }
        1: 6627:}
------------------
        -: 6628:
        -: 6629:// Parses the command line for Google Test flags, without initializing
        -: 6630:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6631:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6632:#if GTEST_HAS_ABSL
        -: 6633:  if (*argc > 0) {
        -: 6634:    // absl::ParseCommandLine() requires *argc > 0.
        -: 6635:    auto positional_args = absl::flags_internal::ParseCommandLineImpl(
        -: 6636:        *argc, argv, absl::flags_internal::ArgvListAction::kRemoveParsedArgs,
        -: 6637:        absl::flags_internal::UsageFlagsAction::kHandleUsage,
        -: 6638:        absl::flags_internal::OnUndefinedFlag::kReportUndefined);
        -: 6639:    // Any command-line positional arguments not part of any command-line flag
        -: 6640:    // (or arguments to a flag) are copied back out to argv, with the program
        -: 6641:    // invocation name at position 0, and argc is resized. This includes
        -: 6642:    // positional arguments after the flag-terminating delimiter '--'.
        -: 6643:    // See https://abseil.io/docs/cpp/guides/flags.
        -: 6644:    std::copy(positional_args.begin(), positional_args.end(), argv);
        -: 6645:    if (static_cast<int>(positional_args.size()) < *argc) {
        -: 6646:      argv[positional_args.size()] = nullptr;
        -: 6647:      *argc = static_cast<int>(positional_args.size());
        -: 6648:    }
        -: 6649:  }
        -: 6650:#else
        1: 6651:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6651-block  0
call    0 returned 1
        -: 6652:#endif
        -: 6653:
        -: 6654:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6655:  // *_NSGetArgv() == argv
        -: 6656:  // Only applicable to char** version of argv
        -: 6657:#if GTEST_OS_MAC
        -: 6658:#ifndef GTEST_OS_IOS
        -: 6659:  if (*_NSGetArgv() == argv) {
        -: 6660:    *_NSGetArgc() = *argc;
        -: 6661:  }
        -: 6662:#endif
        -: 6663:#endif
        1: 6664:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6665:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6666:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6666-block  0
call    0 never executed
    #####: 6667:}
        -: 6668:
        -: 6669:// The internal implementation of InitGoogleTest().
        -: 6670://
        -: 6671:// The type parameter CharType can be instantiated to either char or
        -: 6672:// wchar_t.
        -: 6673:template <typename CharType>
       1*: 6674:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6675:  // We don't want to run the initialization code twice.
       1*: 6676:  if (GTestIsInitialized()) return;
        -: 6677:
       1*: 6678:  if (*argc <= 0) return;
        -: 6679:
       1*: 6680:  g_argvs.clear();
       3*: 6681:  for (int i = 0; i != *argc; i++) {
       2*: 6682:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6683:  }
        -: 6684:
        -: 6685:#if GTEST_HAS_ABSL
        -: 6686:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6687:
        -: 6688:  // When using the Abseil Flags library, set the program usage message to the
        -: 6689:  // help message, but remove the color-encoding from the message first.
        -: 6690:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6691:      kColorEncodedHelpMessage,
        -: 6692:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6693:#endif  // GTEST_HAS_ABSL
        -: 6694:
       1*: 6695:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6696:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6697:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6674:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6675:  // We don't want to run the initialization code twice.
    #####: 6676:  if (GTestIsInitialized()) return;
    %%%%%: 6676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6676-block  1
        -: 6677:
    #####: 6678:  if (*argc <= 0) return;
    %%%%%: 6678-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6678-block  1
        -: 6679:
    #####: 6680:  g_argvs.clear();
    %%%%%: 6680-block  0
call    0 never executed
    #####: 6681:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6681-block  0
branch  0 never executed
branch  1 never executed
    #####: 6682:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6682-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6682-block  1
call    4 never executed
    $$$$$: 6682-block  2
call    5 never executed
        -: 6683:  }
        -: 6684:
        -: 6685:#if GTEST_HAS_ABSL
        -: 6686:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6687:
        -: 6688:  // When using the Abseil Flags library, set the program usage message to the
        -: 6689:  // help message, but remove the color-encoding from the message first.
        -: 6690:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6691:      kColorEncodedHelpMessage,
        -: 6692:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6693:#endif  // GTEST_HAS_ABSL
        -: 6694:
    #####: 6695:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6695-block  0
call    0 never executed
    #####: 6696:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6697:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6674:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6675:  // We don't want to run the initialization code twice.
       1*: 6676:  if (GTestIsInitialized()) return;
        1: 6676-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6676-block  1
        -: 6677:
       1*: 6678:  if (*argc <= 0) return;
        1: 6678-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6678-block  1
        -: 6679:
        1: 6680:  g_argvs.clear();
        1: 6680-block  0
call    0 returned 1
        3: 6681:  for (int i = 0; i != *argc; i++) {
        3: 6681-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2: 6682:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6682-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6682-block  1
call    4 returned 2
    $$$$$: 6682-block  2
call    5 never executed
        -: 6683:  }
        -: 6684:
        -: 6685:#if GTEST_HAS_ABSL
        -: 6686:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6687:
        -: 6688:  // When using the Abseil Flags library, set the program usage message to the
        -: 6689:  // help message, but remove the color-encoding from the message first.
        -: 6690:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6691:      kColorEncodedHelpMessage,
        -: 6692:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6693:#endif  // GTEST_HAS_ABSL
        -: 6694:
        1: 6695:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6695-block  0
call    0 returned 1
        1: 6696:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6697:}
------------------
        -: 6698:
        -: 6699:}  // namespace internal
        -: 6700:
        -: 6701:// Initializes Google Test.  This must be called before calling
        -: 6702:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6703:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6704:// seen, it is removed from argv, and *argc is decremented.
        -: 6705://
        -: 6706:// No value is returned.  Instead, the Google Test flag variables are
        -: 6707:// updated.
        -: 6708://
        -: 6709:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6710:void InitGoogleTest(int* argc, char** argv) {
        -: 6711:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6712:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6713:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6714:  internal::InitGoogleTestImpl(argc, argv);
        1: 6714-block  0
call    0 returned 1
        -: 6715:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6716:}
        -: 6717:
        -: 6718:// This overloaded version can be used in Windows programs compiled in
        -: 6719:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6720:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6721:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6722:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6723:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6724:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6724-block  0
call    0 never executed
        -: 6725:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6726:}
        -: 6727:
        -: 6728:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6729:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6730:void InitGoogleTest() {
        -: 6731:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6732:  int argc = 1;
    #####: 6733:  const auto arg0 = "dummy";
    #####: 6734:  char* argv0 = const_cast<char*>(arg0);
    #####: 6735:  char** argv = &argv0;
        -: 6736:
        -: 6737:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6738:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6739:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6740:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6741:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6742:}
    %%%%%: 6742-block  0
        -: 6743:
        -: 6744:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6745:// Return value of first environment variable that is set and contains
        -: 6746:// a non-empty string. If there are none, return the "fallback" string.
        -: 6747:// Since we like the temporary directory to have a directory separator suffix,
        -: 6748:// add it if not provided in the environment variable value.
function _ZN7testingL17GetTempDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6749:static std::string GetTempDirFromEnv(
        -: 6750:    std::initializer_list<const char*> environment_variables,
        -: 6751:    const char* fallback, char separator) {
    #####: 6752:  for (const char* variable_name : environment_variables) {
    %%%%%: 6752-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6752-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6752-block  2
    #####: 6753:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6753-block  0
call    0 never executed
    #####: 6754:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6754-block  0
branch  2 never executed
branch  3 never executed
    #####: 6755:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6755-block  0
branch  0 never executed
branch  1 never executed
    #####: 6756:        return std::string(value).append(1, separator);
    %%%%%: 6756-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6756-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6756-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6756-block  3
call   10 never executed
call   11 never executed
    $$$$$: 6756-block  4
call   12 never executed
    $$$$$: 6756-block  5
    $$$$$: 6756-block  6
call   13 never executed
    $$$$$: 6756-block  7
        -: 6757:      }
    #####: 6758:      return value;
    %%%%%: 6758-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6758-block  1
call    4 never executed
    $$$$$: 6758-block  2
call    5 never executed
    $$$$$: 6758-block  3
        -: 6759:    }
        -: 6760:  }
    #####: 6761:  return fallback;
    %%%%%: 6761-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6761-block  1
call    4 never executed
    $$$$$: 6761-block  2
call    5 never executed
        -: 6762:}
        -: 6763:#endif
        -: 6764:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6765:std::string TempDir() {
        -: 6766:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6767:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6768:#elif GTEST_OS_WINDOWS || GTEST_OS_WINDOWS_MOBILE
        -: 6769:  return GetTempDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
        -: 6770:#elif GTEST_OS_LINUX_ANDROID
        -: 6771:  return GetTempDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6772:#else
    #####: 6773:  return GetTempDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
    %%%%%: 6773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6773-block  1
    %%%%%: 6773-block  2
        -: 6774:#endif
        -: 6775:}
        -: 6776:
        -: 6777:// Class ScopedTrace
        -: 6778:
        -: 6779:// Pushes the given source file location and message onto a per-thread
        -: 6780:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6781:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6782:  internal::TraceInfo trace;
    %%%%%: 6782-block  0
call    0 never executed
    %%%%%: 6782-block  1
call    1 never executed
    $$$$$: 6782-block  2
call    2 never executed
    #####: 6783:  trace.file = file;
    #####: 6784:  trace.line = line;
    #####: 6785:  trace.message.swap(message);
call    0 never executed
        -: 6786:
    #####: 6787:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6787-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6788:}
        -: 6789:
        -: 6790:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6791:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6792:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6792-block  0
call    0 never executed
call    1 never executed
    #####: 6793:}
        -: 6794:
        -: 6795:}  // namespace testing
