        -:    0:Source:/mnt/c/Users/Usuario/CLionProjects/ca_p1/unit_test/unit_test.cpp
        -:    0:Graph:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcno
        -:    0:Data:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcda
        -:    0:Runs:1
        -:    0:Source is newer than graph
        -:    1:#include <gtest/gtest.h>
        -:    2:#include <filesystem>
        -:    3:#include <string>
        -:    4:#include "../aos.cpp"
        -:    5:
        4:    6:TEST(unit_test, test_read_pixels)
        -:    7:{
        2:    8:    std::cout << "\nTEST: read_pixels()"
        -:    9:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
        1:   10:
        1:   11:    Pixel red = {255, 0, 0};
        1:   12:    Pixel black = {0, 0, 0};
        -:   13:    Pixel white = {255, 255, 255};
        1:   14:
       1*:   15:    std::cout << "Checking pixel 0 is red.\n";
       1*:   16:    EXPECT_EQ(red.r, x[0].r);
       1*:   17:    EXPECT_EQ(red.g, x[0].g);
        -:   18:    EXPECT_EQ(red.b, x[0].b);
        1:   19:
       1*:   20:    std::cout << "Checking pixel 5 is white.\n";
       1*:   21:    EXPECT_EQ(white.r, x[5].r);
       1*:   22:    EXPECT_EQ(white.g, x[5].g);
        -:   23:    EXPECT_EQ(white.b, x[5].b);
        1:   24:
       1*:   25:    std::cout << "Checking pixel 15 is black.\n";
       1*:   26:    EXPECT_EQ(black.r, x[15].r);
       1*:   27:    EXPECT_EQ(black.g, x[15].g);
        1:   28:    EXPECT_EQ(black.b, x[15].b);
------------------
_ZN31unit_test_test_read_pixels_TestC2Ev:
function _ZN31unit_test_test_read_pixels_TestC2Ev called 1 returned 100% blocks executed 100%
        1:    6:TEST(unit_test, test_read_pixels)
        1:    6-block  0
call    0 returned 1
------------------
_ZN31unit_test_test_read_pixels_TestD0Ev:
function _ZN31unit_test_test_read_pixels_TestD0Ev called 1 returned 100% blocks executed 100%
        1:    6:TEST(unit_test, test_read_pixels)
        1:    6-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN31unit_test_test_read_pixels_TestD2Ev:
function _ZN31unit_test_test_read_pixels_TestD2Ev called 1 returned 100% blocks executed 100%
        1:    6:TEST(unit_test, test_read_pixels)
        1:    6-block  0
call    0 returned 1
------------------
_ZN31unit_test_test_read_pixels_Test8TestBodyEv:
function _ZN31unit_test_test_read_pixels_Test8TestBodyEv called 1 returned 100% blocks executed 27%
        1:    6:TEST(unit_test, test_read_pixels)
        -:    7:{
        2:    8:    std::cout << "\nTEST: read_pixels()"
        1:    8-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    8-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$:    8-block  2
    $$$$$:    8-block  3
call    7 never executed
        -:    9:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
        1:   10:
        1:   11:    Pixel red = {255, 0, 0};
        1:   12:    Pixel black = {0, 0, 0};
        -:   13:    Pixel white = {255, 255, 255};
        1:   14:
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   15:    std::cout << "Checking pixel 0 is red.\n";
        1:   15-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   15-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   15-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   15-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   15-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   15-block  5
call   17 never executed
call   18 never executed
        1:   15-block  6
call   19 returned 1
    $$$$$:   15-block  7
call   20 never executed
    $$$$$:   15-block  8
    $$$$$:   15-block  9
call   21 never executed
    $$$$$:   15-block 10
    $$$$$:   15-block 11
call   22 never executed
       1*:   16:    EXPECT_EQ(red.r, x[0].r);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   16-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   16-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   16-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   16-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   16-block  4
call   17 never executed
call   18 never executed
        1:   16-block  5
call   19 returned 1
    $$$$$:   16-block  6
call   20 never executed
    $$$$$:   16-block  7
    $$$$$:   16-block  8
call   21 never executed
    $$$$$:   16-block  9
    $$$$$:   16-block 10
call   22 never executed
       1*:   17:    EXPECT_EQ(red.g, x[0].g);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   17-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   17-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   17-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   17-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   17-block  4
call   17 never executed
call   18 never executed
        1:   17-block  5
call   19 returned 1
    $$$$$:   17-block  6
call   20 never executed
    $$$$$:   17-block  7
    $$$$$:   17-block  8
call   21 never executed
    $$$$$:   17-block  9
    $$$$$:   17-block 10
call   22 never executed
        -:   18:    EXPECT_EQ(red.b, x[0].b);
        1:   19:
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   20:    std::cout << "Checking pixel 5 is white.\n";
        1:   20-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   20-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   20-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   20-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   20-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   20-block  5
call   17 never executed
call   18 never executed
        1:   20-block  6
call   19 returned 1
    $$$$$:   20-block  7
call   20 never executed
    $$$$$:   20-block  8
    $$$$$:   20-block  9
call   21 never executed
    $$$$$:   20-block 10
    $$$$$:   20-block 11
call   22 never executed
       1*:   21:    EXPECT_EQ(white.r, x[5].r);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   21-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   21-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   21-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   21-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   21-block  4
call   17 never executed
call   18 never executed
        1:   21-block  5
call   19 returned 1
    $$$$$:   21-block  6
call   20 never executed
    $$$$$:   21-block  7
    $$$$$:   21-block  8
call   21 never executed
    $$$$$:   21-block  9
    $$$$$:   21-block 10
call   22 never executed
       1*:   22:    EXPECT_EQ(white.g, x[5].g);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   22-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   22-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   22-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   22-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   22-block  4
call   17 never executed
call   18 never executed
        1:   22-block  5
call   19 returned 1
    $$$$$:   22-block  6
call   20 never executed
    $$$$$:   22-block  7
    $$$$$:   22-block  8
call   21 never executed
    $$$$$:   22-block  9
    $$$$$:   22-block 10
call   22 never executed
        -:   23:    EXPECT_EQ(white.b, x[5].b);
        1:   24:
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   25:    std::cout << "Checking pixel 15 is black.\n";
        1:   25-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   25-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   25-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   25-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   25-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   25-block  5
call   17 never executed
call   18 never executed
        1:   25-block  6
call   19 returned 1
    $$$$$:   25-block  7
call   20 never executed
    $$$$$:   25-block  8
    $$$$$:   25-block  9
call   21 never executed
    $$$$$:   25-block 10
    $$$$$:   25-block 11
call   22 never executed
       1*:   26:    EXPECT_EQ(black.r, x[15].r);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   26-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   26-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   26-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   26-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   26-block  4
call   17 never executed
call   18 never executed
        1:   26-block  5
call   19 returned 1
    $$$$$:   26-block  6
call   20 never executed
    $$$$$:   26-block  7
    $$$$$:   26-block  8
call   21 never executed
    $$$$$:   26-block  9
    $$$$$:   26-block 10
call   22 never executed
       1*:   27:    EXPECT_EQ(black.g, x[15].g);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   27-block  0
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   27-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   27-block  2
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   27-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   27-block  4
call   17 never executed
call   18 never executed
        1:   27-block  5
call   19 returned 1
    $$$$$:   27-block  6
call   20 never executed
    $$$$$:   27-block  7
    $$$$$:   27-block  8
call   21 never executed
    $$$$$:   27-block  9
    $$$$$:   27-block 10
call   22 never executed
        1:   28:    EXPECT_EQ(black.b, x[15].b);
------------------
        -:   29:}
        4:   30:
        -:   31:TEST(unit_test, test_mono)
        2:   32:{
        1:   33:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
        -:   34:    x = mono(x);
        1:   35:
       26:   36:    std::cout << "Checking every pixel is grayscale (R = G = B).\n";
        -:   37:    for(auto & i : x)
      25*:   38:    {
      25*:   39:        EXPECT_EQ(i.r, i.g);
        -:   40:        EXPECT_EQ(i.r, i.b);
        1:   41:    }
------------------
_ZN24unit_test_test_mono_TestC2Ev:
function _ZN24unit_test_test_mono_TestC2Ev called 1 returned 100% blocks executed 100%
        1:   30:
        1:   30-block  0
call    0 returned 1
------------------
_ZN24unit_test_test_mono_TestD0Ev:
function _ZN24unit_test_test_mono_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   30:
        1:   30-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN24unit_test_test_mono_TestD2Ev:
function _ZN24unit_test_test_mono_TestD2Ev called 1 returned 100% blocks executed 100%
        1:   30:
        1:   30-block  0
call    0 returned 1
------------------
_ZN24unit_test_test_mono_Test8TestBodyEv:
function _ZN24unit_test_test_mono_Test8TestBodyEv called 1 returned 100% blocks executed 39%
        1:   30:
        -:   31:TEST(unit_test, test_mono)
        2:   32:{
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   32-block  2
call    6 returned 1
    $$$$$:   32-block  3
    $$$$$:   32-block  4
call    7 never executed
        1:   33:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  0
call    3 returned 1
call    4 returned 1
        -:   34:    x = mono(x);
        1:   35:
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       26:   36:    std::cout << "Checking every pixel is grayscale (R = G = B).\n";
        1:   36-block  0
call    0 returned 1
call    1 returned 1
       26:   36-block  1
call    2 returned 26
branch  3 taken 25 (fallthrough)
branch  4 taken 1
       25:   36-block  2
call    5 returned 25
call    6 returned 25
        -:   37:    for(auto & i : x)
      25*:   38:    {
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
       25:   38-block  0
call    3 returned 25
branch  4 taken 0 (fallthrough)
branch  5 taken 25
    %%%%%:   38-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   38-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   38-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   38-block  4
call   16 never executed
call   17 never executed
       25:   38-block  5
call   18 returned 25
    $$$$$:   38-block  6
call   19 never executed
    $$$$$:   38-block  7
    $$$$$:   38-block  8
call   20 never executed
    $$$$$:   38-block  9
    $$$$$:   38-block 10
call   21 never executed
      25*:   39:        EXPECT_EQ(i.r, i.g);
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
       25:   39-block  0
call    3 returned 25
branch  4 taken 0 (fallthrough)
branch  5 taken 25
    %%%%%:   39-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   39-block  2
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   39-block  3
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   39-block  4
call   16 never executed
call   17 never executed
       25:   39-block  5
call   18 returned 25
    $$$$$:   39-block  6
call   19 never executed
    $$$$$:   39-block  7
    $$$$$:   39-block  8
call   20 never executed
    $$$$$:   39-block  9
    $$$$$:   39-block 10
call   21 never executed
        -:   40:        EXPECT_EQ(i.r, i.b);
        1:   41:    }
------------------
        -:   42:}
        4:   43:
        -:   44:TEST(unit_test, test_histogram)
        2:   45:{
        1:   46:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
        2:   47:    histogram(x, std::filesystem::path("../../unit_test/test_out/test.hst"));
        -:   48:    std::ifstream f = std::filesystem::path("../../unit_test/test_out/test.hst");
        4:   49:
        1:   50:    std::string s, pixels_with_red_0 = "5", pixels_with_red_255 = "20", pixels_with_green_255 = "5";
        1:   51:    std::getline(f, s);
       1*:   52:    std::cout << "Checking the number of pixels with a red value of 0 is the expected (black pixels).\n";
        -:   53:    EXPECT_EQ(s, pixels_with_red_0);
      256:   54:
        -:   55:    for (int i = 0; i < 255; i++)
      255:   56:    {
        -:   57:        std::getline(f, s);
        1:   58:    }
       1*:   59:    std::cout << "Checking the number of pixels with a red value of 255 is the expected (red pixels + white pixels).\n";
        -:   60:    EXPECT_EQ(s, pixels_with_red_255);
      257:   61:
        -:   62:    for (int i = 0; i < 256; i++)
      256:   63:    {
        -:   64:        std::getline(f, s);
        1:   65:    }
       1*:   66:    std::cout << "Checking the number of pixels with a green value of 255 is the expected (white pixels).\n";
        1:   67:    EXPECT_EQ(s, pixels_with_green_255);
------------------
_ZN29unit_test_test_histogram_TestC2Ev:
function _ZN29unit_test_test_histogram_TestC2Ev called 1 returned 100% blocks executed 100%
        1:   43:
        1:   43-block  0
call    0 returned 1
------------------
_ZN29unit_test_test_histogram_TestD0Ev:
function _ZN29unit_test_test_histogram_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   43:
        1:   43-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN29unit_test_test_histogram_TestD2Ev:
function _ZN29unit_test_test_histogram_TestD2Ev called 1 returned 100% blocks executed 100%
        1:   43:
        1:   43-block  0
call    0 returned 1
------------------
_ZN29unit_test_test_histogram_Test8TestBodyEv:
function _ZN29unit_test_test_histogram_Test8TestBodyEv called 1 returned 100% blocks executed 40%
        1:   43:
        -:   44:TEST(unit_test, test_histogram)
        2:   45:{
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$:   45-block  2
    $$$$$:   45-block  3
call    7 never executed
        1:   46:    auto x = read_pixels(std::filesystem::path("../../unit_test/test_in/test.bmp"), 138, 5, 5);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   46-block  1
call    6 returned 1
    $$$$$:   46-block  2
call    7 never executed
    $$$$$:   46-block  3
        2:   47:    histogram(x, std::filesystem::path("../../unit_test/test_out/test.hst"));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$:   47-block  1
    $$$$$:   47-block  2
call    7 never executed
        -:   48:    std::ifstream f = std::filesystem::path("../../unit_test/test_out/test.hst");
        4:   49:
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
call   15 returned 1
call   16 returned 1
    $$$$$:   49-block  0
    $$$$$:   49-block  1
    $$$$$:   49-block  2
    $$$$$:   49-block  3
call   17 never executed
    $$$$$:   49-block  4
call   18 never executed
    $$$$$:   49-block  5
call   19 never executed
    $$$$$:   49-block  6
call   20 never executed
        1:   50:    std::string s, pixels_with_red_0 = "5", pixels_with_red_255 = "20", pixels_with_green_255 = "5";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51:    std::getline(f, s);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   52:    std::cout << "Checking the number of pixels with a red value of 0 is the expected (black pixels).\n";
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   52-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   52-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   52-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   52-block  5
call   16 never executed
call   17 never executed
        1:   52-block  6
call   18 returned 1
    $$$$$:   52-block  7
call   19 never executed
    $$$$$:   52-block  8
    $$$$$:   52-block  9
call   20 never executed
    $$$$$:   52-block 10
    $$$$$:   52-block 11
call   21 never executed
        -:   53:    EXPECT_EQ(s, pixels_with_red_0);
      256:   54:
      256:   54-block  0
branch  0 taken 255 (fallthrough)
branch  1 taken 1
      255:   54-block  1
        -:   55:    for (int i = 0; i < 255; i++)
      255:   56:    {
      255:   56-block  0
call    0 returned 255
branch  1 taken 255 (fallthrough)
branch  2 taken 0 (throw)
        -:   57:        std::getline(f, s);
        1:   58:    }
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   59:    std::cout << "Checking the number of pixels with a red value of 255 is the expected (red pixels + white pixels).\n";
        1:   59-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   59-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   59-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   59-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   59-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   59-block  5
call   16 never executed
call   17 never executed
        1:   59-block  6
call   18 returned 1
    $$$$$:   59-block  7
call   19 never executed
    $$$$$:   59-block  8
    $$$$$:   59-block  9
call   20 never executed
    $$$$$:   59-block 10
    $$$$$:   59-block 11
call   21 never executed
        -:   60:    EXPECT_EQ(s, pixels_with_red_255);
      257:   61:
      257:   61-block  0
branch  0 taken 256 (fallthrough)
branch  1 taken 1
      256:   61-block  1
        -:   62:    for (int i = 0; i < 256; i++)
      256:   63:    {
      256:   63-block  0
call    0 returned 256
branch  1 taken 256 (fallthrough)
branch  2 taken 0 (throw)
        -:   64:        std::getline(f, s);
        1:   65:    }
        1:   65-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   66:    std::cout << "Checking the number of pixels with a green value of 255 is the expected (white pixels).\n";
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:   66-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   66-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   66-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%:   66-block  5
call   16 never executed
call   17 never executed
        1:   66-block  6
call   18 returned 1
    $$$$$:   66-block  7
call   19 never executed
    $$$$$:   66-block  8
    $$$$$:   66-block  9
call   20 never executed
    $$$$$:   66-block 10
    $$$$$:   66-block 11
call   21 never executed
        1:   67:    EXPECT_EQ(s, pixels_with_green_255);
------------------
        -:   68:}
