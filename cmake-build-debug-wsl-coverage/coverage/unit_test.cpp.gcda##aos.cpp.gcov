        -:    0:Source:/mnt/c/Users/Usuario/CLionProjects/ca_p1/aos.cpp
        -:    0:Graph:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcno
        -:    0:Data:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcda
        -:    0:Runs:1
        -:    1:/* Source file containing functions exclusive to the AOS version */
        -:    2:
        -:    3:#include "aos.hpp"
        -:    4:#include "common_gauss.cpp"
        -:    5:#include "common_hst.hpp"
        -:    6:#include "common_mono.cpp"
        -:    7:#include "common_rw.hpp"
        -:    8:#include <cstring>
        -:    9:#include <filesystem>
        -:   10:#include <iostream>
        -:   11:
function _Z11read_pixelsRKNSt10filesystem7__cxx114pathEjjj called 3 returned 100% blocks executed 75%
        3:   12:std::vector<struct Pixel> read_pixels(const std::filesystem::path &path, uint32_t start, uint32_t width, uint32_t height)
        -:   13:// Reads the RGB values of each pixel in the image
        -:   14:{
        6:   15:    std::ifstream f;
        3:   15-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   15-block  1
call    3 returned 3
    $$$$$:   15-block  2
call    4 never executed
        3:   16:    f.open(path, std::ios::in | std::ios::binary);
        3:   16-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        -:   17:    /* We do not need to check if it exists or if it could be opened because read_header() already did */
        -:   18:
        3:   19:    f.seekg(start);
        3:   19-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   19-block  1
        -:   20:
        3:   21:    int px = int(width * height);
        3:   22:    std::vector<Pixel> img(px);
        3:   22-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   22-block  1
        -:   23:
        -:   24:    /* To calculate how many bytes of padding we have in each row, first we find out how many bytes the colors take up:
        -:   25:     * that is three bytes per color. That amount modulo 4 tells us how many bytes over we are, and 4 minus that amount
        -:   26:     * gives us how many bytes we have left. If the color bytes modulo 4 is 0, then that amount is 4, and we may skip
        -:   27:     * information from the image, so we apply modulo 4 once again to convert that to 0.
        -:   28:    */
        3:   29:    const int padding_bytes = (4 - (int(width) * 3) % 4) % 4;
        3:   30:    int read = 0;
        -:   31:
       78:   32:    for (int i = 0; i < px; i++) {
       78:   32-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 3
       75:   32-block  1
       75:   33:        f.read(reinterpret_cast<char *>(&img[i].b), sizeof(uint8_t));
       75:   33-block  0
call    0 returned 75
call    1 returned 75
branch  2 taken 75 (fallthrough)
branch  3 taken 0 (throw)
       75:   34:        read++;
       75:   35:        f.read(reinterpret_cast<char *>(&img[i].g), sizeof(uint8_t));
       75:   35-block  0
call    0 returned 75
call    1 returned 75
branch  2 taken 75 (fallthrough)
branch  3 taken 0 (throw)
       75:   36:        read++;
       75:   37:        f.read(reinterpret_cast<char *>(&img[i].r), sizeof(uint8_t));
       75:   37-block  0
call    0 returned 75
call    1 returned 75
branch  2 taken 75 (fallthrough)
branch  3 taken 0 (throw)
       75:   38:        read++;
       75:   39:        if (read == static_cast<int>(width) * 3) {
       75:   39-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 60
       15:   40:            read = 0;
       15:   41:            f.ignore(padding_bytes);
       15:   41-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
        -:   42:        }
        -:   43:    }
        -:   44:
        6:   45:    return img;
        3:   45-block  0
        3:   45-block  1
        -:   46:}
        -:   47:
function _Z9write_bmpRNSt10filesystem7__cxx114pathERK6HeaderSt6vectorI5PixelSaIS7_EE called 0 returned 0% blocks executed 0%
    #####:   48:void write_bmp(std::filesystem::path &path, const Header &header, std::vector<Pixel> image)
        -:   49:// Writes a (valid) bitmap file in the specified directory using a given header and the color values for its pixels
        -:   50:{
    #####:   51:    write_header(path, header);
    %%%%%:   51-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   51-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   51-block  2
call    6 never executed
    $$$$$:   51-block  3
call    7 never executed
    $$$$$:   51-block  4
        -:   52:
    #####:   53:    std::ofstream f;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   53-block  0
call    3 never executed
    $$$$$:   53-block  1
call    4 never executed
    #####:   54:    f.open(path, std::ios::in | std::ios::binary);
    %%%%%:   54-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   55:    /* We do not need to check for errors because write_header() already did */
        -:   56:
    #####:   57:    f.seekp(int(header.img_start));
    %%%%%:   57-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   57-block  1
        -:   58:
    #####:   59:    const int padding_bytes = (4 - (static_cast<int>(header.img_width) * 3) % 4) % 4;
    #####:   60:    int px = int(header.img_width * header.img_height);
    #####:   61:    int zero = 0;// FIXME: This is stupid
    #####:   62:    int wrote = 0;
    #####:   63:    for (int i = 0; i < px; i++) {
    %%%%%:   63-block  0
    %%%%%:   63-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:   63-block  2
    #####:   64:        f.write(reinterpret_cast<char *>(&image[i].b), sizeof(uint8_t));
    %%%%%:   64-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   65:        wrote++;
    #####:   66:        f.write(reinterpret_cast<char *>(&image[i].g), sizeof(uint8_t));
    %%%%%:   66-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   67:        wrote++;
    #####:   68:        f.write(reinterpret_cast<char *>(&image[i].r), sizeof(uint8_t));
    %%%%%:   68-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:        wrote++;
    #####:   70:        if (wrote == static_cast<int>(header.img_width) * 3) {
    %%%%%:   70-block  0
branch  0 never executed
branch  1 never executed
    #####:   71:            f.write(reinterpret_cast<const char *>(&zero), padding_bytes);
    %%%%%:   71-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:            wrote = 0;
    %%%%%:   72-block  0
        -:   73:        }
        -:   74:    }
    #####:   75:}
        -:   76:
function _Z5countRSt6vectorIiSaIiEES2_S2_RKS_I5PixelSaIS3_EE called 1 returned 100% blocks executed 100%
        1:   77:void count(std::vector<int> &freq_red, std::vector<int> &freq_green, std::vector<int> &freq_blue, const std::vector<Pixel> &img) {
        1:   78:    int n = static_cast<int>(img.size());// Save the number of pixels in the image
        1:   78-block  0
call    0 returned 1
       26:   79:    for (int i = 0; i < n; i++) {
       26:   79-block  0
branch  0 taken 25 (fallthrough)
branch  1 taken 1
       25:   80:        freq_red[img[i].r]++;
       25:   80-block  0
call    0 returned 25
call    1 returned 25
       25:   81:        freq_green[img[i].g]++;
call    0 returned 25
call    1 returned 25
       25:   82:        freq_blue[img[i].b]++;
call    0 returned 25
call    1 returned 25
        -:   83:    }
        1:   84:}
        -:   85:
function _Z9histogramRKSt6vectorI5PixelSaIS0_EENSt10filesystem7__cxx114pathE called 1 returned 100% blocks executed 68%
        1:   86:void histogram(const std::vector<Pixel> &img, std::filesystem::path path) {
        2:   87:    std::ofstream f = open_file(path);
        1:   87-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   87-block  1
call    4 never executed
        -:   88:
        -:   89:    // Declare 3 vectors to count the frequencies, one for each color
        2:   90:    std::vector<int> freq_red, freq_green, freq_blue;
        1:   90-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   90-block  1
call    3 returned 1
call    4 returned 1
call    5 returned 1
    $$$$$:   90-block  2
call    6 never executed
    $$$$$:   90-block  3
call    7 never executed
    $$$$$:   90-block  4
call    8 never executed
        1:   91:    freq_red.resize(256);// size = 256 as we can have those values
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   92:    freq_green.resize(256);
        1:   92-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93:    freq_blue.resize(256);
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:
        1:   95:    count(freq_red, freq_green, freq_blue, img);
        1:   95-block  0
call    0 returned 1
        -:   96:
        1:   97:    print_to_file(freq_red, f);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   98:    print_to_file(freq_green, f);
        1:   98-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   99:    print_to_file(freq_blue, f);
        1:   99-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  100:}
        -:  101:
function _Z5getimiRKSt6vectorI5PixelSaIS0_EE called 0 returned 0% blocks executed 0%
    #####:  102:Pixel getim(int position, const std::vector<Pixel> &img) {
    #####:  103:    Pixel p{};
    #####:  104:    p.r = img[position].r;
    %%%%%:  104-block  0
call    0 never executed
    #####:  105:    p.g = img[position].g;
call    0 never executed
    #####:  106:    p.b = img[position].b;
call    0 never executed
    #####:  107:    return p;
        -:  108:}
        -:  109:
function _Z8multiplyhi called 0 returned 0% blocks executed 0%
    #####:  110:int multiply(uint8_t color, int m) {
    #####:  111:    int ip = static_cast<int>(color);
    #####:  112:    int mip = m * ip;
    #####:  113:    return mip;
    %%%%%:  113-block  0
        -:  114:}
        -:  115:
function _Z13pixel_to_zero5Pixel called 0 returned 0% blocks executed 0%
    #####:  116:Pixel pixel_to_zero(Pixel p) {
    #####:  117:    p.r = static_cast<uint8_t>(0);
    #####:  118:    p.g = static_cast<uint8_t>(0);
    #####:  119:    p.b = static_cast<uint8_t>(0);
    #####:  120:    return p;
    %%%%%:  120-block  0
        -:  121:}
        -:  122:
function _Z6getresiii called 0 returned 0% blocks executed 0%
    #####:  123:Pixel getres(int sumatoryr, int sumatoryg, int sumatoryb) {
    #####:  124:    Pixel res{};
    #####:  125:    int w = 273;
        -:  126:
    #####:  127:    int resr = sumatoryr / w;
    #####:  128:    int resg = sumatoryg / w;
    #####:  129:    int resb = sumatoryb / w;
        -:  130:
    #####:  131:    res.r = static_cast<uint8_t>(resr);
    #####:  132:    res.g = static_cast<uint8_t>(resg);
    #####:  133:    res.b = static_cast<uint8_t>(resb);
        -:  134:
    #####:  135:    return res;
    %%%%%:  135-block  0
        -:  136:}
        -:  137:
function _Z6getmimiiRKSt6vectorI5PixelSaIS0_EERK6Header called 0 returned 0% blocks executed 0%
    #####:  138:Pixel getmim(int i, int j, const std::vector<Pixel> &img, const Header &h) {
    #####:  139:    int sumatoryr = 0, sumatoryg = 0, sumatoryb = 0;
    #####:  140:    for (int s = -3; s < 2; s++) {
    %%%%%:  140-block  0
    %%%%%:  140-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  140-block  2
    #####:  141:        for (int t = -3; t < 2; t++) {
    %%%%%:  141-block  0
    %%%%%:  141-block  1
branch  0 never executed
branch  1 never executed
    #####:  142:            Pixel p{};
    #####:  143:            int position = ((i + s) * static_cast<int>(h.img_width)) + (j + t);
    #####:  144:            if (i + s < 0 || j + t < 0 || i + s > static_cast<int>(h.img_height) - 1 || j + t > static_cast<int>(h.img_width) - 1) {
    %%%%%:  144-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  144-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:  144-block  2
branch  4 never executed
branch  5 never executed
    %%%%%:  144-block  3
branch  6 never executed
branch  7 never executed
    #####:  145:                p = pixel_to_zero(p);
    %%%%%:  145-block  0
call    0 never executed
        -:  146:            } else {
    #####:  147:                p = getim(position, img);
    %%%%%:  147-block  0
call    0 never executed
        -:  148:            }
    #####:  149:            int m = getm(s, t);
    %%%%%:  149-block  0
call    0 never executed
    #####:  150:            int mimr = multiply(p.r, m);
call    0 never executed
    #####:  151:            int mimg = multiply(p.g, m);
call    0 never executed
    #####:  152:            int mimb = multiply(p.b, m);
call    0 never executed
    #####:  153:            sumatoryr += mimr;
    #####:  154:            sumatoryg += mimg;
    #####:  155:            sumatoryb += mimb;
        -:  156:        }
        -:  157:    }
    #####:  158:    Pixel res = getres(sumatoryr, sumatoryg, sumatoryb);
    %%%%%:  158-block  0
call    0 never executed
    #####:  159:    return res;
        -:  160:}
        -:  161:
function _Z5gaussRKSt6vectorI5PixelSaIS0_EERK6Header called 0 returned 0% blocks executed 0%
    #####:  162:std::vector<Pixel> gauss(const std::vector<Pixel> &img, const Header &h) {
    #####:  163:    std::vector<Pixel> res;
    %%%%%:  163-block  0
call    0 never executed
    #####:  164:    res.resize(h.img_height * h.img_width);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:    for (int i = 0; i < static_cast<int>(h.img_height); i++) {
    %%%%%:  165-block  0
    %%%%%:  165-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  165-block  2
    #####:  166:        for (int j = 0; j < static_cast<int>(h.img_width); j++) {
    %%%%%:  166-block  0
    %%%%%:  166-block  1
branch  0 never executed
branch  1 never executed
    #####:  167:            Pixel resij = getmim(i, j, img, h);
    %%%%%:  167-block  0
call    0 never executed
    #####:  168:            res[i * h.img_width + j] = resij;
call    0 never executed
        -:  169:        }
        -:  170:    }
    #####:  171:    return res;
    %%%%%:  171-block  0
    %%%%%:  171-block  1
        -:  172:}
        -:  173:
function _Z14call_histogramRKSt6vectorI5PixelSaIS0_EERKNSt10filesystem7__cxx114pathE called 0 returned 0% blocks executed 0%
    #####:  174:void call_histogram(const std::vector<Pixel> &image, const std::filesystem::path &new_file) {
    #####:  175:    std::filesystem::path output_file = new_file.parent_path();
    %%%%%:  175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  175-block  1
call    3 never executed
    #####:  176:    output_file /= new_file.stem();
    %%%%%:  176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  176-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  176-block  2
call    6 never executed
    $$$$$:  176-block  3
call    7 never executed
    $$$$$:  176-block  4
    #####:  177:    output_file += ".hst";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  178:    histogram(image, output_file);
    %%%%%:  178-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  178-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  178-block  2
call    6 never executed
call    7 never executed
    $$$$$:  178-block  3
call    8 never executed
    $$$$$:  178-block  4
    #####:  179:}
        -:  180:
function _Z4monoRSt6vectorI5PixelSaIS0_EE called 1 returned 100% blocks executed 62%
        1:  181:std::vector<Pixel> mono(std::vector<Pixel> &image) {
        1:  182:    std::vector<Pixel> grayscale_img;
        1:  182-block  0
call    0 returned 1
        -:  183:
       26:  184:    for (auto &i: image) {
call    0 returned 1
call    1 returned 1
       26:  184-block  0
call    2 returned 26
branch  3 taken 25 (fallthrough)
branch  4 taken 1
       25:  184-block  1
call    5 returned 25
call    6 returned 25
       50:  185:        std::vector<uint8_t> colors = {i.r, i.g, i.b};
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 25
    $$$$$:  185-block  0
    $$$$$:  185-block  1
    $$$$$:  185-block  2
call    5 never executed
       50:  186:        std::vector<double> norm_col = normalize(colors);
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
       25:  186-block  0
call    3 returned 25
branch  4 taken 25 (fallthrough)
branch  5 taken 0 (throw)
       25:  186-block  1
call    6 returned 25
    $$$$$:  186-block  2
    $$$$$:  186-block  3
call    7 never executed
       25:  187:        norm_col = linear_intensity_transform(norm_col);
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
       25:  187-block  0
call    3 returned 25
branch  4 taken 25 (fallthrough)
branch  5 taken 0 (throw)
       25:  187-block  1
call    6 returned 25
call    7 returned 25
call    8 returned 25
    $$$$$:  187-block  2
call    9 never executed
    $$$$$:  187-block  3
       25:  188:        double gray = gamma_correct(linear_transform(norm_col[0], norm_col[1], norm_col[2]));
call    0 returned 25
call    1 returned 25
call    2 returned 25
call    3 returned 25
call    4 returned 25
       25:  189:        u_int8_t den_gray = denormalize(gray);
call    0 returned 25
       25:  190:        Pixel x = {den_gray, den_gray, den_gray};
       25:  191:        grayscale_img.push_back(x);
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
        -:  192:    }
        -:  193:
        1:  194:    return grayscale_img;
        1:  194-block  0
        1:  194-block  1
        -:  195:}
        -:  196:
function _Z10perform_opSt6vectorI5PixelSaIS0_EERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt10filesystem7__cxx114pathERK6Header called 0 returned 0% blocks executed 0%
    #####:  197:std::vector<Pixel> perform_op(std::vector<Pixel> image, std::string &op, const std::filesystem::path &new_file, const Header &header) {
    #####:  198:    const char *string = op.c_str();
    %%%%%:  198-block  0
call    0 never executed
    #####:  199:    if (strcmp(string, "histo") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  200:        call_histogram(image, new_file);
    %%%%%:  200-block  0
call    0 never executed
        -:  201:    }
    #####:  202:    if (strcmp(string, "mono") == 0) {
    %%%%%:  202-block  0
branch  0 never executed
branch  1 never executed
    #####:  203:        image = mono(image);
    %%%%%:  203-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  204:    }
    #####:  205:    if (strcmp(string, "gauss") == 0) {
    %%%%%:  205-block  0
branch  0 never executed
branch  1 never executed
    #####:  206:        image = gauss(image, header);
    %%%%%:  206-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  207:    }
    #####:  208:    return image;
    %%%%%:  208-block  0
call    0 never executed
        -:  209:}
