        -:    0:Source:/mnt/c/Users/Usuario/CLionProjects/ca_p1/common_mono.cpp
        -:    0:Graph:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcno
        -:    0:Data:/mnt/c/Users/Usuario/CLionProjects/ca_p1/cmake-build-debug-wsl-coverage/unit_test/CMakeFiles/unit_test.dir/unit_test.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "common_mono.hpp"
        -:    2:#include <cmath>
        -:    3:#include <vector>
        -:    4:
function _Z9normalizeSt6vectorIhSaIhEE called 25 returned 100% blocks executed 71%
       25:    5:std::vector<double> normalize(std::vector<u_int8_t> colors)
        -:    6:// Normalize (divide by 255) the RGB values of a pixel
        -:    7:{
       25:    8:    std::vector<double> normalized_colors;
       25:    8-block  0
call    0 returned 25
        -:    9:
       25:   10:    normalized_colors.push_back(static_cast<double>(colors[0]) / 255);
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   10-block  0
       25:   11:    normalized_colors.push_back(static_cast<double>(colors[1]) / 255);
       25:   11-block  0
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   11-block  1
       25:   12:    normalized_colors.push_back(static_cast<double>(colors[2]) / 255);
       25:   12-block  0
call    0 returned 25
call    1 returned 25
branch  2 taken 25 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   12-block  1
        -:   13:
       25:   14:    return normalized_colors;
       25:   14-block  0
       25:   14-block  1
        -:   15:}
        -:   16:
function _Z26linear_intensity_transformSt6vectorIdSaIdEE called 25 returned 100% blocks executed 83%
       25:   17:std::vector<double> linear_intensity_transform(std::vector<double> normalized_colors)
        -:   18:// Applies a transformation to the normalized colors' intensity
        -:   19:{
       25:   20:    std::vector<double> new_color;
       25:   20-block  0
call    0 returned 25
      100:   21:    for (int i = 0; i < 3; i++) {
      100:   21-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 25
       75:   21-block  1
       75:   22:        if (normalized_colors[i] <= 0.0405) {
       75:   22-block  0
call    0 returned 75
branch  1 taken 45 (fallthrough)
branch  2 taken 30
       45:   23:            new_color.push_back(normalized_colors[i] / 12.92);
       45:   23-block  0
call    0 returned 45
call    1 returned 45
branch  2 taken 45 (fallthrough)
branch  3 taken 0 (throw)
       45:   23-block  1
    $$$$$:   23-block  2
        -:   24:        } else {
       30:   25:            new_color.push_back(std::pow((normalized_colors[i] + 0.055) / 1.055, 2.4));
       30:   25-block  0
call    0 returned 30
call    1 returned 30
branch  2 taken 30 (fallthrough)
branch  3 taken 0 (throw)
       30:   25-block  1
    $$$$$:   25-block  2
        -:   26:        }
        -:   27:    }
       25:   28:    return new_color;
       25:   28-block  0
       25:   28-block  1
        -:   29:}
        -:   30:
function _Z16linear_transformddd called 25 returned 100% blocks executed 100%
       25:   31:double linear_transform(double red, double green, double blue)
        -:   32:// Applies a linear transformation to the intensity-normalized colors and obtains the gray value
        -:   33:{
       25:   34:    return 0.2126 * red + 0.7152 * green + 0.0722 * blue;
       25:   34-block  0
        -:   35:}
        -:   36:
function _Z13gamma_correctd called 25 returned 100% blocks executed 100%
       25:   37:double gamma_correct(double gray)
        -:   38:// Applies a gamma correction to the gray value obtained
        -:   39:{
       25:   40:    if (gray <= 0.0031308) {
       25:   40-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 20
        5:   41:        return 12.92 * gray;
        5:   41-block  0
        -:   42:    }
        -:   43:
       20:   44:    return 1.055 * pow(gray, 1 / 2.4) - 0.055;
       20:   44-block  0
        -:   45:}
        -:   46:
function _Z11denormalized called 25 returned 100% blocks executed 100%
       25:   47:u_int8_t denormalize(double gray)
        -:   48:// Denormalizes the gray value by multiplying it by 255
        -:   49:{
       25:   50:    return static_cast<u_int8_t>(gray * 255);
       25:   50-block  0
        -:   51:}
